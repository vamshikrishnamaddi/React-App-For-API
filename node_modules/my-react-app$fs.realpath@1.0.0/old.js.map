{"version":3,"sources":["old.js"],"names":["pathModule","require","isWindows","process","platform","fs","DEBUG","env","NODE_DEBUG","test","rethrow","callback","backtrace","Error","debugCallback","missingCallback","err","message","throwDeprecation","noDeprecation","msg","stack","traceDeprecation","console","trace","error","maybeCallback","cb","normalize","nextPartRe","splitRootRe","exports","realpathSync","p","cache","resolve","Object","prototype","hasOwnProperty","call","original","seenLinks","knownHard","pos","current","base","previous","start","m","exec","length","lstatSync","lastIndex","result","resolvedLink","stat","isSymbolicLink","linkTarget","id","dev","toString","ino","statSync","readlinkSync","slice","realpath","nextTick","bind","lstat","LOOP","gotResolvedLink","gotStat","gotTarget","readlink","target"],"mappings":"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","file":"old.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n"]}