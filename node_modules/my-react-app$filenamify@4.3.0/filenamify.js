'use strict';

Liferay.Loader.define('my-react-app$filenamify@4.3.0/filenamify', ['module', 'exports', 'require', 'my-react-app$trim-repeated', 'my-react-app$filename-reserved-regex', 'my-react-app$strip-outer'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		const trimRepeated = require('my-react-app$trim-repeated');
		const filenameReservedRegex = require('my-react-app$filename-reserved-regex');
		const stripOuter = require('my-react-app$strip-outer');

		// Doesn't make sense to have longer filenames
		const MAX_FILENAME_LENGTH = 100;

		const reControlChars = /[\u0000-\u001f\u0080-\u009f]/g; // eslint-disable-line no-control-regex
		const reRelativePath = /^\.+/;
		const reTrailingPeriods = /\.+$/;

		const filenamify = (string, options = {}) => {
			if (typeof string !== 'string') {
				throw new TypeError('Expected a string');
			}

			const replacement = options.replacement === undefined ? '!' : options.replacement;

			if (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {
				throw new Error('Replacement string cannot contain reserved filename characters');
			}

			string = string.replace(filenameReservedRegex(), replacement);
			string = string.replace(reControlChars, replacement);
			string = string.replace(reRelativePath, replacement);
			string = string.replace(reTrailingPeriods, '');

			if (replacement.length > 0) {
				string = trimRepeated(string, replacement);
				string = string.length > 1 ? stripOuter(string, replacement) : string;
			}

			string = filenameReservedRegex.windowsNames().test(string) ? string + replacement : string;
			string = string.slice(0, typeof options.maxLength === 'number' ? options.maxLength : MAX_FILENAME_LENGTH);

			return string;
		};

		module.exports = filenamify;
	}
});
//# sourceMappingURL=filenamify.js.map