{"version":3,"sources":["index.js"],"names":["path","require","fs","commonDir","pkgDir","makeDir","env","cwd","process","isWritable","accessSync","constants","W_OK","_","useDirectory","directory","options","create","sync","thunk","arguments_","join","getNodeModuleDirectory","nodeModules","existsSync","module","exports","CACHE_DIR","includes","name","files","undefined"],"mappings":"AAAA;;;;;;AACA,QAAMA,OAAOC,QAAQ,mBAAR,CAAb;AACA,QAAMC,KAAKD,QAAQ,iBAAR,CAAX;AACA,QAAME,YAAYF,QAAQ,wBAAR,CAAlB;AACA,QAAMG,SAASH,QAAQ,sBAAR,CAAf;AACA,QAAMI,UAAUJ,QAAQ,uBAAR,CAAhB;;AAEA,QAAM,EAACK,GAAD,EAAMC,GAAN,KAAaC,OAAnB;;AAEA,QAAMC,aAAaT,QAAQ;AAC1B,OAAI;AACHE,OAAGQ,UAAH,CAAcV,IAAd,EAAoBE,GAAGS,SAAH,CAAaC,IAAjC;AACA,WAAO,IAAP;AACA,IAHD,CAGE,OAAOC,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,GAPD;;AASA,WAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0C;AACzC,OAAIA,QAAQC,MAAZ,EAAoB;AACnBZ,YAAQa,IAAR,CAAaH,SAAb;AACA;;AAED,OAAIC,QAAQG,KAAZ,EAAmB;AAClB,WAAO,CAAC,GAAGC,UAAJ,KAAmBpB,KAAKqB,IAAL,CAAUN,SAAV,EAAqB,GAAGK,UAAxB,CAA1B;AACA;;AAED,UAAOL,SAAP;AACA;;AAED,WAASO,sBAAT,CAAgCP,SAAhC,EAA2C;AAC1C,SAAMQ,cAAcvB,KAAKqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,CAApB;;AAEA,OACC,CAACN,WAAWc,WAAX,CAAD,KACCrB,GAAGsB,UAAH,CAAcD,WAAd,KAA8B,CAACd,WAAWT,KAAKqB,IAAL,CAAUN,SAAV,CAAX,CADhC,CADD,EAGE;AACD;AACA;;AAED,UAAOQ,WAAP;AACA;;AAEDE,SAAOC,OAAP,GAAiB,CAACV,UAAU,EAAX,KAAkB;AAClC,OAAIV,IAAIqB,SAAJ,IAAiB,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,GAAlB,EAAuB,GAAvB,EAA4BC,QAA5B,CAAqCtB,IAAIqB,SAAzC,CAAtB,EAA2E;AAC1E,WAAOb,aAAad,KAAKqB,IAAL,CAAUf,IAAIqB,SAAd,EAAyBX,QAAQa,IAAjC,CAAb,EAAqDb,OAArD,CAAP;AACA;;AAED,OAAI,EAACT,KAAKQ,YAAYR,KAAlB,KAA2BS,OAA/B;;AAEA,OAAIA,QAAQc,KAAZ,EAAmB;AAClBf,gBAAYZ,UAAUY,SAAV,EAAqBC,QAAQc,KAA7B,CAAZ;AACA;;AAEDf,eAAYX,OAAOc,IAAP,CAAYH,SAAZ,CAAZ;;AAEA,OAAI,CAACA,SAAL,EAAgB;AACf;AACA;;AAED,SAAMQ,cAAcD,uBAAuBP,SAAvB,CAApB;AACA,OAAI,CAACQ,WAAL,EAAkB;AACjB,WAAOQ,SAAP;AACA;;AAED,UAAOjB,aAAad,KAAKqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,EAAqC,QAArC,EAA+CC,QAAQa,IAAvD,CAAb,EAA2Eb,OAA3E,CAAP;AACA,GAvBD","file":"index.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst commonDir = require('commondir');\nconst pkgDir = require('pkg-dir');\nconst makeDir = require('make-dir');\n\nconst {env, cwd} = process;\n\nconst isWritable = path => {\n\ttry {\n\t\tfs.accessSync(path, fs.constants.W_OK);\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nfunction useDirectory(directory, options) {\n\tif (options.create) {\n\t\tmakeDir.sync(directory);\n\t}\n\n\tif (options.thunk) {\n\t\treturn (...arguments_) => path.join(directory, ...arguments_);\n\t}\n\n\treturn directory;\n}\n\nfunction getNodeModuleDirectory(directory) {\n\tconst nodeModules = path.join(directory, 'node_modules');\n\n\tif (\n\t\t!isWritable(nodeModules) &&\n\t\t(fs.existsSync(nodeModules) || !isWritable(path.join(directory)))\n\t) {\n\t\treturn;\n\t}\n\n\treturn nodeModules;\n}\n\nmodule.exports = (options = {}) => {\n\tif (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {\n\t\treturn useDirectory(path.join(env.CACHE_DIR, options.name), options);\n\t}\n\n\tlet {cwd: directory = cwd()} = options;\n\n\tif (options.files) {\n\t\tdirectory = commonDir(directory, options.files);\n\t}\n\n\tdirectory = pkgDir.sync(directory);\n\n\tif (!directory) {\n\t\treturn;\n\t}\n\n\tconst nodeModules = getNodeModuleDirectory(directory);\n\tif (!nodeModules) {\n\t\treturn undefined;\n\t}\n\n\treturn useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);\n};\n"]}