.label {
	@include clay-label-variant($cadmin-label);
}

.label-dismissible {
	@include clay-css($cadmin-label-dismissible);
}

.label-item {
	@include clay-css($cadmin-label-item);

	a {
		@include clay-link(setter(map-get($cadmin-label-item, link), ()));
	}

	.btn-unstyled {
		@include clay-button-variant(
			setter(map-get($cadmin-label-item, btn-unstyled), ())
		);
	}

	.close {
		@include clay-close(setter(map-get($cadmin-label-item, close), ()));
	}

	.lexicon-icon {
		@include clay-css(
			setter(map-get($cadmin-label-item, lexicon-icon), ())
		);
	}

	.text-truncate-inline {
		@include clay-css(
			setter(map-get($cadmin-label-item, text-truncate-inline), ())
		);
	}
}

.label-item-expand {
	@include clay-css($cadmin-label-item-expand);

	a {
		@include clay-link(
			setter(map-get($cadmin-label-item-expand, link), ())
		);
	}
}

.label-item-before {
	@include clay-css($cadmin-label-item-before);
}

.label-item-after {
	@include clay-css($cadmin-label-item-after);
}

// Label Sizes

@each $selector, $value in $cadmin-label-sizes {
	$selector: if(
		starts-with($selector, '.') or
			starts-with($selector, '#') or
			starts-with($selector, '%'),
		$selector,
		str-insert($selector, '.', 1)
	);

	@if (starts-with($selector, '%') or map-get($value, extend)) {
		#{$selector} {
			@include clay-label-variant($value);
		}
	} @else {
		$placeholder: if(
			starts-with($selector, '.') or starts-with($selector, '#'),
			'%#{str-slice($selector, 2)}',
			'%#{$selector}'
		);

		#{$placeholder} {
			@include clay-label-variant($value);
		}

		#{$selector} {
			@extend #{$placeholder} !optional;
		}
	}
}

// Label Variants

@each $color, $value in $cadmin-label-palette {
	$selector: if(
		starts-with($color, '.') or
			starts-with($color, '#') or
			starts-with($color, '%'),
		$color,
		str-insert($color, '.label-', 1)
	);

	@if (starts-with($color, '%') or map-get($value, extend)) {
		#{$selector} {
			@include clay-label-variant($value);
		}
	} @else {
		$placeholder: if(
			starts-with($color, '.') or starts-with($color, '#'),
			'%#{str-slice($color, 2)}',
			'%label-#{$color}'
		);

		#{$placeholder} {
			@include clay-label-variant($value);
		}

		#{$selector} {
			@extend #{$placeholder} !optional;
		}
	}
}
