{"version":3,"sources":["../src/index.ts"],"names":["condition","format","args","error","undefined","Error","argIndex","replace","name","framesToPop"],"mappings":";;;;;kCAW0BA,C,EAAgBC,C,EAAAA;AAAAA,WAAAA,IAAAA,IAAAA,UAAAA,MAAAA,EAAmBC,IAAAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAnBD,EAAmBC,IAAAA,CAAnBD,EAAmBC,IAAAA,CAAnBD,EAAmBC,GAAnBD,EAAmBC,EAAAA,IAAAA,CAAAA,IAAAA,UAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAOtDF,CAPsDE,EAO3C;AAAA,YACVC,CADU,CACVA,IAAAA,KACWC,CADXD,KACAF,CADAE,EAEFA,IAAQ,IAAIE,KAAJ,CACN,+HADM,CAARF,CAFEA,KAMG;AAAA,cACDG,IAAW,CADV,CACU,CACfH,IAAQ,IAAIE,KAAJ,CACNJ,EAAOM,OAAPN,CAAe,KAAfA,EAAsB,YAAA;AAAA,mBACbC,EAAKI,GAALJ,CADa;AACRI,WADdL,CADM,CADO,EAMTO,IANS,GAMF,qBANE;AAMF,eAGdL,EAAcM,WAAdN,GAA4B,CAA5BA,EACKA,CAJS;AAITA;AAAAA,K","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport function invariant(condition: any, format: string, ...args: any[]) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n          'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    (error as any).framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]}