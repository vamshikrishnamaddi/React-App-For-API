{"version":3,"sources":["../src/index.ts"],"names":["invariant","condition","format","args","error","argIndex"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAWA,aAAgBA,SAAhB,CAA0BC,SAA1B,EAA0CC,MAA1C,EAA0CA;wCAAmBC,OAAAA,IAAAA,KAAAA,CAAAA,OAAAA,CAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,C,EAAAA,OAAAA,C,EAAAA,OAAAA,I,EAAAA,M,EAAAA;AAAAA,aAAAA,OAAAA,CAAAA,IAAAA,UAAAA,IAAAA,CAAAA;;;AAChB;YACrCD,WAAJ,S,EAA0B;gBAClB,IAAA,KAAA,CAAN,8CAAM,C;;;;UAIN,CAAJ,S,EAAgB;YACd,K;;YACIA,WAAJ,S,EAA0B;AACxBE,kBAAQ,IAAA,KAAA,CACN,uEADFA,6DAAQ,CAARA;AADF,S,MAKO;cACDC,WAAJ,C;AACAD,kBAAQ,IAAA,KAAA,CACN,OAAA,OAAA,CAAA,KAAA,EAAsB,YAAA;mBACbD,KAAP,UAAOA,C;AAFXC,WACE,CADM,CAARA;AAKAA,gBAAAA,IAAAA,GAAAA,qBAAAA;;;AAGDA,cAAAA,WAAAA,GAjBa,CAiBbA,CAjBa,CAAA;;cAkBd,K","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport function invariant(condition: any, format: string, ...args: any[]) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n          'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    (error as any).framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]}