/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
import ClayDropDown from './DropDown';
import ClayDropDownMenu from './Menu';
import Drilldown from './drilldown';
import type { Messages } from './drilldown';
export interface IProps extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * Flag to indicate if the menu should be initially open (controlled).
     */
    active?: boolean;
    /**
     * Flag to align the DropDown menu within the viewport.
     */
    alignmentByViewport?: React.ComponentProps<typeof ClayDropDownMenu>['alignmentByViewport'];
    /**
     * Default position of menu element. Values come from `./Menu`.
     */
    alignmentPosition?: React.ComponentProps<typeof ClayDropDownMenu>['alignmentPosition'];
    /**
     * HTML element tag that the container should render.
     */
    containerElement?: React.ComponentProps<typeof ClayDropDown>['containerElement'];
    /**
     * Property to set the initial value of `active` (uncontrolled).
     */
    defaultActive?: boolean;
    /**
     * The unique identifier of the menu that should be active on mount.
     */
    defaultActiveMenu?: string;
    /**
     * The unique identifier of the menu that should be active on mount.
     * @deprecated since v3.51.0 - use `defaultActiveMenu` instead.
     */
    initialActiveMenu?: string;
    /**
     * Prop to pass DOM element attributes to <DropDown.Menu />.
     */
    menuElementAttrs?: React.ComponentProps<typeof ClayDropDown>['menuElementAttrs'];
    menuHeight?: React.ComponentProps<typeof ClayDropDown>['menuHeight'];
    menuWidth?: React.ComponentProps<typeof ClayDropDown>['menuWidth'];
    /**
     * Messages for drilldown.
     */
    messages?: Messages;
    /**
     * Map of menus and items to be used in the drilldown. Each key should be a unique identifier for the menu.
     */
    menus: {
        [id: string]: React.ComponentProps<typeof Drilldown.Menu>['items'];
    };
    /**
     * Function for setting the offset of the menu from the trigger.
     */
    offsetFn?: React.ComponentProps<typeof ClayDropDown>['offsetFn'];
    /**
     * Callback the will be invoked when the active prop is changed (controlled).
     */
    onActiveChange?: InternalDispatch<boolean>;
    /**
     * Path to spritemap
     */
    spritemap?: string;
    /**
     * Flag indicating if the menu should be rendered lazily
     */
    renderMenuOnClick?: React.ComponentProps<typeof ClayDropDown>['renderMenuOnClick'];
    /**
     * Element that is used as the trigger which will activate the dropdown on click.
     */
    trigger: React.ReactElement;
}
export declare const ClayDropDownWithDrilldown: {
    ({ active: externalActive, alignmentByViewport, alignmentPosition, className, containerElement, defaultActive, defaultActiveMenu, initialActiveMenu, menuElementAttrs, menuHeight, menuWidth, menus, messages, offsetFn, onActiveChange, renderMenuOnClick, spritemap, trigger, }: IProps): JSX.Element;
    displayName: string;
};
