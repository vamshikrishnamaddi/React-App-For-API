{"version":3,"sources":["../../src/TaskFactory.ts"],"names":["TaskFactory","freeTasks","onError","create","task","tasks","t","length","pop","RawTask"],"mappings":";;;;;;;;;AACwB,YAAA,aAAc,QAAd,WAAc,CAAd;AAEjB,cAAMA,WAAN,CAAiB;AAKhBG,mBAAOC,IAAPD,EAA+B;AACrC,sBAAME,QAAQ,KAAKJ,SAAnB;AACA,sBAAMK,KAAID,MAAME,MAANF,GACNA,MAAMG,GAANH,EADMA,GAEP,IAAII,WAAO,OAAX,CAAY,KAAKP,OAAjB,EAA2BI,CAAD,IAAQD,MAAMA,MAAME,MAAZF,IAAsBC,CAAxD,CAFH;AAGAA,mBAAEF,IAAFE,GAASF,IAATE;AACA,uBAAOA,EAAP;AACA;AATD,wBAA2BJ,OAA3B,EAAwD;qBAA7BA,O,GAAAA,O;qBAFnBD,S,GAAuB,E;AAE2B;AAHnC;gBAAXD,W,GAAAA,W","sourcesContent":["import type { Task } from './types.js'\nimport { RawTask } from './RawTask.js'\n\nexport class TaskFactory {\n\tprivate freeTasks: RawTask[] = []\n\n\tpublic constructor(private onError: (err: any) => void) {}\n\n\tpublic create(task: () => void): Task {\n\t\tconst tasks = this.freeTasks\n\t\tconst t = tasks.length\n\t\t\t? (tasks.pop() as RawTask)\n\t\t\t: new RawTask(this.onError, (t) => (tasks[tasks.length] = t))\n\t\tt.task = task\n\t\treturn t\n\t}\n}\n"]}