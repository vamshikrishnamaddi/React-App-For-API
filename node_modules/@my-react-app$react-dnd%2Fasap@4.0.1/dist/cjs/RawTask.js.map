{"version":3,"sources":["../../src/RawTask.ts"],"names":["RawTask","task","onError","release","call","error"],"mappings":";;;;;;;;;AAKO,cAAMA,OAAN,CAAa;AAQZI,mBAAO;AACb,oBAAI;AACH,yBAAKH,IAAL,IAAa,KAAKA,IAAL,EAAb;AACA,iBAFD,CAEE,OAAOI,KAAP,EAAc;AACf,yBAAKH,OAAL,CAAaG,KAAb;AACA,iBAJD,SAIU;AACT,yBAAKJ,IAAL,GAAY,IAAZ;AACA,yBAAKE,OAAL,CAAa,IAAb;AACA;AACD;AAdD,wBACSD,OADT,EAESC,OAFT,EAGE;qBAFOD,O,GAAAA,O;qBACAC,O,GAAAA,O;qBAJFF,I,GAAsB,I;AAKzB;AANe;gBAAPD,O,GAAAA,O","sourcesContent":["// We wrap tasks with recyclable task objects.  A task object implements\n\nimport type { TaskFn, Task } from 'types'\n\n// `call`, just like a function.\nexport class RawTask implements Task {\n\tpublic task: TaskFn | null = null\n\n\tpublic constructor(\n\t\tprivate onError: (err: any) => void,\n\t\tprivate release: (t: RawTask) => void,\n\t) {}\n\n\tpublic call() {\n\t\ttry {\n\t\t\tthis.task && this.task()\n\t\t} catch (error) {\n\t\t\tthis.onError(error)\n\t\t} finally {\n\t\t\tthis.task = null\n\t\t\tthis.release(this)\n\t\t}\n\t}\n}\n"]}