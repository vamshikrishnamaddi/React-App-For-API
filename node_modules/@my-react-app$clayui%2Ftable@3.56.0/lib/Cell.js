"use strict";

Liferay.Loader.define("@my-react-app$clayui/table@3.56.0/lib/Cell", ['module', 'exports', 'require', 'my-react-app$classnames', 'my-react-app$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _classnames = _interopRequireDefault(require("my-react-app$classnames"));

    var _react = _interopRequireDefault(require("my-react-app$react"));

    var _excluded = ["align", "cellDelimiter", "children", "className", "columnTextAlignment", "expanded", "headingCell", "headingTitle", "noWrap", "truncate"];

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }return target;
      };return _extends.apply(this, arguments);
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }return obj;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];
        }
      }return target;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
      }return target;
    }

    var ClayTableCell = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
      var _classNames;

      var align = _ref.align,
          cellDelimiter = _ref.cellDelimiter,
          children = _ref.children,
          className = _ref.className,
          columnTextAlignment = _ref.columnTextAlignment,
          expanded = _ref.expanded,
          _ref$headingCell = _ref.headingCell,
          headingCell = _ref$headingCell === void 0 ? false : _ref$headingCell,
          _ref$headingTitle = _ref.headingTitle,
          headingTitle = _ref$headingTitle === void 0 ? false : _ref$headingTitle,
          _ref$noWrap = _ref.noWrap,
          noWrap = _ref$noWrap === void 0 ? false : _ref$noWrap,
          _ref$truncate = _ref.truncate,
          truncate = _ref$truncate === void 0 ? false : _ref$truncate,
          otherProps = _objectWithoutProperties(_ref, _excluded);

      var TagName = headingCell ? 'th' : 'td';
      return (/*#__PURE__*/_react.default.createElement(TagName, _extends({}, otherProps, {
          className: (0, _classnames.default)(className, (_classNames = {
            'table-cell-expand': expanded || truncate
          }, _defineProperty(_classNames, "table-cell-".concat(cellDelimiter), cellDelimiter), _defineProperty(_classNames, "table-column-text-".concat(columnTextAlignment), columnTextAlignment), _defineProperty(_classNames, "text-".concat(align), align), _defineProperty(_classNames, 'table-cell-ws-nowrap', noWrap), _classNames)),
          ref: ref
        }), headingTitle ? _react.default.Children.map(children, function (child, i) {
          return (/*#__PURE__*/_react.default.createElement("p", {
              className: "table-list-title",
              key: i
            }, child)
          );
        }) : truncate && typeof children === 'string' ? /*#__PURE__*/_react.default.createElement("span", {
          className: "text-truncate-inline"
        }, /*#__PURE__*/_react.default.createElement("span", {
          className: "text-truncate"
        }, children)) : children)
      );
    });

    ClayTableCell.displayName = 'ClayTableCell';
    var _default = ClayTableCell;
    exports.default = _default;
  }
});
//# sourceMappingURL=Cell.js.map