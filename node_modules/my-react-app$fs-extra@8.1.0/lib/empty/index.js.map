{"version":3,"sources":["index.js"],"names":["u","require","fromCallback","fs","path","mkdir","remove","emptyDir","dir","callback","readdir","err","items","mkdirs","map","item","join","deleteItem","pop","emptyDirSync","readdirSync","mkdirsSync","forEach","removeSync","module","exports","emptydirSync","emptydir"],"mappings":"AAAA;;;;;;AAEA,UAAMA,IAAIC,QAAQ,2BAAR,EAAwBC,YAAlC;AACA,UAAMC,KAAKF,QAAQ,0BAAR,CAAX;AACA,UAAMG,OAAOH,QAAQ,mBAAR,CAAb;AACA,UAAMI,QAAQJ,QAAQ,WAAR,CAAd;AACA,UAAMK,SAASL,QAAQ,WAAR,CAAf;;AAEA,UAAMM,WAAWP,EAAE,SAASO,QAAT,CAAmBC,GAAnB,EAAwBC,QAAxB,EAAkC;AACnDA,iBAAWA,YAAY,YAAY,CAAE,CAArC;AACAN,SAAGO,OAAH,CAAWF,GAAX,EAAgB,CAACG,GAAD,EAAMC,KAAN,KAAgB;AAC9B,YAAID,GAAJ,EAAS,OAAON,MAAMQ,MAAN,CAAaL,GAAb,EAAkBC,QAAlB,CAAP;;AAETG,gBAAQA,MAAME,GAAN,CAAUC,QAAQX,KAAKY,IAAL,CAAUR,GAAV,EAAeO,IAAf,CAAlB,CAAR;;AAEAE;;AAEA,iBAASA,UAAT,GAAuB;AACrB,gBAAMF,OAAOH,MAAMM,GAAN,EAAb;AACA,cAAI,CAACH,IAAL,EAAW,OAAON,UAAP;AACXH,iBAAOA,MAAP,CAAcS,IAAd,EAAoBJ,OAAO;AACzB,gBAAIA,GAAJ,EAAS,OAAOF,SAASE,GAAT,CAAP;AACTM;AACD,WAHD;AAID;AACF,OAfD;AAgBD,KAlBgB,CAAjB;;AAoBA,aAASE,YAAT,CAAuBX,GAAvB,EAA4B;AAC1B,UAAII,KAAJ;AACA,UAAI;AACFA,gBAAQT,GAAGiB,WAAH,CAAeZ,GAAf,CAAR;AACD,OAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,eAAON,MAAMgB,UAAN,CAAiBb,GAAjB,CAAP;AACD;;AAEDI,YAAMU,OAAN,CAAcP,QAAQ;AACpBA,eAAOX,KAAKY,IAAL,CAAUR,GAAV,EAAeO,IAAf,CAAP;AACAT,eAAOiB,UAAP,CAAkBR,IAAlB;AACD,OAHD;AAID;;AAEDS,WAAOC,OAAP,GAAiB;AACfN,kBADe;AAEfO,oBAAcP,YAFC;AAGfZ,cAHe;AAIfoB,gBAAUpB;AAJK,KAAjB","file":"index.js","sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst remove = require('../remove')\n\nconst emptyDir = u(function emptyDir (dir, callback) {\n  callback = callback || function () {}\n  fs.readdir(dir, (err, items) => {\n    if (err) return mkdir.mkdirs(dir, callback)\n\n    items = items.map(item => path.join(dir, item))\n\n    deleteItem()\n\n    function deleteItem () {\n      const item = items.pop()\n      if (!item) return callback()\n      remove.remove(item, err => {\n        if (err) return callback(err)\n        deleteItem()\n      })\n    }\n  })\n})\n\nfunction emptyDirSync (dir) {\n  let items\n  try {\n    items = fs.readdirSync(dir)\n  } catch (err) {\n    return mkdir.mkdirsSync(dir)\n  }\n\n  items.forEach(item => {\n    item = path.join(dir, item)\n    remove.removeSync(item)\n  })\n}\n\nmodule.exports = {\n  emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir,\n  emptydir: emptyDir\n}\n"]}