'use strict';

Liferay.Loader.define('my-react-app$fs-extra@8.1.0/lib/move-sync/move-sync', ['module', 'exports', 'require', 'my-react-app$graceful-fs', 'my-react-app$path', '../copy-sync', '../remove', '../mkdirs', '../util/stat'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    const fs = require('my-react-app$graceful-fs');
    const path = require('my-react-app$path');
    const copySync = require('../copy-sync').copySync;
    const removeSync = require('../remove').removeSync;
    const mkdirpSync = require('../mkdirs').mkdirpSync;
    const stat = require('../util/stat');

    function moveSync(src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;

      const { srcStat } = stat.checkPathsSync(src, dest, 'move');
      stat.checkParentPathsSync(src, srcStat, dest, 'move');
      mkdirpSync(path.dirname(dest));
      return doRename(src, dest, overwrite);
    }

    function doRename(src, dest, overwrite) {
      if (overwrite) {
        removeSync(dest);
        return rename(src, dest, overwrite);
      }
      if (fs.existsSync(dest)) throw new Error('dest already exists.');
      return rename(src, dest, overwrite);
    }

    function rename(src, dest, overwrite) {
      try {
        fs.renameSync(src, dest);
      } catch (err) {
        if (err.code !== 'EXDEV') throw err;
        return moveAcrossDevice(src, dest, overwrite);
      }
    }

    function moveAcrossDevice(src, dest, overwrite) {
      copySync(src, dest, {
        overwrite,
        errorOnExist: true
      });
      return removeSync(src);
    }

    module.exports = moveSync;
  }
});
//# sourceMappingURL=move-sync.js.map