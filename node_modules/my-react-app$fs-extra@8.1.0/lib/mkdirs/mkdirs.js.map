{"version":3,"sources":["mkdirs.js"],"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirs","p","opts","callback","made","mode","process","platform","errInval","Error","code","xfs","undefined","umask","resolve","mkdir","er","dirname","stat","er2","isDirectory","module","exports"],"mappings":"AAAA;;;;;;AAEA,UAAMA,KAAKC,QAAQ,0BAAR,CAAX;AACA,UAAMC,OAAOD,QAAQ,mBAAR,CAAb;AACA,UAAME,mBAAmBF,QAAQ,SAAR,EAAmBE,gBAA5C;;AAEA,UAAMC,OAAOC,SAAS,MAAT,EAAiB,CAAjB,CAAb;;AAEA,aAASC,MAAT,CAAiBC,CAAjB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AACxC,UAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,mBAAWD,IAAX;AACAA,eAAO,EAAP;AACD,OAHD,MAGO,IAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AAC5CA,eAAO,EAAEG,MAAMH,IAAR,EAAP;AACD;;AAED,UAAII,QAAQC,QAAR,KAAqB,OAArB,IAAgCV,iBAAiBI,CAAjB,CAApC,EAAyD;AACvD,cAAMO,WAAW,IAAIC,KAAJ,CAAUR,IAAI,0CAAd,CAAjB;AACAO,iBAASE,IAAT,GAAgB,QAAhB;AACA,eAAOP,SAASK,QAAT,CAAP;AACD;;AAED,UAAIH,OAAOH,KAAKG,IAAhB;AACA,YAAMM,MAAMT,KAAKR,EAAL,IAAWA,EAAvB;;AAEA,UAAIW,SAASO,SAAb,EAAwB;AACtBP,eAAOP,OAAQ,CAACQ,QAAQO,KAAR,EAAhB;AACD;AACD,UAAI,CAACT,IAAL,EAAWA,OAAO,IAAP;;AAEXD,iBAAWA,YAAY,YAAY,CAAE,CAArC;AACAF,UAAIL,KAAKkB,OAAL,CAAab,CAAb,CAAJ;;AAEAU,UAAII,KAAJ,CAAUd,CAAV,EAAaI,IAAb,EAAmBW,MAAM;AACvB,YAAI,CAACA,EAAL,EAAS;AACPZ,iBAAOA,QAAQH,CAAf;AACA,iBAAOE,SAAS,IAAT,EAAeC,IAAf,CAAP;AACD;AACD,gBAAQY,GAAGN,IAAX;AACE,eAAK,QAAL;AACE,gBAAId,KAAKqB,OAAL,CAAahB,CAAb,MAAoBA,CAAxB,EAA2B,OAAOE,SAASa,EAAT,CAAP;AAC3BhB,mBAAOJ,KAAKqB,OAAL,CAAahB,CAAb,CAAP,EAAwBC,IAAxB,EAA8B,CAACc,EAAD,EAAKZ,IAAL,KAAc;AAC1C,kBAAIY,EAAJ,EAAQb,SAASa,EAAT,EAAaZ,IAAb,EAAR,KACKJ,OAAOC,CAAP,EAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,IAA1B;AACN,aAHD;AAIA;;AAEF;AACA;AACA;AACA;AACEO,gBAAIO,IAAJ,CAASjB,CAAT,EAAY,CAACkB,GAAD,EAAMD,IAAN,KAAe;AACzB;AACA;AACA,kBAAIC,OAAO,CAACD,KAAKE,WAAL,EAAZ,EAAgCjB,SAASa,EAAT,EAAaZ,IAAb,EAAhC,KACKD,SAAS,IAAT,EAAeC,IAAf;AACN,aALD;AAMA;AAnBJ;AAqBD,OA1BD;AA2BD;;AAEDiB,WAAOC,OAAP,GAAiBtB,MAAjB","file":"mkdirs.js","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst invalidWin32Path = require('./win32').invalidWin32Path\n\nconst o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    return callback(errInval)\n  }\n\n  let mode = opts.mode\n  const xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || function () {}\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, er => {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, (er, made) => {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, (er2, stat) => {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n"]}