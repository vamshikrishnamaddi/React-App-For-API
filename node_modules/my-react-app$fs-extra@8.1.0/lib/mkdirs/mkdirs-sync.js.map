{"version":3,"sources":["mkdirs-sync.js"],"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirsSync","p","opts","made","mode","xfs","process","platform","errInval","Error","code","undefined","umask","resolve","mkdirSync","err0","dirname","stat","statSync","err1","isDirectory","module","exports"],"mappings":"AAAA;;;;;;AAEA,UAAMA,KAAKC,QAAQ,0BAAR,CAAX;AACA,UAAMC,OAAOD,QAAQ,mBAAR,CAAb;AACA,UAAME,mBAAmBF,QAAQ,SAAR,EAAmBE,gBAA5C;;AAEA,UAAMC,OAAOC,SAAS,MAAT,EAAiB,CAAjB,CAAb;;AAEA,aAASC,UAAT,CAAqBC,CAArB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAClC,UAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrCA,eAAO,EAAEE,MAAMF,IAAR,EAAP;AACD;;AAED,UAAIE,OAAOF,KAAKE,IAAhB;AACA,YAAMC,MAAMH,KAAKR,EAAL,IAAWA,EAAvB;;AAEA,UAAIY,QAAQC,QAAR,KAAqB,OAArB,IAAgCV,iBAAiBI,CAAjB,CAApC,EAAyD;AACvD,cAAMO,WAAW,IAAIC,KAAJ,CAAUR,IAAI,0CAAd,CAAjB;AACAO,iBAASE,IAAT,GAAgB,QAAhB;AACA,cAAMF,QAAN;AACD;;AAED,UAAIJ,SAASO,SAAb,EAAwB;AACtBP,eAAON,OAAQ,CAACQ,QAAQM,KAAR,EAAhB;AACD;AACD,UAAI,CAACT,IAAL,EAAWA,OAAO,IAAP;;AAEXF,UAAIL,KAAKiB,OAAL,CAAaZ,CAAb,CAAJ;;AAEA,UAAI;AACFI,YAAIS,SAAJ,CAAcb,CAAd,EAAiBG,IAAjB;AACAD,eAAOA,QAAQF,CAAf;AACD,OAHD,CAGE,OAAOc,IAAP,EAAa;AACb,YAAIA,KAAKL,IAAL,KAAc,QAAlB,EAA4B;AAC1B,cAAId,KAAKoB,OAAL,CAAaf,CAAb,MAAoBA,CAAxB,EAA2B,MAAMc,IAAN;AAC3BZ,iBAAOH,WAAWJ,KAAKoB,OAAL,CAAaf,CAAb,CAAX,EAA4BC,IAA5B,EAAkCC,IAAlC,CAAP;AACAH,qBAAWC,CAAX,EAAcC,IAAd,EAAoBC,IAApB;AACD,SAJD,MAIO;AACL;AACA;AACA,cAAIc,IAAJ;AACA,cAAI;AACFA,mBAAOZ,IAAIa,QAAJ,CAAajB,CAAb,CAAP;AACD,WAFD,CAEE,OAAOkB,IAAP,EAAa;AACb,kBAAMJ,IAAN;AACD;AACD,cAAI,CAACE,KAAKG,WAAL,EAAL,EAAyB,MAAML,IAAN;AAC1B;AACF;;AAED,aAAOZ,IAAP;AACD;;AAEDkB,WAAOC,OAAP,GAAiBtB,UAAjB","file":"mkdirs-sync.js","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst invalidWin32Path = require('./win32').invalidWin32Path\n\nconst o777 = parseInt('0777', 8)\n\nfunction mkdirsSync (p, opts, made) {\n  if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  let mode = opts.mode\n  const xfs = opts.fs || fs\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    throw errInval\n  }\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  p = path.resolve(p)\n\n  try {\n    xfs.mkdirSync(p, mode)\n    made = made || p\n  } catch (err0) {\n    if (err0.code === 'ENOENT') {\n      if (path.dirname(p) === p) throw err0\n      made = mkdirsSync(path.dirname(p), opts, made)\n      mkdirsSync(p, opts, made)\n    } else {\n      // In the case of any other error, just see if there's a dir there\n      // already. If so, then hooray!  If not, then something is borked.\n      let stat\n      try {\n        stat = xfs.statSync(p)\n      } catch (err1) {\n        throw err0\n      }\n      if (!stat.isDirectory()) throw err0\n    }\n  }\n\n  return made\n}\n\nmodule.exports = mkdirsSync\n"]}