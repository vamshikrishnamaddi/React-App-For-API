{"version":3,"sources":["mapLimit.js"],"names":["Object","defineProperty","exports","value","_map2","require","_map3","_interopRequireDefault","_eachOfLimit","_eachOfLimit2","_awaitify","_awaitify2","obj","__esModule","default","mapLimit","coll","limit","iteratee","callback","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;;AAIA,QAAIC,QAAQC,QAAQ,gBAAR,CAAZ;;AAEA,QAAIC,QAAQC,uBAAuBH,KAAvB,CAAZ;;AAEA,QAAII,eAAeH,QAAQ,wBAAR,CAAnB;;AAEA,QAAII,gBAAgBF,uBAAuBC,YAAvB,CAApB;;AAEA,QAAIE,YAAYL,QAAQ,qBAAR,CAAhB;;AAEA,QAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,aAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,aAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;AAoBA,aAASG,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmD;AACjD,aAAO,CAAC,GAAGb,MAAMQ,OAAV,EAAmB,CAAC,GAAGL,cAAcK,OAAlB,EAA2BG,KAA3B,CAAnB,EAAsDD,IAAtD,EAA4DE,QAA5D,EAAsEC,QAAtE,CAAP;AACD;AACDjB,YAAQY,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwBC,QAAxB,EAAkC,CAAlC,CAAlB;AACAK,WAAOlB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"mapLimit.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _map2 = require('./internal/map.js');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _eachOfLimit = require('./internal/eachOfLimit.js');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit(coll, limit, iteratee, callback) {\n  return (0, _map3.default)((0, _eachOfLimit2.default)(limit), coll, iteratee, callback);\n}\nexports.default = (0, _awaitify2.default)(mapLimit, 4);\nmodule.exports = exports['default'];"]}