{"version":3,"sources":["asyncify.js"],"names":["Object","defineProperty","exports","value","default","asyncify","_initialParams","require","_initialParams2","_interopRequireDefault","_setImmediate","_setImmediate2","_wrapAsync","obj","__esModule","func","isAsync","args","callback","pop","promise","apply","handlePromise","result","e","then","invokeCallback","err","message","Error","error","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,QAAlB;;AAEA,YAAIC,iBAAiBC,QAAQ,0BAAR,CAArB;;AAEA,YAAIC,kBAAkBC,uBAAuBH,cAAvB,CAAtB;;AAEA,YAAII,gBAAgBH,QAAQ,yBAAR,CAApB;;AAEA,YAAII,iBAAiBF,uBAAuBC,aAAvB,CAArB;;AAEA,YAAIE,aAAaL,QAAQ,sBAAR,CAAjB;;AAEA,iBAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAET,SAASS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,iBAASR,QAAT,CAAkBU,IAAlB,EAAwB;AACpB,gBAAI,CAAC,GAAGH,WAAWI,OAAf,EAAwBD,IAAxB,CAAJ,EAAmC;AAC/B,uBAAO,UAAU,GAAGE,IAAb,CAAkB,cAAlB,EAAkC;AACrC,0BAAMC,WAAWD,KAAKE,GAAL,EAAjB;AACA,0BAAMC,UAAUL,KAAKM,KAAL,CAAW,IAAX,EAAiBJ,IAAjB,CAAhB;AACA,2BAAOK,cAAcF,OAAd,EAAuBF,QAAvB,CAAP;AACH,iBAJD;AAKH;;AAED,mBAAO,CAAC,GAAGV,gBAAgBJ,OAApB,EAA6B,UAAUa,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,oBAAIK,MAAJ;AACA,oBAAI;AACAA,6BAASR,KAAKM,KAAL,CAAW,IAAX,EAAiBJ,IAAjB,CAAT;AACH,iBAFD,CAEE,OAAOO,CAAP,EAAU;AACR,2BAAON,SAASM,CAAT,CAAP;AACH;AACD;AACA,oBAAID,UAAU,OAAOA,OAAOE,IAAd,KAAuB,UAArC,EAAiD;AAC7C,2BAAOH,cAAcC,MAAd,EAAsBL,QAAtB,CAAP;AACH,iBAFD,MAEO;AACHA,6BAAS,IAAT,EAAeK,MAAf;AACH;AACJ,aAbM,CAAP;AAcH;;AAED,iBAASD,aAAT,CAAuBF,OAAvB,EAAgCF,QAAhC,EAA0C;AACtC,mBAAOE,QAAQK,IAAR,CAAatB,SAAS;AACzBuB,+BAAeR,QAAf,EAAyB,IAAzB,EAA+Bf,KAA/B;AACH,aAFM,EAEJwB,OAAO;AACND,+BAAeR,QAAf,EAAyBS,OAAOA,IAAIC,OAAX,GAAqBD,GAArB,GAA2B,IAAIE,KAAJ,CAAUF,GAAV,CAApD;AACH,aAJM,CAAP;AAKH;;AAED,iBAASD,cAAT,CAAwBR,QAAxB,EAAkCY,KAAlC,EAAyC3B,KAAzC,EAAgD;AAC5C,gBAAI;AACAe,yBAASY,KAAT,EAAgB3B,KAAhB;AACH,aAFD,CAEE,OAAOwB,GAAP,EAAY;AACV,iBAAC,GAAGhB,eAAeP,OAAnB,EAA4BoB,KAAK;AAC7B,0BAAMA,CAAN;AACH,iBAFD,EAEGG,GAFH;AAGH;AACJ;AACDI,eAAO7B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"asyncify.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = asyncify;\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _setImmediate = require('./internal/setImmediate.js');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if ((0, _wrapAsync.isAsync)(func)) {\n        return function (...args /*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback);\n        };\n    }\n\n    return (0, _initialParams2.default)(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        (0, _setImmediate2.default)(e => {\n            throw e;\n        }, err);\n    }\n}\nmodule.exports = exports['default'];"]}