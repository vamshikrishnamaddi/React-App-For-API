{"version":3,"sources":["transform.js"],"names":["Object","defineProperty","exports","value","default","transform","_eachOf","require","_eachOf2","_interopRequireDefault","_once","_once2","_wrapAsync","_wrapAsync2","_promiseCallback","obj","__esModule","coll","accumulator","iteratee","callback","arguments","length","Array","isArray","promiseCallback","_iteratee","v","k","cb","err","PROMISE_SYMBOL","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,SAAlB;;AAEA,YAAIC,UAAUC,QAAQ,UAAR,CAAd;;AAEA,YAAIC,WAAWC,uBAAuBH,OAAvB,CAAf;;AAEA,YAAII,QAAQH,QAAQ,iBAAR,CAAZ;;AAEA,YAAII,SAASF,uBAAuBC,KAAvB,CAAb;;AAEA,YAAIE,aAAaL,QAAQ,sBAAR,CAAjB;;AAEA,YAAIM,cAAcJ,uBAAuBG,UAAvB,CAAlB;;AAEA,YAAIE,mBAAmBP,QAAQ,4BAAR,CAAvB;;AAEA,iBAASE,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEX,SAASW,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA,iBAASV,SAAT,CAAmBY,IAAnB,EAAyBC,WAAzB,EAAsCC,QAAtC,EAAgDC,QAAhD,EAA0D;AACtD,gBAAIC,UAAUC,MAAV,IAAoB,CAApB,IAAyB,OAAOJ,WAAP,KAAuB,UAApD,EAAgE;AAC5DE,2BAAWD,QAAX;AACAA,2BAAWD,WAAX;AACAA,8BAAcK,MAAMC,OAAN,CAAcP,IAAd,IAAsB,EAAtB,GAA2B,EAAzC;AACH;AACDG,uBAAW,CAAC,GAAGT,OAAOP,OAAX,EAAoBgB,YAAY,CAAC,GAAGN,iBAAiBW,eAArB,GAAhC,CAAX;AACA,gBAAIC,YAAY,CAAC,GAAGb,YAAYT,OAAhB,EAAyBe,QAAzB,CAAhB;;AAEA,aAAC,GAAGX,SAASJ,OAAb,EAAsBa,IAAtB,EAA4B,CAACU,CAAD,EAAIC,CAAJ,EAAOC,EAAP,KAAc;AACtCH,0BAAUR,WAAV,EAAuBS,CAAvB,EAA0BC,CAA1B,EAA6BC,EAA7B;AACH,aAFD,EAEGC,OAAOV,SAASU,GAAT,EAAcZ,WAAd,CAFV;AAGA,mBAAOE,SAASN,iBAAiBiB,cAA1B,CAAP;AACH;AACDC,eAAO9B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"transform.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = transform;\n\nvar _eachOf = require('./eachOf.js');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _promiseCallback = require('./internal/promiseCallback.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = (0, _once2.default)(callback || (0, _promiseCallback.promiseCallback)());\n    var _iteratee = (0, _wrapAsync2.default)(iteratee);\n\n    (0, _eachOf2.default)(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[_promiseCallback.PROMISE_SYMBOL];\n}\nmodule.exports = exports['default'];"]}