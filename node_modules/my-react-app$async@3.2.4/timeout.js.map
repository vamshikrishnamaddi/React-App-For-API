{"version":3,"sources":["timeout.js"],"names":["Object","defineProperty","exports","value","default","timeout","_initialParams","require","_initialParams2","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","asyncFn","milliseconds","info","fn","args","callback","timedOut","timer","push","cbArgs","clearTimeout","setTimeout","timeoutCallback","name","error","Error","code","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,OAAlB;;AAEA,YAAIC,iBAAiBC,QAAQ,0BAAR,CAArB;;AAEA,YAAIC,kBAAkBC,uBAAuBH,cAAvB,CAAtB;;AAEA,YAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,YAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,iBAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,iBAASP,OAAT,CAAiBS,OAAjB,EAA0BC,YAA1B,EAAwCC,IAAxC,EAA8C;AAC1C,gBAAIC,KAAK,CAAC,GAAGN,YAAYP,OAAhB,EAAyBU,OAAzB,CAAT;;AAEA,mBAAO,CAAC,GAAGN,gBAAgBJ,OAApB,EAA6B,CAACc,IAAD,EAAOC,QAAP,KAAoB;AACpD,oBAAIC,WAAW,KAAf;AACA,oBAAIC,KAAJ;;AAaAH,qBAAKI,IAAL,CAAU,CAAC,GAAGC,MAAJ,KAAe;AACrB,wBAAI,CAACH,QAAL,EAAe;AACXD,iCAAS,GAAGI,MAAZ;AACAC,qCAAaH,KAAb;AACH;AACJ,iBALD;;AAOA;AACAA,wBAAQI,WAnBR,SAASC,eAAT,GAA2B;AACvB,wBAAIC,OAAOb,QAAQa,IAAR,IAAgB,WAA3B;AACA,wBAAIC,QAAQ,IAAIC,KAAJ,CAAU,wBAAwBF,IAAxB,GAA+B,cAAzC,CAAZ;AACAC,0BAAME,IAAN,GAAa,WAAb;AACA,wBAAId,IAAJ,EAAU;AACNY,8BAAMZ,IAAN,GAAaA,IAAb;AACH;AACDI,+BAAW,IAAX;AACAD,6BAASS,KAAT;AACH,iBAUO,EAA4Bb,YAA5B,CAAR;AACAE,mBAAG,GAAGC,IAAN;AACH,aAzBM,CAAP;AA0BH;AACDa,eAAO7B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"timeout.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = timeout;\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = (0, _wrapAsync2.default)(asyncFn);\n\n    return (0, _initialParams2.default)((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\nmodule.exports = exports['default'];"]}