{"version":3,"sources":["race.js"],"names":["Object","defineProperty","exports","value","_once","require","_once2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","race","tasks","callback","Array","isArray","TypeError","length","i","l","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;;AAIA,YAAIC,QAAQC,QAAQ,iBAAR,CAAZ;;AAEA,YAAIC,SAASC,uBAAuBH,KAAvB,CAAb;;AAEA,YAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,YAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,YAAIE,YAAYL,QAAQ,qBAAR,CAAhB;;AAEA,YAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,iBAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,iBAASG,IAAT,CAAcC,KAAd,EAAqBC,QAArB,EAA+B;AAC3BA,uBAAW,CAAC,GAAGX,OAAOQ,OAAX,EAAoBG,QAApB,CAAX;AACA,gBAAI,CAACC,MAAMC,OAAN,CAAcH,KAAd,CAAL,EAA2B,OAAOC,SAAS,IAAIG,SAAJ,CAAc,sDAAd,CAAT,CAAP;AAC3B,gBAAI,CAACJ,MAAMK,MAAX,EAAmB,OAAOJ,UAAP;AACnB,iBAAK,IAAIK,IAAI,CAAR,EAAWC,IAAIP,MAAMK,MAA1B,EAAkCC,IAAIC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC1C,iBAAC,GAAGb,YAAYK,OAAhB,EAAyBE,MAAMM,CAAN,CAAzB,EAAmCL,QAAnC;AACH;AACJ;;AAEDf,gBAAQY,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwBC,IAAxB,EAA8B,CAA9B,CAAlB;AACAS,eAAOtB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"race.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = (0, _once2.default)(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        (0, _wrapAsync2.default)(tasks[i])(callback);\n    }\n}\n\nexports.default = (0, _awaitify2.default)(race, 2);\nmodule.exports = exports['default'];"]}