{"version":3,"sources":["parallel.js"],"names":["Object","defineProperty","exports","value","_isArrayLike","require","_isArrayLike2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","eachfn","tasks","callback","results","task","key","taskCb","err","result","length","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;;AAIA,YAAIC,eAAeC,QAAQ,eAAR,CAAnB;;AAEA,YAAIC,gBAAgBC,uBAAuBH,YAAvB,CAApB;;AAEA,YAAII,aAAaH,QAAQ,aAAR,CAAjB;;AAEA,YAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,YAAIE,YAAYL,QAAQ,YAAR,CAAhB;;AAEA,YAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,iBAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/FV,gBAAQY,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwB,CAACC,MAAD,EAASC,KAAT,EAAgBC,QAAhB,KAA6B;AACnE,gBAAIC,UAAU,CAAC,GAAGZ,cAAcQ,OAAlB,EAA2BE,KAA3B,IAAoC,EAApC,GAAyC,EAAvD;;AAEAD,mBAAOC,KAAP,EAAc,CAACG,IAAD,EAAOC,GAAP,EAAYC,MAAZ,KAAuB;AACjC,iBAAC,GAAGZ,YAAYK,OAAhB,EAAyBK,IAAzB,EAA+B,CAACG,GAAD,EAAM,GAAGC,MAAT,KAAoB;AAC/C,wBAAIA,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AACnB,yBAACD,MAAD,IAAWA,MAAX;AACH;AACDL,4BAAQE,GAAR,IAAeG,MAAf;AACAF,2BAAOC,GAAP;AACH,iBAND;AAOH,aARD,EAQGA,OAAOL,SAASK,GAAT,EAAcJ,OAAd,CARV;AASH,SAZiB,EAYf,CAZe,CAAlB;AAaAO,eAAOvB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"parallel.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isArrayLike = require('./isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _wrapAsync = require('./wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {\n    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        (0, _wrapAsync2.default)(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\nmodule.exports = exports['default'];"]}