{"version":3,"sources":["DoublyLinkedList.js"],"names":["Object","defineProperty","exports","value","DLL","constructor","head","tail","length","removeLink","node","prev","next","empty","shift","insertAfter","newNode","insertBefore","unshift","setInitial","push","pop","toArray","Symbol","iterator","cur","data","remove","testFn","curr","default","dll","module"],"mappings":"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","file":"DoublyLinkedList.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty() {\n        while (this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator]() {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove(testFn) {\n        var curr = this.head;\n        while (curr) {\n            var { next } = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nexports.default = DLL;\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\nmodule.exports = exports[\"default\"];"]}