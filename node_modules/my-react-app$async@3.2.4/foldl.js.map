{"version":3,"sources":["foldl.js"],"names":["Object","defineProperty","exports","value","_eachOfSeries","require","_eachOfSeries2","_interopRequireDefault","_once","_once2","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","reduce","coll","memo","iteratee","callback","_iteratee","x","i","iterCb","err","v","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;;AAIA,YAAIC,gBAAgBC,QAAQ,gBAAR,CAApB;;AAEA,YAAIC,iBAAiBC,uBAAuBH,aAAvB,CAArB;;AAEA,YAAII,QAAQH,QAAQ,iBAAR,CAAZ;;AAEA,YAAII,SAASF,uBAAuBC,KAAvB,CAAb;;AAEA,YAAIE,aAAaL,QAAQ,sBAAR,CAAjB;;AAEA,YAAIM,cAAcJ,uBAAuBG,UAAvB,CAAlB;;AAEA,YAAIE,YAAYP,QAAQ,qBAAR,CAAhB;;AAEA,YAAIQ,aAAaN,uBAAuBK,SAAvB,CAAjB;;AAEA,iBAASL,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA,iBAASG,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAC5CA,uBAAW,CAAC,GAAGZ,OAAOO,OAAX,EAAoBK,QAApB,CAAX;AACA,gBAAIC,YAAY,CAAC,GAAGX,YAAYK,OAAhB,EAAyBI,QAAzB,CAAhB;AACA,mBAAO,CAAC,GAAGd,eAAeU,OAAnB,EAA4BE,IAA5B,EAAkC,CAACK,CAAD,EAAIC,CAAJ,EAAOC,MAAP,KAAkB;AACvDH,0BAAUH,IAAV,EAAgBI,CAAhB,EAAmB,CAACG,GAAD,EAAMC,CAAN,KAAY;AAC3BR,2BAAOQ,CAAP;AACAF,2BAAOC,GAAP;AACH,iBAHD;AAIH,aALM,EAKJA,OAAOL,SAASK,GAAT,EAAcP,IAAd,CALH,CAAP;AAMH;AACDjB,gBAAQc,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwBC,MAAxB,EAAgC,CAAhC,CAAlB;AACAW,eAAO1B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"foldl.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachOfSeries = require('./eachOfSeries.js');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = (0, _once2.default)(callback);\n    var _iteratee = (0, _wrapAsync2.default)(iteratee);\n    return (0, _eachOfSeries2.default)(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nexports.default = (0, _awaitify2.default)(reduce, 4);\nmodule.exports = exports['default'];"]}