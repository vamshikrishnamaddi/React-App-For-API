{"version":3,"sources":["until.js"],"names":["Object","defineProperty","exports","value","default","until","_whilst","require","_whilst2","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","test","iteratee","callback","_test","cb","err","truth","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,OAAR,GAAkBC,KAAlB;;AAEA,QAAIC,UAAUC,QAAQ,UAAR,CAAd;;AAEA,QAAIC,WAAWC,uBAAuBH,OAAvB,CAAf;;AAEA,QAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,QAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,aAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,aAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,aAASP,KAAT,CAAeS,IAAf,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyC;AACvC,YAAMC,QAAQ,CAAC,GAAGN,YAAYP,OAAhB,EAAyBU,IAAzB,CAAd;AACA,aAAO,CAAC,GAAGN,SAASJ,OAAb,EAAsBc,MAAMD,MAAM,CAACE,GAAD,EAAMC,KAAN,KAAgBF,GAAGC,GAAH,EAAQ,CAACC,KAAT,CAAtB,CAA5B,EAAoEL,QAApE,EAA8EC,QAA9E,CAAP;AACD;AACDK,WAAOnB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"until.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = until;\n\nvar _whilst = require('./whilst.js');\n\nvar _whilst2 = _interopRequireDefault(_whilst);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n  const _test = (0, _wrapAsync2.default)(test);\n  return (0, _whilst2.default)(cb => _test((err, truth) => cb(err, !truth)), iteratee, callback);\n}\nmodule.exports = exports['default'];"]}