{"version":3,"sources":["priorityQueue.js"],"names":["Object","defineProperty","exports","value","default","worker","concurrency","q","_queue2","push","pushAsync","_tasks","_Heap2","_createTaskItem","data","priority","callback","createDataItems","tasks","Array","isArray","map","unshift","unshiftAsync","_queue","require","_interopRequireDefault","_Heap","obj","__esModule","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;;AAIAD,gBAAQE,OAAR,GAAkB,UAAUC,MAAV,EAAkBC,WAAlB,EAA+B;AAC7C;AACA,gBAAIC,IAAI,CAAC,GAAGC,QAAQJ,OAAZ,EAAqBC,MAArB,EAA6BC,WAA7B,CAAR;;AAEA,gBAAI;AACAG,oBADA;AAEAC;AAFA,gBAGAH,CAHJ;;AAKAA,cAAEI,MAAF,GAAW,IAAIC,OAAOR,OAAX,EAAX;AACAG,cAAEM,eAAF,GAAoB,CAAC,EAAEC,IAAF,EAAQC,QAAR,EAAD,EAAqBC,QAArB,KAAkC;AAClD,uBAAO;AACHF,wBADG;AAEHC,4BAFG;AAGHC;AAHG,iBAAP;AAKH,aAND;;AAQA,qBAASC,eAAT,CAAyBC,KAAzB,EAAgCH,QAAhC,EAA0C;AACtC,oBAAI,CAACI,MAAMC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACvB,2BAAO,EAAEJ,MAAMI,KAAR,EAAeH,QAAf,EAAP;AACH;AACD,uBAAOG,MAAMG,GAAN,CAAUP,QAAQ;AACrB,2BAAO,EAAEA,IAAF,EAAQC,QAAR,EAAP;AACH,iBAFM,CAAP;AAGH;;AAED;AACAR,cAAEE,IAAF,GAAS,UAAUK,IAAV,EAAgBC,WAAW,CAA3B,EAA8BC,QAA9B,EAAwC;AAC7C,uBAAOP,KAAKQ,gBAAgBH,IAAhB,EAAsBC,QAAtB,CAAL,EAAsCC,QAAtC,CAAP;AACH,aAFD;;AAIAT,cAAEG,SAAF,GAAc,UAAUI,IAAV,EAAgBC,WAAW,CAA3B,EAA8BC,QAA9B,EAAwC;AAClD,uBAAON,UAAUO,gBAAgBH,IAAhB,EAAsBC,QAAtB,CAAV,EAA2CC,QAA3C,CAAP;AACH,aAFD;;AAIA;AACA,mBAAOT,EAAEe,OAAT;AACA,mBAAOf,EAAEgB,YAAT;;AAEA,mBAAOhB,CAAP;AACH,SAzCD;;AA2CA,YAAIiB,SAASC,QAAQ,SAAR,CAAb;;AAEA,YAAIjB,UAAUkB,uBAAuBF,MAAvB,CAAd;;AAEA,YAAIG,QAAQF,QAAQ,iBAAR,CAAZ;;AAEA,YAAIb,SAASc,uBAAuBC,KAAvB,CAAb;;AAEA,iBAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAExB,SAASwB,GAAX,EAArC;AAAwD;;AAE/FE,eAAO5B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB;;AAEA","file":"priorityQueue.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = (0, _queue2.default)(worker, concurrency);\n\n    var {\n        push,\n        pushAsync\n    } = q;\n\n    q._tasks = new _Heap2.default();\n    q._createTaskItem = ({ data, priority }, callback) => {\n        return {\n            data,\n            priority,\n            callback\n        };\n    };\n\n    function createDataItems(tasks, priority) {\n        if (!Array.isArray(tasks)) {\n            return { data: tasks, priority };\n        }\n        return tasks.map(data => {\n            return { data, priority };\n        });\n    }\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority = 0, callback) {\n        return push(createDataItems(data, priority), callback);\n    };\n\n    q.pushAsync = function (data, priority = 0, callback) {\n        return pushAsync(createDataItems(data, priority), callback);\n    };\n\n    // Remove unshift functions\n    delete q.unshift;\n    delete q.unshiftAsync;\n\n    return q;\n};\n\nvar _queue = require('./queue.js');\n\nvar _queue2 = _interopRequireDefault(_queue);\n\nvar _Heap = require('./internal/Heap.js');\n\nvar _Heap2 = _interopRequireDefault(_Heap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n *   except this returns a promise that rejects if an error occurs.\n * * The `unshift` and `unshiftAsync` methods were removed.\n */"]}