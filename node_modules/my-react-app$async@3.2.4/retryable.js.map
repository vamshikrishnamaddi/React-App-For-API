{"version":3,"sources":["retryable.js"],"names":["Object","defineProperty","exports","value","default","retryable","_retry","require","_retry2","_interopRequireDefault","_initialParams","_initialParams2","_wrapAsync","_wrapAsync2","_promiseCallback","obj","__esModule","opts","task","arity","length","isAsync","_task","args","callback","push","promiseCallback","taskFn","cb","PROMISE_SYMBOL","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,SAAlB;;AAEA,YAAIC,SAASC,QAAQ,SAAR,CAAb;;AAEA,YAAIC,UAAUC,uBAAuBH,MAAvB,CAAd;;AAEA,YAAII,iBAAiBH,QAAQ,0BAAR,CAArB;;AAEA,YAAII,kBAAkBF,uBAAuBC,cAAvB,CAAtB;;AAEA,YAAIE,aAAaL,QAAQ,sBAAR,CAAjB;;AAEA,YAAIM,cAAcJ,uBAAuBG,UAAvB,CAAlB;;AAEA,YAAIE,mBAAmBP,QAAQ,4BAAR,CAAvB;;AAEA,iBAASE,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEX,SAASW,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,iBAASV,SAAT,CAAmBY,IAAnB,EAAyBC,IAAzB,EAA+B;AAC3B,gBAAI,CAACA,IAAL,EAAW;AACPA,uBAAOD,IAAP;AACAA,uBAAO,IAAP;AACH;AACD,gBAAIE,QAAQF,QAAQA,KAAKE,KAAb,IAAsBD,KAAKE,MAAvC;AACA,gBAAI,CAAC,GAAGR,WAAWS,OAAf,EAAwBH,IAAxB,CAAJ,EAAmC;AAC/BC,yBAAS,CAAT;AACH;AACD,gBAAIG,QAAQ,CAAC,GAAGT,YAAYT,OAAhB,EAAyBc,IAAzB,CAAZ;AACA,mBAAO,CAAC,GAAGP,gBAAgBP,OAApB,EAA6B,CAACmB,IAAD,EAAOC,QAAP,KAAoB;AACpD,oBAAID,KAAKH,MAAL,GAAcD,QAAQ,CAAtB,IAA2BK,YAAY,IAA3C,EAAiD;AAC7CD,yBAAKE,IAAL,CAAUD,QAAV;AACAA,+BAAW,CAAC,GAAGV,iBAAiBY,eAArB,GAAX;AACH;AACD,yBAASC,MAAT,CAAgBC,EAAhB,EAAoB;AAChBN,0BAAM,GAAGC,IAAT,EAAeK,EAAf;AACH;;AAED,oBAAIX,IAAJ,EAAU,CAAC,GAAGT,QAAQJ,OAAZ,EAAqBa,IAArB,EAA2BU,MAA3B,EAAmCH,QAAnC,EAAV,KAA4D,CAAC,GAAGhB,QAAQJ,OAAZ,EAAqBuB,MAArB,EAA6BH,QAA7B;;AAE5D,uBAAOA,SAASV,iBAAiBe,cAA1B,CAAP;AACH,aAZM,CAAP;AAaH;AACDC,eAAO5B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"retryable.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = retryable;\n\nvar _retry = require('./retry.js');\n\nvar _retry2 = _interopRequireDefault(_retry);\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _promiseCallback = require('./internal/promiseCallback.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable(opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = opts && opts.arity || task.length;\n    if ((0, _wrapAsync.isAsync)(task)) {\n        arity += 1;\n    }\n    var _task = (0, _wrapAsync2.default)(task);\n    return (0, _initialParams2.default)((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = (0, _promiseCallback.promiseCallback)();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) (0, _retry2.default)(opts, taskFn, callback);else (0, _retry2.default)(taskFn, callback);\n\n        return callback[_promiseCallback.PROMISE_SYMBOL];\n    });\n}\nmodule.exports = exports['default'];"]}