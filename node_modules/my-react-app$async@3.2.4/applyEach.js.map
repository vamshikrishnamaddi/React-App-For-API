{"version":3,"sources":["applyEach.js"],"names":["Object","defineProperty","exports","value","_applyEach","require","_applyEach2","_interopRequireDefault","_map","_map2","obj","__esModule","default","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;;AAIA,QAAIC,aAAaC,QAAQ,sBAAR,CAAjB;;AAEA,QAAIC,cAAcC,uBAAuBH,UAAvB,CAAlB;;AAEA,QAAII,OAAOH,QAAQ,OAAR,CAAX;;AAEA,QAAII,QAAQF,uBAAuBC,IAAvB,CAAZ;;AAEA,aAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,aAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAR,YAAQU,OAAR,GAAkB,CAAC,GAAGN,YAAYM,OAAhB,EAAyBH,MAAMG,OAA/B,CAAlB;AACAC,WAAOX,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"applyEach.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _applyEach = require('./internal/applyEach.js');\n\nvar _applyEach2 = _interopRequireDefault(_applyEach);\n\nvar _map = require('./map.js');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nexports.default = (0, _applyEach2.default)(_map2.default);\nmodule.exports = exports['default'];"]}