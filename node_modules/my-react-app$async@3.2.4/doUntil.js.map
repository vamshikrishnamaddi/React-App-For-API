{"version":3,"sources":["doUntil.js"],"names":["Object","defineProperty","exports","value","default","doUntil","_doWhilst","require","_doWhilst2","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","iteratee","test","callback","_test","args","cb","pop","err","truth","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,OAAlB;;AAEA,YAAIC,YAAYC,QAAQ,YAAR,CAAhB;;AAEA,YAAIC,aAAaC,uBAAuBH,SAAvB,CAAjB;;AAEA,YAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,YAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,iBAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;AAqBA,iBAASP,OAAT,CAAiBS,QAAjB,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2C;AACvC,kBAAMC,QAAQ,CAAC,GAAGN,YAAYP,OAAhB,EAAyBW,IAAzB,CAAd;AACA,mBAAO,CAAC,GAAGP,WAAWJ,OAAf,EAAwBU,QAAxB,EAAkC,CAAC,GAAGI,IAAJ,KAAa;AAClD,sBAAMC,KAAKD,KAAKE,GAAL,EAAX;AACAH,sBAAM,GAAGC,IAAT,EAAe,CAACG,GAAD,EAAMC,KAAN,KAAgBH,GAAGE,GAAH,EAAQ,CAACC,KAAT,CAA/B;AACH,aAHM,EAGJN,QAHI,CAAP;AAIH;AACDO,eAAOrB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"doUntil.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = doUntil;\n\nvar _doWhilst = require('./doWhilst.js');\n\nvar _doWhilst2 = _interopRequireDefault(_doWhilst);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = (0, _wrapAsync2.default)(test);\n    return (0, _doWhilst2.default)(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb(err, !truth));\n    }, callback);\n}\nmodule.exports = exports['default'];"]}