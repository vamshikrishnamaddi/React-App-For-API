{"version":3,"sources":["seq.js"],"names":["Object","defineProperty","exports","value","default","seq","_reduce","require","_reduce2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_promiseCallback","obj","__esModule","functions","_functions","map","args","that","cb","length","pop","promiseCallback","newargs","fn","iterCb","apply","concat","err","nextargs","results","PROMISE_SYMBOL","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,GAAlB;;AAEA,YAAIC,UAAUC,QAAQ,UAAR,CAAd;;AAEA,YAAIC,WAAWC,uBAAuBH,OAAvB,CAAf;;AAEA,YAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,YAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,YAAIE,mBAAmBL,QAAQ,4BAAR,CAAvB;;AAEA,iBAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAET,SAASS,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,iBAASR,GAAT,CAAa,GAAGU,SAAhB,EAA2B;AACvB,gBAAIC,aAAaD,UAAUE,GAAV,CAAcN,YAAYP,OAA1B,CAAjB;AACA,mBAAO,UAAU,GAAGc,IAAb,EAAmB;AACtB,oBAAIC,OAAO,IAAX;;AAEA,oBAAIC,KAAKF,KAAKA,KAAKG,MAAL,GAAc,CAAnB,CAAT;AACA,oBAAI,OAAOD,EAAP,IAAa,UAAjB,EAA6B;AACzBF,yBAAKI,GAAL;AACH,iBAFD,MAEO;AACHF,yBAAK,CAAC,GAAGR,iBAAiBW,eAArB,GAAL;AACH;;AAED,iBAAC,GAAGf,SAASJ,OAAb,EAAsBY,UAAtB,EAAkCE,IAAlC,EAAwC,CAACM,OAAD,EAAUC,EAAV,EAAcC,MAAd,KAAyB;AAC7DD,uBAAGE,KAAH,CAASR,IAAT,EAAeK,QAAQI,MAAR,CAAe,CAACC,GAAD,EAAM,GAAGC,QAAT,KAAsB;AAChDJ,+BAAOG,GAAP,EAAYC,QAAZ;AACH,qBAFc,CAAf;AAGH,iBAJD,EAIG,CAACD,GAAD,EAAME,OAAN,KAAkBX,GAAGS,GAAH,EAAQ,GAAGE,OAAX,CAJrB;;AAMA,uBAAOX,GAAGR,iBAAiBoB,cAApB,CAAP;AACH,aAjBD;AAkBH;AACDC,eAAO/B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"seq.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = seq;\n\nvar _reduce = require('./reduce.js');\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _promiseCallback = require('./internal/promiseCallback.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(_wrapAsync2.default);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = (0, _promiseCallback.promiseCallback)();\n        }\n\n        (0, _reduce2.default)(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        }, (err, results) => cb(err, ...results));\n\n        return cb[_promiseCallback.PROMISE_SYMBOL];\n    };\n}\nmodule.exports = exports['default'];"]}