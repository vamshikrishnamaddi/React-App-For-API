{"version":3,"sources":["reflectAll.js"],"names":["Object","defineProperty","exports","value","default","reflectAll","_reflect","require","_reflect2","_interopRequireDefault","obj","__esModule","tasks","results","Array","isArray","map","keys","forEach","key","call","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,UAAlB;;AAEA,YAAIC,WAAWC,QAAQ,WAAR,CAAf;;AAEA,YAAIC,YAAYC,uBAAuBH,QAAvB,CAAhB;;AAEA,iBAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEN,SAASM,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,iBAASL,UAAT,CAAoBO,KAApB,EAA2B;AACvB,gBAAIC,OAAJ;AACA,gBAAIC,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtBC,0BAAUD,MAAMI,GAAN,CAAUR,UAAUJ,OAApB,CAAV;AACH,aAFD,MAEO;AACHS,0BAAU,EAAV;AACAb,uBAAOiB,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA2BC,OAAO;AAC9BN,4BAAQM,GAAR,IAAeX,UAAUJ,OAAV,CAAkBgB,IAAlB,CAAuB,IAAvB,EAA6BR,MAAMO,GAAN,CAA7B,CAAf;AACH,iBAFD;AAGH;AACD,mBAAON,OAAP;AACH;AACDQ,eAAOnB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"reflectAll.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reflectAll;\n\nvar _reflect = require('./reflect.js');\n\nvar _reflect2 = _interopRequireDefault(_reflect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(_reflect2.default);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = _reflect2.default.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\nmodule.exports = exports['default'];"]}