{"version":3,"sources":["reject.js"],"names":["Object","defineProperty","exports","value","_reject2","require","_reject3","_interopRequireDefault","_eachOf","_eachOf2","_awaitify","_awaitify2","obj","__esModule","default","reject","coll","iteratee","callback","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;;AAIA,QAAIC,WAAWC,QAAQ,mBAAR,CAAf;;AAEA,QAAIC,WAAWC,uBAAuBH,QAAvB,CAAf;;AAEA,QAAII,UAAUH,QAAQ,UAAR,CAAd;;AAEA,QAAII,WAAWF,uBAAuBC,OAAvB,CAAf;;AAEA,QAAIE,YAAYL,QAAQ,qBAAR,CAAhB;;AAEA,QAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,aAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,aAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,aAASG,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACxC,aAAO,CAAC,GAAGZ,SAASQ,OAAb,EAAsBL,SAASK,OAA/B,EAAwCE,IAAxC,EAA8CC,QAA9C,EAAwDC,QAAxD,CAAP;AACD;AACDhB,YAAQY,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwBC,MAAxB,EAAgC,CAAhC,CAAlB;AACAI,WAAOjB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"reject.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reject2 = require('./internal/reject.js');\n\nvar _reject3 = _interopRequireDefault(_reject2);\n\nvar _eachOf = require('./eachOf.js');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject(coll, iteratee, callback) {\n  return (0, _reject3.default)(_eachOf2.default, coll, iteratee, callback);\n}\nexports.default = (0, _awaitify2.default)(reject, 3);\nmodule.exports = exports['default'];"]}