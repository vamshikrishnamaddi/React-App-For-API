{"version":3,"sources":["forEachOfLimit.js"],"names":["Object","defineProperty","exports","value","_eachOfLimit2","require","_eachOfLimit3","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","eachOfLimit","coll","limit","iteratee","callback","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;;AAIA,QAAIC,gBAAgBC,QAAQ,wBAAR,CAApB;;AAEA,QAAIC,gBAAgBC,uBAAuBH,aAAvB,CAApB;;AAEA,QAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,QAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,QAAIE,YAAYL,QAAQ,qBAAR,CAAhB;;AAEA,QAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,aAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,aAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;AAqBA,aAASG,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AACpD,aAAO,CAAC,GAAGb,cAAcQ,OAAlB,EAA2BG,KAA3B,EAAkCD,IAAlC,EAAwC,CAAC,GAAGP,YAAYK,OAAhB,EAAyBI,QAAzB,CAAxC,EAA4EC,QAA5E,CAAP;AACD;;AAEDjB,YAAQY,OAAR,GAAkB,CAAC,GAAGH,WAAWG,OAAf,EAAwBC,WAAxB,EAAqC,CAArC,CAAlB;AACAK,WAAOlB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"forEachOfLimit.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOfLimit2 = require('./internal/eachOfLimit.js');\n\nvar _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachOfLimit, 4);\nmodule.exports = exports['default'];"]}