{"version":3,"sources":["ensureAsync.js"],"names":["Object","defineProperty","exports","value","default","ensureAsync","_setImmediate","require","_setImmediate2","_interopRequireDefault","_wrapAsync","obj","__esModule","fn","isAsync","args","callback","pop","sync","push","innerArgs","apply","module"],"mappings":"AAAA;;;;;;AAEAA,eAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,mBAAO;AADkC,SAA7C;AAGAD,gBAAQE,OAAR,GAAkBC,WAAlB;;AAEA,YAAIC,gBAAgBC,QAAQ,yBAAR,CAApB;;AAEA,YAAIC,iBAAiBC,uBAAuBH,aAAvB,CAArB;;AAEA,YAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,iBAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,mBAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEP,SAASO,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,iBAASN,WAAT,CAAqBQ,EAArB,EAAyB;AACrB,gBAAI,CAAC,GAAGH,WAAWI,OAAf,EAAwBD,EAAxB,CAAJ,EAAiC,OAAOA,EAAP;AACjC,mBAAO,UAAU,GAAGE,IAAb,CAAkB,cAAlB,EAAkC;AACrC,oBAAIC,WAAWD,KAAKE,GAAL,EAAf;AACA,oBAAIC,OAAO,IAAX;AACAH,qBAAKI,IAAL,CAAU,CAAC,GAAGC,SAAJ,KAAkB;AACxB,wBAAIF,IAAJ,EAAU;AACN,yBAAC,GAAGV,eAAeJ,OAAnB,EAA4B,MAAMY,SAAS,GAAGI,SAAZ,CAAlC;AACH,qBAFD,MAEO;AACHJ,iCAAS,GAAGI,SAAZ;AACH;AACJ,iBAND;AAOAP,mBAAGQ,KAAH,CAAS,IAAT,EAAeN,IAAf;AACAG,uBAAO,KAAP;AACH,aAZD;AAaH;AACDI,eAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"ensureAsync.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = ensureAsync;\n\nvar _setImmediate = require('./internal/setImmediate.js');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if ((0, _wrapAsync.isAsync)(fn)) return fn;\n    return function (...args /*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                (0, _setImmediate2.default)(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\nmodule.exports = exports['default'];"]}