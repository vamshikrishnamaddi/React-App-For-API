{"version":3,"sources":["apply.js"],"names":["Object","defineProperty","exports","value","default","fn","args","callArgs","module"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;;AAIAD,YAAQE,OAAR,GAAkB,UAAUC,EAAV,EAAc,GAAGC,IAAjB,EAAuB;AACvC,aAAO,CAAC,GAAGC,QAAJ,KAAiBF,GAAG,GAAGC,IAAN,EAAY,GAAGC,QAAf,CAAxB;AACD,KAFD;;AAIAC,WAAON,OAAP,GAAiBA,QAAQ,SAAR,CAAjB,C,CAAqC","file":"apply.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (fn, ...args) {\n  return (...callArgs) => fn(...args, ...callArgs);\n};\n\nmodule.exports = exports[\"default\"]; /**\n                                      * Creates a continuation function with some arguments already applied.\n                                      *\n                                      * Useful as a shorthand when combined with other control flow functions. Any\n                                      * arguments passed to the returned function are added to the arguments\n                                      * originally passed to apply.\n                                      *\n                                      * @name apply\n                                      * @static\n                                      * @memberOf module:Utils\n                                      * @method\n                                      * @category Util\n                                      * @param {Function} fn - The function you want to eventually apply all\n                                      * arguments to. Invokes with (arguments...).\n                                      * @param {...*} arguments... - Any number of arguments to automatically apply\n                                      * when the continuation is called.\n                                      * @returns {Function} the partially-applied function\n                                      * @example\n                                      *\n                                      * // using apply\n                                      * async.parallel([\n                                      *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n                                      *     async.apply(fs.writeFile, 'testfile2', 'test2')\n                                      * ]);\n                                      *\n                                      *\n                                      * // the same process without using apply\n                                      * async.parallel([\n                                      *     function(callback) {\n                                      *         fs.writeFile('testfile1', 'test1', callback);\n                                      *     },\n                                      *     function(callback) {\n                                      *         fs.writeFile('testfile2', 'test2', callback);\n                                      *     }\n                                      * ]);\n                                      *\n                                      * // It's possible to pass any number of additional arguments when calling the\n                                      * // continuation:\n                                      *\n                                      * node> var fn = async.apply(sys.puts, 'one');\n                                      * node> fn('two', 'three');\n                                      * one\n                                      * two\n                                      * three\n                                      */"]}