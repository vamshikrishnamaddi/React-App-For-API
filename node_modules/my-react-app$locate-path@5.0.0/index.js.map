{"version":3,"sources":["index.js"],"names":["path","require","fs","promisify","pLocate","fsStat","stat","fsLStat","lstat","typeMappings","directory","file","checkType","type","Error","matchType","undefined","module","exports","paths","options","cwd","process","allowSymlinks","statFn","path_","resolve","_","sync","statSync","lstatSync"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AACA,QAAMA,OAAOC,QAAQ,mBAAR,CAAb;AACA,QAAMC,KAAKD,QAAQ,iBAAR,CAAX;AACA,QAAM,EAACE,SAAD,KAAcF,QAAQ,mBAAR,CAApB;AACA,QAAMG,UAAUH,QAAQ,uBAAR,CAAhB;;AAEA,QAAMI,SAASF,UAAUD,GAAGI,IAAb,CAAf;AACA,QAAMC,UAAUJ,UAAUD,GAAGM,KAAb,CAAhB;;AAEA,QAAMC,eAAe;AACpBC,cAAW,aADS;AAEpBC,SAAM;AAFc,GAArB;;AAKA,WAASC,SAAT,CAAmB,EAACC,IAAD,EAAnB,EAA2B;AAC1B,OAAIA,QAAQJ,YAAZ,EAA0B;AACzB;AACA;;AAED,SAAM,IAAIK,KAAJ,CAAW,2BAA0BD,IAAK,EAA1C,CAAN;AACA;;AAED,QAAME,YAAY,CAACF,IAAD,EAAOP,IAAP,KAAgBO,SAASG,SAAT,IAAsBV,KAAKG,aAAaI,IAAb,CAAL,GAAxD;;AAEAI,SAAOC,OAAP,GAAiB,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC1CA;AACCC,SAAKC,QAAQD,GAAR,EADN;AAECR,UAAM,MAFP;AAGCU,mBAAe;AAHhB,MAIIH,OAJJ;AAMAR,aAAUQ,OAAV;AACA,SAAMI,SAASJ,QAAQG,aAAR,GAAwBlB,MAAxB,GAAiCE,OAAhD;;AAEA,UAAOH,QAAQe,KAAR,EAAe,MAAMM,KAAN,IAAe;AACpC,QAAI;AACH,WAAMnB,OAAO,MAAMkB,OAAOxB,KAAK0B,OAAL,CAAaN,QAAQC,GAArB,EAA0BI,KAA1B,CAAP,CAAnB;AACA,YAAOV,UAAUK,QAAQP,IAAlB,EAAwBP,IAAxB,CAAP;AACA,KAHD,CAGE,OAAOqB,CAAP,EAAU;AACX,YAAO,KAAP;AACA;AACD,IAPM,EAOJP,OAPI,CAAP;AAQA,GAlBD;;AAoBAH,SAAOC,OAAP,CAAeU,IAAf,GAAsB,CAACT,KAAD,EAAQC,OAAR,KAAoB;AACzCA;AACCC,SAAKC,QAAQD,GAAR,EADN;AAECE,mBAAe,IAFhB;AAGCV,UAAM;AAHP,MAIIO,OAJJ;AAMAR,aAAUQ,OAAV;AACA,SAAMI,SAASJ,QAAQG,aAAR,GAAwBrB,GAAG2B,QAA3B,GAAsC3B,GAAG4B,SAAxD;;AAEA,QAAK,MAAML,KAAX,IAAoBN,KAApB,EAA2B;AAC1B,QAAI;AACH,WAAMb,OAAOkB,OAAOxB,KAAK0B,OAAL,CAAaN,QAAQC,GAArB,EAA0BI,KAA1B,CAAP,CAAb;;AAEA,SAAIV,UAAUK,QAAQP,IAAlB,EAAwBP,IAAxB,CAAJ,EAAmC;AAClC,aAAOmB,KAAP;AACA;AACD,KAND,CAME,OAAOE,CAAP,EAAU,CACX;AACD;AACD,GApBD","file":"index.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst {promisify} = require('util');\nconst pLocate = require('p-locate');\n\nconst fsStat = promisify(fs.stat);\nconst fsLStat = promisify(fs.lstat);\n\nconst typeMappings = {\n\tdirectory: 'isDirectory',\n\tfile: 'isFile'\n};\n\nfunction checkType({type}) {\n\tif (type in typeMappings) {\n\t\treturn;\n\t}\n\n\tthrow new Error(`Invalid type specified: ${type}`);\n}\n\nconst matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();\n\nmodule.exports = async (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\ttype: 'file',\n\t\tallowSymlinks: true,\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fsStat : fsLStat;\n\n\treturn pLocate(paths, async path_ => {\n\t\ttry {\n\t\t\tconst stat = await statFn(path.resolve(options.cwd, path_));\n\t\t\treturn matchType(options.type, stat);\n\t\t} catch (_) {\n\t\t\treturn false;\n\t\t}\n\t}, options);\n};\n\nmodule.exports.sync = (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tallowSymlinks: true,\n\t\ttype: 'file',\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;\n\n\tfor (const path_ of paths) {\n\t\ttry {\n\t\t\tconst stat = statFn(path.resolve(options.cwd, path_));\n\n\t\t\tif (matchType(options.type, stat)) {\n\t\t\t\treturn path_;\n\t\t\t}\n\t\t} catch (_) {\n\t\t}\n\t}\n};\n"]}