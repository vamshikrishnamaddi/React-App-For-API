{"version":3,"sources":["ChildMapping.js"],"names":["Children","cloneElement","isValidElement","getChildMapping","children","mapFn","mapper","child","result","Object","create","map","c","forEach","key","mergeChildMappings","prev","next","getValueForKey","nextKeysPending","pendingKeys","prevKey","length","push","i","childMapping","nextKey","pendingNextKey","getProp","prop","props","getInitialChildMapping","onExited","bind","in","appear","enter","exit","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","keys","hasPrev","hasNext","prevChild","isLeaving"],"mappings":";;;;AAAA,aAASA,QAAT,EAAmBC,YAAnB,EAAiCC,cAAjC,QAAuD,OAAvD;AACA;;;;;;;AAOA,WAAO,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,KAAnC,EAA0C;AAC/C,UAAIC,SAAS,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAClC,eAAOF,SAASH,eAAeK,KAAf,CAAT,GAAiCF,MAAME,KAAN,CAAjC,GAAgDA,KAAvD;AACD,OAFD;;AAIA,UAAIC,SAASC,OAAOC,MAAP,CAAc,IAAd,CAAb;AACA,UAAIN,QAAJ,EAAcJ,SAASW,GAAT,CAAaP,QAAb,EAAuB,UAAUQ,CAAV,EAAa;AAChD,eAAOA,CAAP;AACD,OAFa,EAEXC,OAFW,CAEH,UAAUN,KAAV,EAAiB;AAC1B;AACAC,eAAOD,MAAMO,GAAb,IAAoBR,OAAOC,KAAP,CAApB;AACD,OALa;AAMd,aAAOC,MAAP;AACD;AACD;;;;;;;;;;;;;;;;;;AAkBA,WAAO,SAASO,kBAAT,CAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AAC7CD,aAAOA,QAAQ,EAAf;AACAC,aAAOA,QAAQ,EAAf;;AAEA,eAASC,cAAT,CAAwBJ,GAAxB,EAA6B;AAC3B,eAAOA,OAAOG,IAAP,GAAcA,KAAKH,GAAL,CAAd,GAA0BE,KAAKF,GAAL,CAAjC;AACD,OAN4C,CAM3C;AACF;;;AAGA,UAAIK,kBAAkBV,OAAOC,MAAP,CAAc,IAAd,CAAtB;AACA,UAAIU,cAAc,EAAlB;;AAEA,WAAK,IAAIC,OAAT,IAAoBL,IAApB,EAA0B;AACxB,YAAIK,WAAWJ,IAAf,EAAqB;AACnB,cAAIG,YAAYE,MAAhB,EAAwB;AACtBH,4BAAgBE,OAAhB,IAA2BD,WAA3B;AACAA,0BAAc,EAAd;AACD;AACF,SALD,MAKO;AACLA,sBAAYG,IAAZ,CAAiBF,OAAjB;AACD;AACF;;AAED,UAAIG,CAAJ;AACA,UAAIC,eAAe,EAAnB;;AAEA,WAAK,IAAIC,OAAT,IAAoBT,IAApB,EAA0B;AACxB,YAAIE,gBAAgBO,OAAhB,CAAJ,EAA8B;AAC5B,eAAKF,IAAI,CAAT,EAAYA,IAAIL,gBAAgBO,OAAhB,EAAyBJ,MAAzC,EAAiDE,GAAjD,EAAsD;AACpD,gBAAIG,iBAAiBR,gBAAgBO,OAAhB,EAAyBF,CAAzB,CAArB;AACAC,yBAAaN,gBAAgBO,OAAhB,EAAyBF,CAAzB,CAAb,IAA4CN,eAAeS,cAAf,CAA5C;AACD;AACF;;AAEDF,qBAAaC,OAAb,IAAwBR,eAAeQ,OAAf,CAAxB;AACD,OApC4C,CAoC3C;;;AAGF,WAAKF,IAAI,CAAT,EAAYA,IAAIJ,YAAYE,MAA5B,EAAoCE,GAApC,EAAyC;AACvCC,qBAAaL,YAAYI,CAAZ,CAAb,IAA+BN,eAAeE,YAAYI,CAAZ,CAAf,CAA/B;AACD;;AAED,aAAOC,YAAP;AACD;;AAED,aAASG,OAAT,CAAiBrB,KAAjB,EAAwBsB,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,aAAOA,MAAMD,IAAN,KAAe,IAAf,GAAsBC,MAAMD,IAAN,CAAtB,GAAoCtB,MAAMuB,KAAN,CAAYD,IAAZ,CAA3C;AACD;;AAED,WAAO,SAASE,sBAAT,CAAgCD,KAAhC,EAAuCE,QAAvC,EAAiD;AACtD,aAAO7B,gBAAgB2B,MAAM1B,QAAtB,EAAgC,UAAUG,KAAV,EAAiB;AACtD,eAAON,aAAaM,KAAb,EAAoB;AACzByB,oBAAUA,SAASC,IAAT,CAAc,IAAd,EAAoB1B,KAApB,CADe;AAEzB2B,cAAI,IAFqB;AAGzBC,kBAAQP,QAAQrB,KAAR,EAAe,QAAf,EAAyBuB,KAAzB,CAHiB;AAIzBM,iBAAOR,QAAQrB,KAAR,EAAe,OAAf,EAAwBuB,KAAxB,CAJkB;AAKzBO,gBAAMT,QAAQrB,KAAR,EAAe,MAAf,EAAuBuB,KAAvB;AALmB,SAApB,CAAP;AAOD,OARM,CAAP;AASD;AACD,WAAO,SAASQ,mBAAT,CAA6BC,SAA7B,EAAwCC,gBAAxC,EAA0DR,QAA1D,EAAoE;AACzE,UAAIS,mBAAmBtC,gBAAgBoC,UAAUnC,QAA1B,CAAvB;AACA,UAAIA,WAAWW,mBAAmByB,gBAAnB,EAAqCC,gBAArC,CAAf;AACAhC,aAAOiC,IAAP,CAAYtC,QAAZ,EAAsBS,OAAtB,CAA8B,UAAUC,GAAV,EAAe;AAC3C,YAAIP,QAAQH,SAASU,GAAT,CAAZ;AACA,YAAI,CAACZ,eAAeK,KAAf,CAAL,EAA4B;AAC5B,YAAIoC,UAAW7B,OAAO0B,gBAAtB;AACA,YAAII,UAAW9B,OAAO2B,gBAAtB;AACA,YAAII,YAAYL,iBAAiB1B,GAAjB,CAAhB;AACA,YAAIgC,YAAY5C,eAAe2C,SAAf,KAA6B,CAACA,UAAUf,KAAV,CAAgBI,EAA9D,CAN2C,CAMuB;;AAElE,YAAIU,YAAY,CAACD,OAAD,IAAYG,SAAxB,CAAJ,EAAwC;AACtC;AACA1C,mBAASU,GAAT,IAAgBb,aAAaM,KAAb,EAAoB;AAClCyB,sBAAUA,SAASC,IAAT,CAAc,IAAd,EAAoB1B,KAApB,CADwB;AAElC2B,gBAAI,IAF8B;AAGlCG,kBAAMT,QAAQrB,KAAR,EAAe,MAAf,EAAuBgC,SAAvB,CAH4B;AAIlCH,mBAAOR,QAAQrB,KAAR,EAAe,OAAf,EAAwBgC,SAAxB;AAJ2B,WAApB,CAAhB;AAMD,SARD,MAQO,IAAI,CAACK,OAAD,IAAYD,OAAZ,IAAuB,CAACG,SAA5B,EAAuC;AAC5C;AACA;AACA1C,mBAASU,GAAT,IAAgBb,aAAaM,KAAb,EAAoB;AAClC2B,gBAAI;AAD8B,WAApB,CAAhB;AAGD,SANM,MAMA,IAAIU,WAAWD,OAAX,IAAsBzC,eAAe2C,SAAf,CAA1B,EAAqD;AAC1D;AACA;AACA;AACAzC,mBAASU,GAAT,IAAgBb,aAAaM,KAAb,EAAoB;AAClCyB,sBAAUA,SAASC,IAAT,CAAc,IAAd,EAAoB1B,KAApB,CADwB;AAElC2B,gBAAIW,UAAUf,KAAV,CAAgBI,EAFc;AAGlCG,kBAAMT,QAAQrB,KAAR,EAAe,MAAf,EAAuBgC,SAAvB,CAH4B;AAIlCH,mBAAOR,QAAQrB,KAAR,EAAe,OAAf,EAAwBgC,SAAxB;AAJ2B,WAApB,CAAhB;AAMD;AACF,OAjCD;AAkCA,aAAOnC,QAAP;AACD","file":"ChildMapping.js","sourcesContent":["import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}"]}