"use strict";

Liferay.Loader.define("@my-react-app$clayui/core@3.87.0/lib/overlay-mask/OverlayMask", ['module', 'exports', 'require', '@my-react-app$clayui/shared', 'my-react-app$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OverlayMask = OverlayMask;

    var _shared = require("@my-react-app$clayui/shared");

    var _react = _interopRequireWildcard(require("my-react-app$react"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {
        return cache.get(obj);
      }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }newObj.default = obj;if (cache) {
        cache.set(obj, newObj);
      }return newObj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    var MoveTo = function MoveTo(x, y) {
      return "M ".concat(x, " ").concat(y);
    };

    var LineTo = function LineTo(x, y) {
      return "L ".concat(x, " ").concat(y);
    };

    var EllipticalArcCurve = function EllipticalArcCurve(toX, toY) {
      return "A 0,0 0 0 0 ".concat(toX, ",").concat(toY);
    };

    var createClipPath = function createClipPath(bounds, containerBounds, padding) {
      var parentBounds = {
        endX: containerBounds.width,
        endY: containerBounds.height,
        startX: 0,
        startY: 0
      };
      var startX = bounds.x - padding;
      var endX = startX + bounds.width + padding * 2;
      var startY = bounds.y - padding;
      var endY = startY + bounds.height + padding * 2;
      return [MoveTo(parentBounds.startX, parentBounds.startY), LineTo(parentBounds.startX, parentBounds.endY), LineTo(parentBounds.endX, parentBounds.endY), LineTo(parentBounds.endX, parentBounds.startY), 'z', MoveTo(startX, startY), LineTo(startX, endY), EllipticalArcCurve(startX, endY), LineTo(endX, endY), EllipticalArcCurve(endX, endY), LineTo(endX, startY), EllipticalArcCurve(endX, startY), LineTo(startX, startY), EllipticalArcCurve(startX, startY)].join(' ');
    };

    var initialBounds = {
      height: 0,
      width: 0,
      x: 0,
      y: 0
    };
    var useIsomorphicLayoutEffect = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;

    function SVG(_ref) {
      var children = _ref.children;
      var containerRef = (0, _react.useRef)(null);

      var _useState = (0, _react.useState)(initialBounds),
          _useState2 = _slicedToArray(_useState, 2),
          containerBounds = _useState2[0],
          setContainerBounds = _useState2[1];

      useIsomorphicLayoutEffect(function () {
        if (containerRef.current) {
          var updater = function updater(rect) {
            if (!containerRef.current) {
              return;
            }

            var _ref2 = rect !== null && rect !== void 0 ? rect : containerRef.current.getBoundingClientRect(),
                height = _ref2.height,
                width = _ref2.width,
                x = _ref2.x,
                y = _ref2.y;

            setContainerBounds({
              height: height,
              width: width,
              x: x,
              y: y
            });
          };

          return (0, _shared.observeRect)(containerRef.current, updater);
        }
      }, [setContainerBounds]);
      return (/*#__PURE__*/_react.default.createElement("div", {
          ref: containerRef,
          style: {
            bottom: 0,
            left: 0,
            position: 'fixed',
            right: 0,
            top: 0,
            zIndex: 1040
          }
        }, /*#__PURE__*/_react.default.createElement("svg", {
          height: containerBounds.height,
          width: containerBounds.width,
          xmlns: "http://www.w3.org/2000/svg"
        }, children(containerBounds)))
      );
    }

    function OverlayMask(_ref3) {
      var _ref3$defaultBounds = _ref3.defaultBounds,
          defaultBounds = _ref3$defaultBounds === void 0 ? initialBounds : _ref3$defaultBounds,
          bounds = _ref3.bounds,
          children = _ref3.children,
          onClick = _ref3.onClick,
          onBoundsChange = _ref3.onBoundsChange,
          _ref3$padding = _ref3.padding,
          padding = _ref3$padding === void 0 ? 10 : _ref3$padding,
          _ref3$visible = _ref3.visible,
          visible = _ref3$visible === void 0 ? false : _ref3$visible;

      var _useInternalState = (0, _shared.useInternalState)({
        defaultName: 'defaultBounds',
        defaultValue: defaultBounds,
        handleName: 'onBoundsChange',
        name: 'bounds',
        onChange: onBoundsChange,
        value: bounds
      }),
          _useInternalState2 = _slicedToArray(_useInternalState, 2),
          internalBounds = _useInternalState2[0],
          setBounds = _useInternalState2[1];

      var childrenRef = (0, _react.useRef)(null);
      useIsomorphicLayoutEffect(function () {
        if (childrenRef.current) {
          var updater = function updater() {
            if (!childrenRef.current) {
              return;
            }

            var _childrenRef$current$ = childrenRef.current.getBoundingClientRect(),
                height = _childrenRef$current$.height,
                width = _childrenRef$current$.width,
                x = _childrenRef$current$.x,
                y = _childrenRef$current$.y;

            setBounds({
              height: height,
              width: width,
              x: x,
              y: y
            });
          };

          return (0, _shared.observeRect)(childrenRef.current, updater);
        }
      }, [setBounds]);
      return (/*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children && typeof children !== 'function' && /*#__PURE__*/_react.default.cloneElement(children, {
          ref: function ref(node) {
            childrenRef.current = node; // @ts-ignore

            var ref = children.ref;

            if (typeof ref === 'function') {
              ref(node);
            } else if (ref !== null) {
              ref.current = node;
            }
          }
        }), typeof children === 'function' && children(childrenRef), visible && /*#__PURE__*/_react.default.createElement(SVG, null, function (containerBounds) {
          return (/*#__PURE__*/_react.default.createElement("g", null, /*#__PURE__*/_react.default.createElement("defs", null, /*#__PURE__*/_react.default.createElement("clipPath", {
              id: "overlayMask"
            }, /*#__PURE__*/_react.default.createElement("path", {
              clipRule: "evenodd",
              d: createClipPath(internalBounds, containerBounds, padding)
            }))), /*#__PURE__*/_react.default.createElement("rect", {
              clipPath: "url(#overlayMask)",
              fill: "#393a4a",
              fillOpacity: 0.8,
              height: "100%",
              onClick: onClick,
              width: "100%",
              x: 0,
              y: 0
            }, /*#__PURE__*/_react.default.createElement("animate", {
              attributeName: "opacity",
              dur: "0.3s",
              repeatCount: 1,
              values: "0;1"
            })))
          );
        }))
      );
    }
  }
});
//# sourceMappingURL=OverlayMask.js.map