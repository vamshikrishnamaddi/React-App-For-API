/**
 * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
import type { ICollectionProps } from '../collection';
export declare type Props<T> = {
    /**
     * Flag to indicate if the DropDown menu is active or not (controlled).
     */
    active?: boolean;
    /**
     * The global `aria-describedby` attribute identifies the element that
     * describes the component.
     */
    'aria-describedby'?: string;
    /**
     * The `aria-label` attribute defines a string value that labels an interactive
     * element.
     */
    'aria-label'?: string;
    /**
     * The `aria-labelledby` attribute identifies the element (or elements) that
     * labels the element it is applied to.
     */
    'aria-labelledby'?: string;
    /**
     * Custom trigger component.
     */
    as?: 'button' | React.ForwardRefExoticComponent<any> | ((props: React.HTMLAttributes<HTMLElement>) => JSX.Element);
    /**
     * Sets the CSS className for the component.
     */
    className?: string;
    /**
     *  Property to set the default value of `active` (uncontrolled).
     */
    defaultActive?: boolean;
    /**
     * The initial selected key (uncontrolled).
     */
    defaultSelectedKey?: React.Key;
    /**
     * Direction the menu will render relative to the Picker.
     */
    direction?: 'bottom' | 'top';
    /**
     * Flag to indicate that the component is disabled.
     */
    disabled?: boolean;
    /**
     * The id of the component.
     */
    id?: string;
    /**
     * Texts used for assertive messages to SRs.
     */
    messages?: {
        itemSelected: string;
        itemDescribedby: string;
    };
    /**
     * Flag to make the component hybrid, when identified it is on a mobile
     * device it will use the native selector.
     */
    native?: boolean;
    /**
     * Callback for when the active state changes (controlled).
     */
    onActiveChange?: InternalDispatch<boolean>;
    /**
     * Callback calling when an option is selected.
     */
    onSelectionChange?: InternalDispatch<React.Key>;
    /**
     * Text that appears when you don't have an item selected.
     */
    placeholder?: string;
    /**
     * The currently selected key (controlled).
     */
    selectedKey?: React.Key;
    /**
     * Sets the className for the React.Portal Menu element.
     */
    UNSAFE_menuClassName?: string;
    [key: string]: any;
} & Omit<ICollectionProps<T, unknown>, 'virtualize'>;
export declare function Picker<T>({ UNSAFE_menuClassName, active: externalActive, as: As, children, className, defaultActive, defaultSelectedKey, direction, disabled, id, items, messages, native, onActiveChange, onSelectionChange, placeholder, selectedKey: externalSelectedKey, ...otherProps }: Props<T>): JSX.Element;
