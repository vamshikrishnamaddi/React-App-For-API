{"version":3,"sources":["utils.js"],"names":["Object","defineProperty","exports","value","excludeProps","getKey","index","key","parentKey","String","startsWith","concat","props","items","keys","reduce","previous","has"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,YAAR,GAAuBA,YAAvB;AACAF,YAAQG,MAAR,GAAiBA,MAAjB;;AAEA;;;;;AAKA;;;;AAIA,aAASA,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,SAA5B,EAAuC;AACrC,UAAID,OAAO,IAAP,KAAgB,CAACE,OAAOF,GAAP,EAAYG,UAAZ,CAAuB,GAAvB,CAAD,IAAgCD,OAAOF,GAAP,EAAYG,UAAZ,CAAuB,IAAvB,CAAhD,CAAJ,EAAmF;AACjF,eAAOH,GAAP;AACD;;AAED,aAAOC,YAAY,GAAGG,MAAH,CAAUH,SAAV,EAAqB,GAArB,EAA0BG,MAA1B,CAAiCL,KAAjC,CAAZ,GAAsD,KAAKK,MAAL,CAAYL,KAAZ,CAA7D;AACD;AACD;;;;;AAMA,aAASF,YAAT,CAAsBQ,KAAtB,EAA6BC,KAA7B,EAAoC;AAClC,aAAOb,OAAOc,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA0B,UAAUC,QAAV,EAAoBT,GAApB,EAAyB;AACxD,YAAI,CAACM,MAAMI,GAAN,CAAUV,GAAV,CAAL,EAAqB;AACnBS,mBAAST,GAAT,IAAgBK,MAAML,GAAN,CAAhB;AACD;;AAED,eAAOS,QAAP;AACD,OANM,EAMJ,EANI,CAAP;AAOD","file":"utils.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.excludeProps = excludeProps;\nexports.getKey = getKey;\n\n/**\n * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Helper function to create a unique key for list or tree when defined by\n * developer data or obtained by component in React.\n */\nfunction getKey(index, key, parentKey) {\n  if (key != null && (!String(key).startsWith('.') || String(key).startsWith('.$'))) {\n    return key;\n  }\n\n  return parentKey ? \"\".concat(parentKey, \".\").concat(index) : \"$.\".concat(index);\n}\n/**\n * Helper function for omitting properties of an object, similar to\n * TypeScript's Omit<T, K>.\n */\n\n\nfunction excludeProps(props, items) {\n  return Object.keys(props).reduce(function (previous, key) {\n    if (!items.has(key)) {\n      previous[key] = props[key];\n    }\n\n    return previous;\n  }, {});\n}"]}