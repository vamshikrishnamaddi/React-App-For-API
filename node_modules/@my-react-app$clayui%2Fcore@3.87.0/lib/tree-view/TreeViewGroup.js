"use strict";

Liferay.Loader.define("@my-react-app$clayui/core@3.87.0/lib/tree-view/TreeViewGroup", ['module', 'exports', 'require', '@my-react-app$clayui/shared', 'my-react-app$classnames', 'my-react-app$react', 'my-react-app$react-transition-group', './Collection', './context', './useItem'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TreeViewGroup = TreeViewGroup;

    var _shared = require("@my-react-app$clayui/shared");

    var _classnames = _interopRequireDefault(require("my-react-app$classnames"));

    var _react = _interopRequireDefault(require("my-react-app$react"));

    var _reactTransitionGroup = require("my-react-app$react-transition-group");

    var _Collection = require("./Collection");

    var _context = require("./context");

    var _useItem = require("./useItem");

    var _excluded = ["children", "className", "items"];

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }return target;
      };return _extends.apply(this, arguments);
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];
        }
      }return target;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
      }return target;
    }

    function List(_ref) {
      var children = _ref.children;
      return (/*#__PURE__*/_react.default.createElement("ul", {
          className: "treeview-group",
          role: "group"
        }, children)
      );
    }

    function TreeViewGroup(_ref2) {
      var children = _ref2.children,
          className = _ref2.className,
          items = _ref2.items,
          otherProps = _objectWithoutProperties(_ref2, _excluded);

      var _useTreeViewContext = (0, _context.useTreeViewContext)(),
          expandedKeys = _useTreeViewContext.expandedKeys;

      var item = (0, _useItem.useItem)();
      return (/*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, _extends({}, otherProps, {
          className: (0, _classnames.default)('collapse', className, {
            show: expandedKeys.has(item.key)
          }),
          classNames: {
            enter: 'collapsing',
            enterActive: 'show',
            enterDone: 'show',
            exit: 'show',
            exitActive: 'collapsing'
          },
          id: item.key,
          in: expandedKeys.has(item.key),
          onEnter: function onEnter(element) {
            return element.setAttribute('style', 'height: 0px');
          },
          onEntered: function onEntered(element) {
            return element.removeAttribute('style');
          },
          onEntering: function onEntering(element) {
            return (0, _shared.setElementFullHeight)(element);
          },
          onExit: function onExit(element) {
            return (0, _shared.setElementFullHeight)(element);
          },
          onExiting: function onExiting(element) {
            return element.setAttribute('style', 'height: 0px');
          },
          timeout: 250,
          unmountOnExit: true
        }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Collection.Collection, {
          as: List,
          items: items
        }, children)))
      );
    }

    TreeViewGroup.displayName = 'ClayTreeViewGroup';
  }
});
//# sourceMappingURL=TreeViewGroup.js.map