"use strict";

Liferay.Loader.define("@my-react-app$clayui/core@3.87.0/lib/tree-view/DragLayer", ['module', 'exports', 'require', '@my-react-app$clayui/shared', 'my-react-app$react', 'my-react-app$react-dnd'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _shared = require("@my-react-app$clayui/shared");

    var _react = _interopRequireWildcard(require("my-react-app$react"));

    var _reactDnd = require("my-react-app$react-dnd");

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {
        return cache.get(obj);
      }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }newObj.default = obj;if (cache) {
        cache.set(obj, newObj);
      }return newObj;
    }

    /**
     * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
     * SPDX-License-Identifier: BSD-3-Clause
     */
    var layerStyles = {
      cursor: 'grabbing',
      height: '100%',
      left: 0,
      pointerEvents: 'none',
      position: 'fixed',
      top: 0,
      width: '100%',
      zIndex: 150
    };

    function getItemStyles(currentOffset, mousePosition, ref) {
      if (!currentOffset || !ref.current) {
        return {
          display: 'none'
        };
      }

      var rect = ref.current.getBoundingClientRect();
      var transform = "translate(".concat(mousePosition[0] + currentOffset.x - rect.width * 0.5, "px, ").concat(currentOffset.y, "px)");
      return {
        WebkitTransform: transform,
        transform: transform
      };
    }

    var DragLayer = function DragLayer(_ref) {
      var itemNameKey = _ref.itemNameKey;
      var elementRef = (0, _react.useRef)(null);

      var _useDragLayer = (0, _reactDnd.useDragLayer)(function (monitor) {
        return {
          currentOffset: monitor.getSourceClientOffset(),
          isDragging: monitor.isDragging(),
          item: monitor.getItem()
        };
      }),
          currentOffset = _useDragLayer.currentOffset,
          isDragging = _useDragLayer.isDragging,
          item = _useDragLayer.item;

      var mousePosition = (0, _shared.useMousePosition)();

      if (!isDragging || item.type !== 'treeViewItem') {
        return null;
      }

      var name = item.item[itemNameKey];
      return (/*#__PURE__*/_react.default.createElement("div", {
          style: layerStyles
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "treeview-dragging",
          ref: elementRef,
          style: getItemStyles(currentOffset, mousePosition, elementRef)
        }, name))
      );
    };

    var _default = DragLayer;
    exports.default = _default;
  }
});
//# sourceMappingURL=DragLayer.js.map