"use strict";

Liferay.Loader.define("@my-react-app$clayui/core@3.87.0/lib/tree-view/context", ['module', 'exports', 'require', 'my-react-app$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TreeViewContext = void 0;
    exports.useAPI = useAPI;
    exports.useTreeViewContext = useTreeViewContext;

    var _react = _interopRequireWildcard(require("my-react-app$react"));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {
        return cache.get(obj);
      }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }newObj.default = obj;if (cache) {
        cache.set(obj, newObj);
      }return newObj;
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    var TreeViewContext = /*#__PURE__*/_react.default.createContext({});

    exports.TreeViewContext = TreeViewContext;

    function useTreeViewContext() {
      return (0, _react.useContext)(TreeViewContext);
    }

    function useAPI() {
      var _useTreeViewContext = useTreeViewContext(),
          cursors = _useTreeViewContext.cursors,
          expandedKeys = _useTreeViewContext.expandedKeys,
          insert = _useTreeViewContext.insert,
          layout = _useTreeViewContext.layout,
          onLoadMore = _useTreeViewContext.onLoadMore,
          selection = _useTreeViewContext.selection,
          toggle = _useTreeViewContext.toggle;

      var loadMore = (0, _react.useCallback)(function (id, item) {
        var willToggle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (!onLoadMore) {
          return;
        }

        var layoutItem = layout.layoutKeys.current.get(id);

        if (!layoutItem) {
          return;
        }

        var cursor = cursors.current.get(id);
        return onLoadMore(item, cursor).then(function (items) {
          if (!items) {
            return;
          }

          if (Array.isArray(items)) {
            insert([].concat(_toConsumableArray(layoutItem.loc), [0]), items);

            if (willToggle) {
              toggle(id);
            }
          } else if (items.items) {
            cursors.current.set(id, items.cursor);
            insert([].concat(_toConsumableArray(layoutItem.loc), [0]), items.items);
          }
        }).catch(function (error) {
          console.error(error);
        });
      }, [toggle, insert]);
      var hasKey = (0, _react.useCallback)(function (key) {
        return selection.selectedKeys.has(key);
      }, [selection.selectedKeys]);
      var hasExpandedKey = (0, _react.useCallback)(function (key) {
        return expandedKeys.has(key);
      }, [expandedKeys]);
      var getCursor = (0, _react.useCallback)(function (key) {
        return cursors.current.get(key);
      }, [cursors]);
      return [{
        has: hasKey,
        toggle: selection.toggleSelection
      }, {
        has: hasExpandedKey,
        toggle: toggle
      }, {
        get: getCursor,
        loadMore: loadMore
      }];
    }
  }
});
//# sourceMappingURL=context.js.map