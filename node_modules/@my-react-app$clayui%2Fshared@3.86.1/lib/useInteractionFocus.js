"use strict";

Liferay.Loader.define("@my-react-app$clayui/shared@3.86.1/lib/useInteractionFocus", ['module', 'exports', 'require', 'my-react-app$react', './platform'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useInteractionFocus = useInteractionFocus;

    var _react = require("my-react-app$react");

    var _platform = require("./platform");

    /**
     * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
     * SPDX-License-Identifier: BSD-3-Clause
     */
    var currentInteraction = null;
    var hasSetupGlobalListeners = false;
    var hasEventBeforeFocus = false;
    var hasBlurredWindowRecently = false;

    function isValidKey(event) {
      // Control and Shift keys trigger when navigating back to the tab with keyboard.
      return !(event.metaKey || !(0, _platform.isMac)() && event.altKey || event.ctrlKey || event.key === 'Control' || event.key === 'Shift' || event.key === 'Meta');
    }

    function isVirtualClick(event) {
      if (event.mozInputSource === 0 && event.isTrusted) {
        return true;
      }

      return event.detail === 0 && !event.pointerType;
    }

    function isFocusVisible() {
      return currentInteraction !== 'pointer';
    }

    function getInteraction() {
      return currentInteraction;
    }
    /**
     * Detects what type of interaction the user is doing with the page, using the
     * keyboard, pointer or using screen reader. This works like a singleton even
     * if it is declared more than once.
     *
     * This is inspired by the implementation:
     * https://github.com/adobe/react-spectrum/blob/d10f20a3f4ca7ffa807fcaceb944274da825a7b9/packages/%40react-aria/interactions/src/useFocusVisible.ts
     */

    function useInteractionFocus() {
      (0, _react.useEffect)(function () {
        if (hasSetupGlobalListeners) {
          return;
        }

        var onKeyboard = function onKeyboard(event) {
          hasEventBeforeFocus = true;

          if (isValidKey(event)) {
            currentInteraction = 'keyboard';
          }
        };

        var onClick = function onClick(event) {
          if (isVirtualClick(event)) {
            hasEventBeforeFocus = true;
            currentInteraction = 'virtual';
          }
        };

        var onFocus = function onFocus(event) {
          if (event.target === window || event.target === document) {
            return;
          }

          if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
            currentInteraction = 'virtual';
          }

          hasEventBeforeFocus = false;
          hasBlurredWindowRecently = false;
        };

        var onBlur = function onBlur() {
          hasEventBeforeFocus = false;
          hasBlurredWindowRecently = true;
        };

        var onPointer = function onPointer(event) {
          currentInteraction = 'pointer';

          if (event.type === 'mousedown' || event.type === 'pointerdown') {
            hasEventBeforeFocus = true;
          }
        };

        document.addEventListener('keydown', onKeyboard, true);
        document.addEventListener('keyup', onKeyboard, true);
        document.addEventListener('click', onClick, true);
        window.addEventListener('focus', onFocus, true);
        window.addEventListener('blur', onBlur, false);

        if (typeof PointerEvent !== 'undefined') {
          document.addEventListener('pointerdown', onPointer, true);
          document.addEventListener('pointermove', onPointer, true);
          document.addEventListener('pointerup', onPointer, true);
        } else {
          document.addEventListener('mousedown', onPointer, true);
          document.addEventListener('mousemove', onPointer, true);
          document.addEventListener('mouseup', onPointer, true);
        }

        hasSetupGlobalListeners = true;
        return function () {
          document.removeEventListener('keydown', onKeyboard, true);
          document.removeEventListener('keyup', onKeyboard, true);
          document.removeEventListener('click', onClick, true);
          window.removeEventListener('focus', onFocus, true);
          window.removeEventListener('blur', onBlur, false);

          if (typeof PointerEvent !== 'undefined') {
            document.removeEventListener('pointerdown', onPointer, true);
            document.removeEventListener('pointermove', onPointer, true);
            document.removeEventListener('pointerup', onPointer, true);
          } else {
            document.removeEventListener('mousedown', onPointer, true);
            document.removeEventListener('mousemove', onPointer, true);
            document.removeEventListener('mouseup', onPointer, true);
          }

          hasSetupGlobalListeners = false;
        };
      }, []);
      return {
        getInteraction: getInteraction,
        isFocusVisible: isFocusVisible
      };
    }
  }
});
//# sourceMappingURL=useInteractionFocus.js.map