{"version":3,"sources":["index.js"],"names":["_fs","require","_","readFile","file","options","callback","encoding","fs","shouldThrow","throws","err","data","stripBom","obj","JSON","parse","reviver","err2","message","readFileSync","content","stringify","spaces","EOL","str","replacer","replace","writeFile","writeFileSync","Buffer","isBuffer","toString","jsonfile","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["var _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\n\nfunction readFile (file, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err)\n\n    data = stripBom(data)\n\n    var obj\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null)\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = file + ': ' + err2.message\n        return callback(err2)\n      } else {\n        return callback(null, null)\n      }\n    }\n\n    callback(null, obj)\n  })\n}\n\nfunction readFileSync (file, options) {\n  options = options || {}\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  try {\n    var content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = file + ': ' + err.message\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nfunction stringify (obj, options) {\n  var spaces\n  var EOL = '\\n'\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces\n    }\n    if (options.EOL) {\n      EOL = options.EOL\n    }\n  }\n\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOL\n}\n\nfunction writeFile (file, obj, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = ''\n  try {\n    str = stringify(obj, options)\n  } catch (err) {\n    // Need to return whether a callback was passed or not\n    if (callback) callback(err, null)\n    return\n  }\n\n  fs.writeFile(file, str, options, callback)\n}\n\nfunction writeFileSync (file, obj, options) {\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  content = content.replace(/^\\uFEFF/, '')\n  return content\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n}\n\nmodule.exports = jsonfile\n"]}