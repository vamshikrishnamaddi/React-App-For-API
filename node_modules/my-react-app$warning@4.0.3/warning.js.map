{"version":3,"sources":["warning.js"],"names":["__DEV__","warning","printWarning","format","args","len","arguments","length","Array","key","argIndex","message","replace","console","error","Error","x","condition","undefined","apply","concat","module","exports"],"mappings":"AAAA;;;;;;;AAOA;;AAEA;;;;;;;;;;;AAOA,QAAIA,cAAJ;;AAEA,QAAIC,UAAU,YAAW,CAAE,CAA3B;;AAGE,QAAIC,eAAe,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AACrD,UAAIC,MAAMC,UAAUC,MAApB;AACAH,aAAO,IAAII,KAAJ,CAAUH,MAAM,CAAN,GAAUA,MAAM,CAAhB,GAAoB,CAA9B,CAAP;AACA,WAAK,IAAII,MAAM,CAAf,EAAkBA,MAAMJ,GAAxB,EAA6BI,KAA7B,EAAoC;AAClCL,aAAKK,MAAM,CAAX,IAAgBH,UAAUG,GAAV,CAAhB;AACD;AACD,UAAIC,WAAW,CAAf;AACA,UAAIC,UAAU,cACZR,OAAOS,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,eAAOR,KAAKM,UAAL,CAAP;AACD,OAFD,CADF;AAIA,UAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,gBAAQC,KAAR,CAAcH,OAAd;AACD;AACD,UAAI;AACF;AACA;AACA;AACA,cAAM,IAAII,KAAJ,CAAUJ,OAAV,CAAN;AACD,OALD,CAKE,OAAOK,CAAP,EAAU,CAAE;AACf,KApBD;;AAsBAf,cAAU,UAASgB,SAAT,EAAoBd,MAApB,EAA4BC,IAA5B,EAAkC;AAC1C,UAAIC,MAAMC,UAAUC,MAApB;AACAH,aAAO,IAAII,KAAJ,CAAUH,MAAM,CAAN,GAAUA,MAAM,CAAhB,GAAoB,CAA9B,CAAP;AACA,WAAK,IAAII,MAAM,CAAf,EAAkBA,MAAMJ,GAAxB,EAA6BI,KAA7B,EAAoC;AAClCL,aAAKK,MAAM,CAAX,IAAgBH,UAAUG,GAAV,CAAhB;AACD;AACD,UAAIN,WAAWe,SAAf,EAA0B;AACxB,cAAM,IAAIH,KAAJ,CACF,8DACA,kBAFE,CAAN;AAID;AACD,UAAI,CAACE,SAAL,EAAgB;AACdf,qBAAaiB,KAAb,CAAmB,IAAnB,EAAyB,CAAChB,MAAD,EAASiB,MAAT,CAAgBhB,IAAhB,CAAzB;AACD;AACF,KAfD;;;AAkBFiB,WAAOC,OAAP,GAAiBrB,OAAjB","file":"warning.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"]}