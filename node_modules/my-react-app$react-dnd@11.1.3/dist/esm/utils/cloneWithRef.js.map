{"version":3,"sources":["cloneWithRef.js"],"names":["cloneElement","invariant","setRef","ref","node","current","cloneWithRef","element","newRef","previousRef"],"mappings":";;;;AAAA,aAASA,YAAT,QAA6B,OAA7B;AACA,aAASC,SAAT,QAA0B,sBAA1B;;AAEA,aAASC,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACzB,UAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,YAAIC,IAAJ;AACD,OAFD,MAEO;AACLD,YAAIE,OAAJ,GAAcD,IAAd;AACD;AACF;;AAED,WAAO,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AAC5C,UAAIC,cAAcF,QAAQJ,GAA1B;AACAF,gBAAU,OAAOQ,WAAP,KAAuB,QAAjC,EAA2C,yEAAyE,sFAAzE,GAAkK,kGAA7M;;AAEA,UAAI,CAACA,WAAL,EAAkB;AAChB;AACA,eAAOT,aAAaO,OAAb,EAAsB;AAC3BJ,eAAKK;AADsB,SAAtB,CAAP;AAGD,OALD,MAKO;AACL,eAAOR,aAAaO,OAAb,EAAsB;AAC3BJ,eAAK,SAASA,GAAT,CAAaC,IAAb,EAAmB;AACtBF,mBAAOO,WAAP,EAAoBL,IAApB;AACAF,mBAAOM,MAAP,EAAeJ,IAAf;AACD;AAJ0B,SAAtB,CAAP;AAMD;AACF","file":"cloneWithRef.js","sourcesContent":["import { cloneElement } from 'react';\nimport { invariant } from '@react-dnd/invariant';\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else {\n    ref.current = node;\n  }\n}\n\nexport function cloneWithRef(element, newRef) {\n  var previousRef = element.ref;\n  invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return cloneElement(element, {\n      ref: newRef\n    });\n  } else {\n    return cloneElement(element, {\n      ref: function ref(node) {\n        setRef(previousRef, node);\n        setRef(newRef, node);\n      }\n    });\n  }\n}"]}