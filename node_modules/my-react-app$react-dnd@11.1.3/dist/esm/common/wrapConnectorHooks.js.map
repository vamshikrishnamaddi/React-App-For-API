{"version":3,"sources":["wrapConnectorHooks.js"],"names":["isValidElement","cloneWithRef","throwIfCompositeComponentElement","element","type","displayName","name","Error","concat","wrapHookToRecognizeElement","hook","elementOrNode","arguments","length","undefined","options","node","ref","wrapConnectorHooks","hooks","wrappedHooks","Object","keys","forEach","key","endsWith","wrappedHook"],"mappings":";;;;AAAA,aAASA,cAAT,QAA+B,OAA/B;AACA,aAASC,YAAT,QAA6B,uBAA7B;;AAEA,aAASC,gCAAT,CAA0CC,OAA1C,EAAmD;AACjD;AACA;AACA,UAAI,OAAOA,QAAQC,IAAf,KAAwB,QAA5B,EAAsC;AACpC;AACD;;AAED,UAAIC,cAAcF,QAAQC,IAAR,CAAaC,WAAb,IAA4BF,QAAQC,IAAR,CAAaE,IAAzC,IAAiD,eAAnE;AACA,YAAM,IAAIC,KAAJ,CAAU,yEAAyE,uBAAuBC,MAAvB,CAA8BH,WAA9B,EAA2C,mCAA3C,CAAzE,GAA2J,sCAArK,CAAN;AACD;;AAED,aAASI,0BAAT,CAAoCC,IAApC,EAA0C;AACxC,aAAO,YAAY;AACjB,YAAIC,gBAAgBC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,IAAxF;AACA,YAAIG,UAAUH,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,IAAlF;;AAEA;AACA,YAAI,CAACZ,eAAeW,aAAf,CAAL,EAAoC;AAClC,cAAIK,OAAOL,aAAX;AACAD,eAAKM,IAAL,EAAWD,OAAX,EAFkC,CAEb;AACrB;;AAEA,iBAAOC,IAAP;AACD,SAXgB,CAWf;AACF;AACA;;;AAGA,YAAIb,UAAUQ,aAAd;AACAT,yCAAiCC,OAAjC,EAjBiB,CAiB0B;;AAE3C,YAAIc,MAAMF,UAAU,UAAUC,IAAV,EAAgB;AAClC,iBAAON,KAAKM,IAAL,EAAWD,OAAX,CAAP;AACD,SAFS,GAENL,IAFJ;AAGA,eAAOT,aAAaE,OAAb,EAAsBc,GAAtB,CAAP;AACD,OAvBD;AAwBD;;AAED,WAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,UAAIC,eAAe,EAAnB;AACAC,aAAOC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAAUC,GAAV,EAAe;AACxC,YAAId,OAAOS,MAAMK,GAAN,CAAX,CADwC,CACjB;;AAEvB,YAAIA,IAAIC,QAAJ,CAAa,KAAb,CAAJ,EAAyB;AACvBL,uBAAaI,GAAb,IAAoBL,MAAMK,GAAN,CAApB;AACD,SAFD,MAEO;AACL,cAAIE,cAAcjB,2BAA2BC,IAA3B,CAAlB;;AAEAU,uBAAaI,GAAb,IAAoB,YAAY;AAC9B,mBAAOE,WAAP;AACD,WAFD;AAGD;AACF,OAZD;AAaA,aAAON,YAAP;AACD","file":"wrapConnectorHooks.js","sourcesContent":["import { isValidElement } from 'react';\nimport { cloneWithRef } from '../utils/cloneWithRef';\n\nfunction throwIfCompositeComponentElement(element) {\n  // Custom components can no longer be wrapped directly in React DnD 2.0\n  // so that we don't need to depend on findDOMNode() from react-dom.\n  if (typeof element.type === 'string') {\n    return;\n  }\n\n  var displayName = element.type.displayName || element.type.name || 'the component';\n  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + \"You can either wrap \".concat(displayName, \" into a <div>, or turn it into a \") + 'drag source or a drop target itself.');\n}\n\nfunction wrapHookToRecognizeElement(hook) {\n  return function () {\n    var elementOrNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    // When passed a node, call the hook straight away.\n    if (!isValidElement(elementOrNode)) {\n      var node = elementOrNode;\n      hook(node, options); // return the node so it can be chained (e.g. when within callback refs\n      // <div ref={node => connectDragSource(connectDropTarget(node))}/>\n\n      return node;\n    } // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n\n\n    var element = elementOrNode;\n    throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly\n\n    var ref = options ? function (node) {\n      return hook(node, options);\n    } : hook;\n    return cloneWithRef(element, ref);\n  };\n}\n\nexport function wrapConnectorHooks(hooks) {\n  var wrappedHooks = {};\n  Object.keys(hooks).forEach(function (key) {\n    var hook = hooks[key]; // ref objects should be passed straight through without wrapping\n\n    if (key.endsWith('Ref')) {\n      wrappedHooks[key] = hooks[key];\n    } else {\n      var wrappedHook = wrapHookToRecognizeElement(hook);\n\n      wrappedHooks[key] = function () {\n        return wrappedHook;\n      };\n    }\n  });\n  return wrappedHooks;\n}"]}