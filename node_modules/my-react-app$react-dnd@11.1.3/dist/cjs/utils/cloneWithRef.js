"use strict";

Liferay.Loader.define("my-react-app$react-dnd@11.1.3/dist/cjs/utils/cloneWithRef", ['module', 'exports', 'require', 'my-react-app$react', '@my-react-app$react-dnd/invariant'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.cloneWithRef = cloneWithRef;

    var _react = require("my-react-app$react");

    var _invariant = require("@my-react-app$react-dnd/invariant");

    function setRef(ref, node) {
      if (typeof ref === 'function') {
        ref(node);
      } else {
        ref.current = node;
      }
    }

    function cloneWithRef(element, newRef) {
      var previousRef = element.ref;
      (0, _invariant.invariant)(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');

      if (!previousRef) {
        // When there is no ref on the element, use the new ref directly
        return (0, _react.cloneElement)(element, {
          ref: newRef
        });
      } else {
        return (0, _react.cloneElement)(element, {
          ref: function ref(node) {
            setRef(previousRef, node);
            setRef(newRef, node);
          }
        });
      }
    }
  }
});
//# sourceMappingURL=cloneWithRef.js.map