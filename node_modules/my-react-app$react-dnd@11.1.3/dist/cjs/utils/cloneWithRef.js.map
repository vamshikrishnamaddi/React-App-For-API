{"version":3,"sources":["cloneWithRef.js"],"names":["Object","defineProperty","exports","value","cloneWithRef","_react","require","_invariant","setRef","ref","node","current","element","newRef","previousRef","invariant","cloneElement"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,YAAR,GAAuBA,YAAvB;;AAEA,QAAIC,SAASC,QAAQ,oBAAR,CAAb;;AAEA,QAAIC,aAAaD,QAAQ,mCAAR,CAAjB;;AAEA,aAASE,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACzB,UAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,YAAIC,IAAJ;AACD,OAFD,MAEO;AACLD,YAAIE,OAAJ,GAAcD,IAAd;AACD;AACF;;AAED,aAASN,YAAT,CAAsBQ,OAAtB,EAA+BC,MAA/B,EAAuC;AACrC,UAAIC,cAAcF,QAAQH,GAA1B;AACA,OAAC,GAAGF,WAAWQ,SAAf,EAA0B,OAAOD,WAAP,KAAuB,QAAjD,EAA2D,yEAAyE,sFAAzE,GAAkK,kGAA7N;;AAEA,UAAI,CAACA,WAAL,EAAkB;AAChB;AACA,eAAO,CAAC,GAAGT,OAAOW,YAAX,EAAyBJ,OAAzB,EAAkC;AACvCH,eAAKI;AADkC,SAAlC,CAAP;AAGD,OALD,MAKO;AACL,eAAO,CAAC,GAAGR,OAAOW,YAAX,EAAyBJ,OAAzB,EAAkC;AACvCH,eAAK,SAASA,GAAT,CAAaC,IAAb,EAAmB;AACtBF,mBAAOM,WAAP,EAAoBJ,IAApB;AACAF,mBAAOK,MAAP,EAAeH,IAAf;AACD;AAJsC,SAAlC,CAAP;AAMD;AACF","file":"cloneWithRef.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneWithRef = cloneWithRef;\n\nvar _react = require(\"react\");\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else {\n    ref.current = node;\n  }\n}\n\nfunction cloneWithRef(element, newRef) {\n  var previousRef = element.ref;\n  (0, _invariant.invariant)(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n\n  if (!previousRef) {\n    // When there is no ref on the element, use the new ref directly\n    return (0, _react.cloneElement)(element, {\n      ref: newRef\n    });\n  } else {\n    return (0, _react.cloneElement)(element, {\n      ref: function ref(node) {\n        setRef(previousRef, node);\n        setRef(newRef, node);\n      }\n    });\n  }\n}"]}