{"version":3,"sources":["drag.js"],"names":["useMemo","invariant","registerSource","useDragDropManager","DragSourceMonitorImpl","SourceConnector","useIsomorphicLayoutEffect","useDragSourceMonitor","manager","monitor","connector","getBackend","useDragHandler","spec","handler","beginDrag","begin","item","current","beginResult","canDrag","isDragging","globalMonitor","target","getSourceId","endDrag","end","getItem","reconnect","registerHandler","handlerId","unregister","type","receiveHandlerId"],"mappings":";;;;AAAA,iBAASA,OAAT,QAAwB,OAAxB;AACA,iBAASC,SAAT,QAA0B,sBAA1B;AACA,iBAASC,cAAT,QAA+B,2BAA/B;AACA,iBAASC,kBAAT,QAAmC,uBAAnC;AACA,iBAASC,qBAAT,QAAsC,oCAAtC;AACA,iBAASC,eAAT,QAAgC,8BAAhC;AACA,iBAASC,yBAAT,QAA0C,6BAA1C;AACA,eAAO,SAASC,oBAAT,GAAgC;AACnC,kBAAMC,UAAUL,oBAAhB;AACA,kBAAMM,UAAUT,QAAQ,MAAM,IAAII,qBAAJ,CAA0BI,OAA1B,CAAd,EAAkD,CAACA,OAAD,CAAlD,CAAhB;AACA,kBAAME,YAAYV,QAAQ,MAAM,IAAIK,eAAJ,CAAoBG,QAAQG,UAAR,EAApB,CAAd,EAAyD,CACvEH,OADuE,CAAzD,CAAlB;AAGA,mBAAO,CAACC,OAAD,EAAUC,SAAV,CAAP;AACH;AACD,eAAO,SAASE,cAAT,CAAwBC,IAAxB,EAA8BJ,OAA9B,EAAuCC,SAAvC,EAAkD;AACrD,kBAAMF,UAAUL,oBAAhB;AACA,kBAAMW,UAAUd,QAAQ,MAAM;AAC1B,uBAAO;AACHe,gCAAY;AACR,8BAAM,EAAEC,KAAF,EAASC,IAAT,KAAkBJ,KAAKK,OAA7B;AACA,4BAAIF,KAAJ,EAAW;AACP,kCAAMG,cAAcH,MAAMP,OAAN,CAApB;AACAR,sCAAUkB,eAAe,IAAf,IAAuB,OAAOA,WAAP,KAAuB,QAAxD,EAAkE,mEAAlE;AACA,mCAAOA,eAAeF,IAAf,IAAuB,EAA9B;AACH;AACD,+BAAOA,QAAQ,EAAf;AACH,qBATE;AAUHG,8BAAU;AACN,4BAAI,OAAOP,KAAKK,OAAL,CAAaE,OAApB,KAAgC,SAApC,EAA+C;AAC3C,mCAAOP,KAAKK,OAAL,CAAaE,OAApB;AACH,yBAFD,MAGK,IAAI,OAAOP,KAAKK,OAAL,CAAaE,OAApB,KAAgC,UAApC,EAAgD;AACjD,mCAAOP,KAAKK,OAAL,CAAaE,OAAb,CAAqBX,OAArB,CAAP;AACH,yBAFI,MAGA;AACD,mCAAO,IAAP;AACH;AACJ,qBApBE;AAqBHY,+BAAWC,aAAX,EAA0BC,MAA1B,EAAkC;AAC9B,8BAAM,EAAEF,UAAF,KAAiBR,KAAKK,OAA5B;AACA,+BAAOG,aACDA,WAAWZ,OAAX,CADC,GAEDc,WAAWD,cAAcE,WAAd,EAFjB;AAGH,qBA1BE;AA2BHC,8BAAU;AACN,8BAAM,EAAEC,GAAF,KAAUb,KAAKK,OAArB;AACA,4BAAIQ,GAAJ,EAAS;AACLA,gCAAIjB,QAAQkB,OAAR,EAAJ,EAAuBlB,OAAvB;AACH;AACDC,kCAAUkB,SAAV;AACH;AAjCE,iBAAP;AAmCH,aApCe,EAoCb,EApCa,CAAhB;AAqCAtB,sCAA0B,SAASuB,eAAT,GAA2B;AACjD,sBAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0B7B,eAAeW,KAAKK,OAAL,CAAaD,IAAb,CAAkBe,IAAjC,EAAuClB,OAAvC,EAAgDN,OAAhD,CAAhC;AACAC,wBAAQwB,gBAAR,CAAyBH,SAAzB;AACApB,0BAAUuB,gBAAV,CAA2BH,SAA3B;AACA,uBAAOC,UAAP;AACH,aALD,EAKG,EALH;AAMH","file":"drag.js","sourcesContent":["import { useMemo } from 'react';\nimport { invariant } from '@react-dnd/invariant';\nimport { registerSource } from '../../common/registration';\nimport { useDragDropManager } from '../useDragDropManager';\nimport { DragSourceMonitorImpl } from '../../common/DragSourceMonitorImpl';\nimport { SourceConnector } from '../../common/SourceConnector';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nexport function useDragSourceMonitor() {\n    const manager = useDragDropManager();\n    const monitor = useMemo(() => new DragSourceMonitorImpl(manager), [manager]);\n    const connector = useMemo(() => new SourceConnector(manager.getBackend()), [\n        manager,\n    ]);\n    return [monitor, connector];\n}\nexport function useDragHandler(spec, monitor, connector) {\n    const manager = useDragDropManager();\n    const handler = useMemo(() => {\n        return {\n            beginDrag() {\n                const { begin, item } = spec.current;\n                if (begin) {\n                    const beginResult = begin(monitor);\n                    invariant(beginResult == null || typeof beginResult === 'object', 'dragSpec.begin() must either return an object, undefined, or null');\n                    return beginResult || item || {};\n                }\n                return item || {};\n            },\n            canDrag() {\n                if (typeof spec.current.canDrag === 'boolean') {\n                    return spec.current.canDrag;\n                }\n                else if (typeof spec.current.canDrag === 'function') {\n                    return spec.current.canDrag(monitor);\n                }\n                else {\n                    return true;\n                }\n            },\n            isDragging(globalMonitor, target) {\n                const { isDragging } = spec.current;\n                return isDragging\n                    ? isDragging(monitor)\n                    : target === globalMonitor.getSourceId();\n            },\n            endDrag() {\n                const { end } = spec.current;\n                if (end) {\n                    end(monitor.getItem(), monitor);\n                }\n                connector.reconnect();\n            },\n        };\n    }, []);\n    useIsomorphicLayoutEffect(function registerHandler() {\n        const [handlerId, unregister] = registerSource(spec.current.item.type, handler, manager);\n        monitor.receiveHandlerId(handlerId);\n        connector.receiveHandlerId(handlerId);\n        return unregister;\n    }, []);\n}\n"]}