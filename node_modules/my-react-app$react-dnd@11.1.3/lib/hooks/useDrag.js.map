{"version":3,"sources":["useDrag.js"],"names":["useRef","useMemo","invariant","useMonitorOutput","useIsomorphicLayoutEffect","useDragSourceMonitor","useDragHandler","useDrag","spec","specRef","current","item","type","monitor","connector","result","collect","reconnect","connectDragSource","hooks","dragSource","connectDragPreview","dragPreview","dragSourceOptions","options","dragPreviewOptions","previewOptions"],"mappings":";;;;AAAA,iBAASA,MAAT,EAAiBC,OAAjB,QAAgC,OAAhC;AACA,iBAASC,SAAT,QAA0B,sBAA1B;AACA,iBAASC,gBAAT,QAAiC,6BAAjC;AACA,iBAASC,yBAAT,QAA0C,sCAA1C;AACA,iBAASC,oBAAT,EAA+BC,cAA/B,QAAqD,iBAArD;AACA;;;;AAIA,eAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAC1B,kBAAMC,UAAUT,OAAOQ,IAAP,CAAhB;AACAC,oBAAQC,OAAR,GAAkBF,IAAlB;AACA;AACAN,sBAAUM,KAAKG,IAAL,IAAa,IAAvB,EAA6B,sBAA7B;AACAT,sBAAUM,KAAKG,IAAL,CAAUC,IAAV,IAAkB,IAA5B,EAAkC,2BAAlC;AACA,kBAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBT,sBAA7B;AACAC,2BAAeG,OAAf,EAAwBI,OAAxB,EAAiCC,SAAjC;AACA,kBAAMC,SAASZ,iBAAiBU,OAAjB,EAA0BJ,QAAQC,OAAR,CAAgBM,OAAhB,KAA4B,OAAO,EAAP,CAA5B,CAA1B,EAAmE,MAAMF,UAAUG,SAAV,EAAzE,CAAf;AACA,kBAAMC,oBAAoBjB,QAAQ,MAAMa,UAAUK,KAAV,CAAgBC,UAAhB,EAAd,EAA4C,CAClEN,SADkE,CAA5C,CAA1B;AAGA,kBAAMO,qBAAqBpB,QAAQ,MAAMa,UAAUK,KAAV,CAAgBG,WAAhB,EAAd,EAA6C,CACpER,SADoE,CAA7C,CAA3B;AAGAV,sCAA0B,MAAM;AAC5BU,0BAAUS,iBAAV,GAA8Bd,QAAQC,OAAR,CAAgBc,OAAhB,IAA2B,IAAzD;AACAV,0BAAUG,SAAV;AACH,aAHD,EAGG,CAACH,SAAD,CAHH;AAIAV,sCAA0B,MAAM;AAC5BU,0BAAUW,kBAAV,GAA+BhB,QAAQC,OAAR,CAAgBgB,cAAhB,IAAkC,IAAjE;AACAZ,0BAAUG,SAAV;AACH,aAHD,EAGG,CAACH,SAAD,CAHH;AAIA,mBAAO,CAACC,MAAD,EAASG,iBAAT,EAA4BG,kBAA5B,CAAP;AACH","file":"useDrag.js","sourcesContent":["import { useRef, useMemo } from 'react';\nimport { invariant } from '@react-dnd/invariant';\nimport { useMonitorOutput } from './internal/useMonitorOutput';\nimport { useIsomorphicLayoutEffect } from './internal/useIsomorphicLayoutEffect';\nimport { useDragSourceMonitor, useDragHandler } from './internal/drag';\n/**\n * useDragSource hook\n * @param sourceSpec The drag source specification *\n */\nexport function useDrag(spec) {\n    const specRef = useRef(spec);\n    specRef.current = spec;\n    // TODO: wire options into createSourceConnector\n    invariant(spec.item != null, 'item must be defined');\n    invariant(spec.item.type != null, 'item type must be defined');\n    const [monitor, connector] = useDragSourceMonitor();\n    useDragHandler(specRef, monitor, connector);\n    const result = useMonitorOutput(monitor, specRef.current.collect || (() => ({})), () => connector.reconnect());\n    const connectDragSource = useMemo(() => connector.hooks.dragSource(), [\n        connector,\n    ]);\n    const connectDragPreview = useMemo(() => connector.hooks.dragPreview(), [\n        connector,\n    ]);\n    useIsomorphicLayoutEffect(() => {\n        connector.dragSourceOptions = specRef.current.options || null;\n        connector.reconnect();\n    }, [connector]);\n    useIsomorphicLayoutEffect(() => {\n        connector.dragPreviewOptions = specRef.current.previewOptions || null;\n        connector.reconnect();\n    }, [connector]);\n    return [result, connectDragSource, connectDragPreview];\n}\n"]}