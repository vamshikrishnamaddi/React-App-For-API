{"version":3,"sources":["cloneWithRef.js"],"names":["cloneElement","invariant","setRef","ref","node","current","cloneWithRef","element","newRef","previousRef"],"mappings":";;;;AAAA,iBAASA,YAAT,QAA6B,OAA7B;AACA,iBAASC,SAAT,QAA0B,sBAA1B;AACA,iBAASC,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACvB,gBAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC3BA,oBAAIC,IAAJ;AACH,aAFD,MAGK;AACDD,oBAAIE,OAAJ,GAAcD,IAAd;AACH;AACJ;AACD,eAAO,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AAC1C,kBAAMC,cAAcF,QAAQJ,GAA5B;AACAF,sBAAU,OAAOQ,WAAP,KAAuB,QAAjC,EAA2C,yEACvC,sFADuC,GAEvC,kGAFJ;AAGA,gBAAI,CAACA,WAAL,EAAkB;AACd;AACA,uBAAOT,aAAaO,OAAb,EAAsB;AACzBJ,yBAAKK;AADoB,iBAAtB,CAAP;AAGH,aALD,MAMK;AACD,uBAAOR,aAAaO,OAAb,EAAsB;AACzBJ,yBAAMC,IAAD,IAAU;AACXF,+BAAOO,WAAP,EAAoBL,IAApB;AACAF,+BAAOM,MAAP,EAAeJ,IAAf;AACH;AAJwB,iBAAtB,CAAP;AAMH;AACJ","file":"cloneWithRef.js","sourcesContent":["import { cloneElement } from 'react';\nimport { invariant } from '@react-dnd/invariant';\nfunction setRef(ref, node) {\n    if (typeof ref === 'function') {\n        ref(node);\n    }\n    else {\n        ref.current = node;\n    }\n}\nexport function cloneWithRef(element, newRef) {\n    const previousRef = element.ref;\n    invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' +\n        'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\n        'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    if (!previousRef) {\n        // When there is no ref on the element, use the new ref directly\n        return cloneElement(element, {\n            ref: newRef,\n        });\n    }\n    else {\n        return cloneElement(element, {\n            ref: (node) => {\n                setRef(previousRef, node);\n                setRef(newRef, node);\n            },\n        });\n    }\n}\n"]}