{"version":3,"sources":["DragSourceMonitorImpl.js"],"names":["invariant","isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","constructor","manager","sourceId","internalMonitor","getMonitor","receiveHandlerId","getHandlerId","canDrag","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset"],"mappings":"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","file":"DragSourceMonitorImpl.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\nexport class DragSourceMonitorImpl {\n    constructor(manager) {\n        this.sourceId = null;\n        this.internalMonitor = manager.getMonitor();\n    }\n    receiveHandlerId(sourceId) {\n        this.sourceId = sourceId;\n    }\n    getHandlerId() {\n        return this.sourceId;\n    }\n    canDrag() {\n        invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n            'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n        try {\n            isCallingCanDrag = true;\n            return this.internalMonitor.canDragSource(this.sourceId);\n        }\n        finally {\n            isCallingCanDrag = false;\n        }\n    }\n    isDragging() {\n        if (!this.sourceId) {\n            return false;\n        }\n        invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n            'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n        try {\n            isCallingIsDragging = true;\n            return this.internalMonitor.isDraggingSource(this.sourceId);\n        }\n        finally {\n            isCallingIsDragging = false;\n        }\n    }\n    subscribeToStateChange(listener, options) {\n        return this.internalMonitor.subscribeToStateChange(listener, options);\n    }\n    isDraggingSource(sourceId) {\n        return this.internalMonitor.isDraggingSource(sourceId);\n    }\n    isOverTarget(targetId, options) {\n        return this.internalMonitor.isOverTarget(targetId, options);\n    }\n    getTargetIds() {\n        return this.internalMonitor.getTargetIds();\n    }\n    isSourcePublic() {\n        return this.internalMonitor.isSourcePublic();\n    }\n    getSourceId() {\n        return this.internalMonitor.getSourceId();\n    }\n    subscribeToOffsetChange(listener) {\n        return this.internalMonitor.subscribeToOffsetChange(listener);\n    }\n    canDragSource(sourceId) {\n        return this.internalMonitor.canDragSource(sourceId);\n    }\n    canDropOnTarget(targetId) {\n        return this.internalMonitor.canDropOnTarget(targetId);\n    }\n    getItemType() {\n        return this.internalMonitor.getItemType();\n    }\n    getItem() {\n        return this.internalMonitor.getItem();\n    }\n    getDropResult() {\n        return this.internalMonitor.getDropResult();\n    }\n    didDrop() {\n        return this.internalMonitor.didDrop();\n    }\n    getInitialClientOffset() {\n        return this.internalMonitor.getInitialClientOffset();\n    }\n    getInitialSourceClientOffset() {\n        return this.internalMonitor.getInitialSourceClientOffset();\n    }\n    getSourceClientOffset() {\n        return this.internalMonitor.getSourceClientOffset();\n    }\n    getClientOffset() {\n        return this.internalMonitor.getClientOffset();\n    }\n    getDifferenceFromInitialOffset() {\n        return this.internalMonitor.getDifferenceFromInitialOffset();\n    }\n}\n"]}