{"version":3,"sources":["TargetConnector.js"],"names":["shallowEqual","wrapConnectorHooks","isRef","TargetConnector","constructor","backend","hooks","dropTarget","node","options","clearDropTarget","dropTargetOptions","dropTargetRef","dropTargetNode","reconnect","handlerId","dropTargetOptionsInternal","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","connectTarget","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","unsubscribeDropTarget","connectDropTarget","receiveHandlerId","newHandlerId","undefined","current"],"mappings":";;;;AAAA,iBAASA,YAAT,QAA6B,yBAA7B;AACA,iBAASC,kBAAT,QAAmC,sBAAnC;AACA,iBAASC,KAAT,QAAsB,gBAAtB;AACA,eAAO,MAAMC,eAAN,CAAsB;AACzBC,wBAAYC,OAAZ,EAAqB;AACjB,qBAAKC,KAAL,GAAaL,mBAAmB;AAC5BM,gCAAY,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC3B,6BAAKC,eAAL;AACA,6BAAKC,iBAAL,GAAyBF,OAAzB;AACA,4BAAIP,MAAMM,IAAN,CAAJ,EAAiB;AACb,iCAAKI,aAAL,GAAqBJ,IAArB;AACH,yBAFD,MAGK;AACD,iCAAKK,cAAL,GAAsBL,IAAtB;AACH;AACD,6BAAKM,SAAL;AACH;AAX2B,iBAAnB,CAAb;AAaA,qBAAKC,SAAL,GAAiB,IAAjB;AACA;AACA,qBAAKH,aAAL,GAAqB,IAArB;AACA,qBAAKI,yBAAL,GAAiC,IAAjC;AACA,qBAAKC,sBAAL,GAA8B,IAA9B;AACA,qBAAKC,uBAAL,GAA+B,IAA/B;AACA,qBAAKC,8BAAL,GAAsC,IAAtC;AACA,qBAAKd,OAAL,GAAeA,OAAf;AACH;AACD,gBAAIe,aAAJ,GAAoB;AAChB,uBAAO,KAAKb,UAAZ;AACH;AACDO,wBAAY;AACR;AACA,sBAAMO,YAAY,KAAKC,kBAAL,MACd,KAAKC,mBAAL,EADc,IAEd,KAAKC,gBAAL,EAFJ;AAGA,oBAAIH,SAAJ,EAAe;AACX,yBAAKI,oBAAL;AACH;AACD,sBAAMlB,aAAa,KAAKA,UAAxB;AACA,oBAAI,CAAC,KAAKQ,SAAV,EAAqB;AACjB;AACH;AACD,oBAAI,CAACR,UAAL,EAAiB;AACb,yBAAKW,uBAAL,GAA+BX,UAA/B;AACA;AACH;AACD,oBAAIc,SAAJ,EAAe;AACX,yBAAKJ,sBAAL,GAA8B,KAAKF,SAAnC;AACA,yBAAKG,uBAAL,GAA+BX,UAA/B;AACA,yBAAKY,8BAAL,GAAsC,KAAKR,iBAA3C;AACA,yBAAKe,qBAAL,GAA6B,KAAKrB,OAAL,CAAasB,iBAAb,CAA+B,KAAKZ,SAApC,EAA+CR,UAA/C,EAA2D,KAAKI,iBAAhE,CAA7B;AACH;AACJ;AACDiB,6BAAiBC,YAAjB,EAA+B;AAC3B,oBAAIA,iBAAiB,KAAKd,SAA1B,EAAqC;AACjC;AACH;AACD,qBAAKA,SAAL,GAAiBc,YAAjB;AACA,qBAAKf,SAAL;AACH;AACD,gBAAIH,iBAAJ,GAAwB;AACpB,uBAAO,KAAKK,yBAAZ;AACH;AACD,gBAAIL,iBAAJ,CAAsBF,OAAtB,EAA+B;AAC3B,qBAAKO,yBAAL,GAAiCP,OAAjC;AACH;AACDa,iCAAqB;AACjB,uBAAO,KAAKL,sBAAL,KAAgC,KAAKF,SAA5C;AACH;AACDQ,kCAAsB;AAClB,uBAAO,KAAKL,uBAAL,KAAiC,KAAKX,UAA7C;AACH;AACDiB,+BAAmB;AACf,uBAAO,CAACxB,aAAa,KAAKmB,8BAAlB,EAAkD,KAAKR,iBAAvD,CAAR;AACH;AACDc,mCAAuB;AACnB,oBAAI,KAAKC,qBAAT,EAAgC;AAC5B,yBAAKA,qBAAL;AACA,yBAAKA,qBAAL,GAA6BI,SAA7B;AACH;AACJ;AACD,gBAAIvB,UAAJ,GAAiB;AACb,uBAAQ,KAAKM,cAAL,IAAwB,KAAKD,aAAL,IAAsB,KAAKA,aAAL,CAAmBmB,OAAzE;AACH;AACDrB,8BAAkB;AACd,qBAAKE,aAAL,GAAqB,IAArB;AACA,qBAAKC,cAAL,GAAsB,IAAtB;AACH;AApFwB","file":"TargetConnector.js","sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal';\nimport { wrapConnectorHooks } from './wrapConnectorHooks';\nimport { isRef } from '../utils/isRef';\nexport class TargetConnector {\n    constructor(backend) {\n        this.hooks = wrapConnectorHooks({\n            dropTarget: (node, options) => {\n                this.clearDropTarget();\n                this.dropTargetOptions = options;\n                if (isRef(node)) {\n                    this.dropTargetRef = node;\n                }\n                else {\n                    this.dropTargetNode = node;\n                }\n                this.reconnect();\n            },\n        });\n        this.handlerId = null;\n        // The drop target may either be attached via ref or connect function\n        this.dropTargetRef = null;\n        this.dropTargetOptionsInternal = null;\n        this.lastConnectedHandlerId = null;\n        this.lastConnectedDropTarget = null;\n        this.lastConnectedDropTargetOptions = null;\n        this.backend = backend;\n    }\n    get connectTarget() {\n        return this.dropTarget;\n    }\n    reconnect() {\n        // if nothing has changed then don't resubscribe\n        const didChange = this.didHandlerIdChange() ||\n            this.didDropTargetChange() ||\n            this.didOptionsChange();\n        if (didChange) {\n            this.disconnectDropTarget();\n        }\n        const dropTarget = this.dropTarget;\n        if (!this.handlerId) {\n            return;\n        }\n        if (!dropTarget) {\n            this.lastConnectedDropTarget = dropTarget;\n            return;\n        }\n        if (didChange) {\n            this.lastConnectedHandlerId = this.handlerId;\n            this.lastConnectedDropTarget = dropTarget;\n            this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n            this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n        }\n    }\n    receiveHandlerId(newHandlerId) {\n        if (newHandlerId === this.handlerId) {\n            return;\n        }\n        this.handlerId = newHandlerId;\n        this.reconnect();\n    }\n    get dropTargetOptions() {\n        return this.dropTargetOptionsInternal;\n    }\n    set dropTargetOptions(options) {\n        this.dropTargetOptionsInternal = options;\n    }\n    didHandlerIdChange() {\n        return this.lastConnectedHandlerId !== this.handlerId;\n    }\n    didDropTargetChange() {\n        return this.lastConnectedDropTarget !== this.dropTarget;\n    }\n    didOptionsChange() {\n        return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n    }\n    disconnectDropTarget() {\n        if (this.unsubscribeDropTarget) {\n            this.unsubscribeDropTarget();\n            this.unsubscribeDropTarget = undefined;\n        }\n    }\n    get dropTarget() {\n        return (this.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current));\n    }\n    clearDropTarget() {\n        this.dropTargetRef = null;\n        this.dropTargetNode = null;\n    }\n}\n"]}