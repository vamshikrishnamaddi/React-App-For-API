{"version":3,"sources":["DndProvider.js"],"names":["React","memo","DndContext","createDndContext","refCount","DndProvider","children","props","manager","isGlobalInstance","getDndContextValue","useEffect","context","getGlobalContext","instanceSymbol","createElement","Provider","value","displayName","dragDropManager","createSingletonDndContext","backend","options","debugMode","Symbol","for","ctx","global","window"],"mappings":";;;;;;;;;;;;;;;;AAAA,eAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,iBAASC,IAAT,QAAqB,OAArB;AACA,iBAASC,UAAT,EAAqBC,gBAArB,QAA6C,cAA7C;AACA,YAAIC,WAAW,CAAf;AACA;;;AAGO,cAAMC,cAAcJ,KAAK,QAA4B;AAAA,gBAA3B,EAAEK,QAAF,EAA2B;AAAA,gBAAZC,KAAY;;AACxD,kBAAM,CAACC,OAAD,EAAUC,gBAAV,IAA8BC,mBAAmBH,KAAnB,CAApC,CADwD,CACO;AAC/D;;;;;AAKAP,kBAAMW,SAAN,CAAgB,MAAM;AAClB,oBAAIF,gBAAJ,EAAsB;AAClBL;AACH;AACD,uBAAO,MAAM;AACT,wBAAIK,gBAAJ,EAAsB;AAClBL;AACA,4BAAIA,aAAa,CAAjB,EAAoB;AAChB,kCAAMQ,UAAUC,kBAAhB;AACAD,oCAAQE,cAAR,IAA0B,IAA1B;AACH;AACJ;AACJ,iBARD;AASH,aAbD,EAaG,EAbH;AAcA,mBAAOd,MAAMe,aAAN,CAAoBb,WAAWc,QAA/B,EAAyC,EAAEC,OAAOT,OAAT,EAAzC,EAA6DF,QAA7D,CAAP;AACH,SAtB0B,CAApB;;AAuBPD,oBAAYa,WAAZ,GAA0B,aAA1B;AACA,iBAASR,kBAAT,CAA4BH,KAA5B,EAAmC;AAC/B,gBAAI,aAAaA,KAAjB,EAAwB;AACpB,sBAAMC,UAAU,EAAEW,iBAAiBZ,MAAMC,OAAzB,EAAhB;AACA,uBAAO,CAACA,OAAD,EAAU,KAAV,CAAP;AACH;AACD,kBAAMA,UAAUY,0BAA0Bb,MAAMc,OAAhC,EAAyCd,MAAMK,OAA/C,EAAwDL,MAAMe,OAA9D,EAAuEf,MAAMgB,SAA7E,CAAhB;AACA,kBAAMd,mBAAmB,CAACF,MAAMK,OAAhC;AACA,mBAAO,CAACJ,OAAD,EAAUC,gBAAV,CAAP;AACH;AACD,cAAMK,iBAAiBU,OAAOC,GAAP,CAAW,gCAAX,CAAvB;AACA,iBAASL,yBAAT,CAAmCC,OAAnC,EAA4CT,UAAUC,kBAAtD,EAA0ES,OAA1E,EAAmFC,SAAnF,EAA8F;AAC1F,kBAAMG,MAAMd,OAAZ;AACA,gBAAI,CAACc,IAAIZ,cAAJ,CAAL,EAA0B;AACtBY,oBAAIZ,cAAJ,IAAsBX,iBAAiBkB,OAAjB,EAA0BT,OAA1B,EAAmCU,OAAnC,EAA4CC,SAA5C,CAAtB;AACH;AACD,mBAAOG,IAAIZ,cAAJ,CAAP;AACH;AACD,iBAASD,gBAAT,GAA4B;AACxB,mBAAO,OAAOc,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAhD;AACH","file":"DndProvider.js","sourcesContent":["import * as React from 'react';\nimport { memo } from 'react';\nimport { DndContext, createDndContext } from './DndContext';\nlet refCount = 0;\n/**\n * A React component that provides the React-DnD context\n */\nexport const DndProvider = memo(({ children, ...props }) => {\n    const [manager, isGlobalInstance] = getDndContextValue(props); // memoized from props\n    /**\n     * If the global context was used to store the DND context\n     * then where theres no more references to it we should\n     * clean it up to avoid memory leaks\n     */\n    React.useEffect(() => {\n        if (isGlobalInstance) {\n            refCount++;\n        }\n        return () => {\n            if (isGlobalInstance) {\n                refCount--;\n                if (refCount === 0) {\n                    const context = getGlobalContext();\n                    context[instanceSymbol] = null;\n                }\n            }\n        };\n    }, []);\n    return React.createElement(DndContext.Provider, { value: manager }, children);\n});\nDndProvider.displayName = 'DndProvider';\nfunction getDndContextValue(props) {\n    if ('manager' in props) {\n        const manager = { dragDropManager: props.manager };\n        return [manager, false];\n    }\n    const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);\n    const isGlobalInstance = !props.context;\n    return [manager, isGlobalInstance];\n}\nconst instanceSymbol = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');\nfunction createSingletonDndContext(backend, context = getGlobalContext(), options, debugMode) {\n    const ctx = context;\n    if (!ctx[instanceSymbol]) {\n        ctx[instanceSymbol] = createDndContext(backend, context, options, debugMode);\n    }\n    return ctx[instanceSymbol];\n}\nfunction getGlobalContext() {\n    return typeof global !== 'undefined' ? global : window;\n}\n"]}