{"version":3,"sources":["SourceConnector.js"],"names":["wrapConnectorHooks","isRef","shallowEqual","SourceConnector","constructor","backend","hooks","dragSource","node","options","clearDragSource","dragSourceOptions","dragSourceRef","dragSourceNode","reconnectDragSource","dragPreview","clearDragPreview","dragPreviewOptions","dragPreviewRef","dragPreviewNode","reconnectDragPreview","handlerId","dragSourceOptionsInternal","dragPreviewOptionsInternal","lastConnectedHandlerId","lastConnectedDragSource","lastConnectedDragSourceOptions","lastConnectedDragPreview","lastConnectedDragPreviewOptions","receiveHandlerId","newHandlerId","reconnect","connectTarget","didChange","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","dragSourceUnsubscribe","connectDragSource","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","dragPreviewUnsubscribe","connectDragPreview","undefined","current"],"mappings":"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","file":"SourceConnector.js","sourcesContent":["import { wrapConnectorHooks } from './wrapConnectorHooks';\nimport { isRef } from '../utils/isRef';\nimport { shallowEqual } from '@react-dnd/shallowequal';\nexport class SourceConnector {\n    constructor(backend) {\n        this.hooks = wrapConnectorHooks({\n            dragSource: (node, options) => {\n                this.clearDragSource();\n                this.dragSourceOptions = options || null;\n                if (isRef(node)) {\n                    this.dragSourceRef = node;\n                }\n                else {\n                    this.dragSourceNode = node;\n                }\n                this.reconnectDragSource();\n            },\n            dragPreview: (node, options) => {\n                this.clearDragPreview();\n                this.dragPreviewOptions = options || null;\n                if (isRef(node)) {\n                    this.dragPreviewRef = node;\n                }\n                else {\n                    this.dragPreviewNode = node;\n                }\n                this.reconnectDragPreview();\n            },\n        });\n        this.handlerId = null;\n        // The drop target may either be attached via ref or connect function\n        this.dragSourceRef = null;\n        this.dragSourceOptionsInternal = null;\n        // The drag preview may either be attached via ref or connect function\n        this.dragPreviewRef = null;\n        this.dragPreviewOptionsInternal = null;\n        this.lastConnectedHandlerId = null;\n        this.lastConnectedDragSource = null;\n        this.lastConnectedDragSourceOptions = null;\n        this.lastConnectedDragPreview = null;\n        this.lastConnectedDragPreviewOptions = null;\n        this.backend = backend;\n    }\n    receiveHandlerId(newHandlerId) {\n        if (this.handlerId === newHandlerId) {\n            return;\n        }\n        this.handlerId = newHandlerId;\n        this.reconnect();\n    }\n    get connectTarget() {\n        return this.dragSource;\n    }\n    get dragSourceOptions() {\n        return this.dragSourceOptionsInternal;\n    }\n    set dragSourceOptions(options) {\n        this.dragSourceOptionsInternal = options;\n    }\n    get dragPreviewOptions() {\n        return this.dragPreviewOptionsInternal;\n    }\n    set dragPreviewOptions(options) {\n        this.dragPreviewOptionsInternal = options;\n    }\n    reconnect() {\n        this.reconnectDragSource();\n        this.reconnectDragPreview();\n    }\n    reconnectDragSource() {\n        const dragSource = this.dragSource;\n        // if nothing has changed then don't resubscribe\n        const didChange = this.didHandlerIdChange() ||\n            this.didConnectedDragSourceChange() ||\n            this.didDragSourceOptionsChange();\n        if (didChange) {\n            this.disconnectDragSource();\n        }\n        if (!this.handlerId) {\n            return;\n        }\n        if (!dragSource) {\n            this.lastConnectedDragSource = dragSource;\n            return;\n        }\n        if (didChange) {\n            this.lastConnectedHandlerId = this.handlerId;\n            this.lastConnectedDragSource = dragSource;\n            this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n            this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n        }\n    }\n    reconnectDragPreview() {\n        const dragPreview = this.dragPreview;\n        // if nothing has changed then don't resubscribe\n        const didChange = this.didHandlerIdChange() ||\n            this.didConnectedDragPreviewChange() ||\n            this.didDragPreviewOptionsChange();\n        if (didChange) {\n            this.disconnectDragPreview();\n        }\n        if (!this.handlerId) {\n            return;\n        }\n        if (!dragPreview) {\n            this.lastConnectedDragPreview = dragPreview;\n            return;\n        }\n        if (didChange) {\n            this.lastConnectedHandlerId = this.handlerId;\n            this.lastConnectedDragPreview = dragPreview;\n            this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n            this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n        }\n    }\n    didHandlerIdChange() {\n        return this.lastConnectedHandlerId !== this.handlerId;\n    }\n    didConnectedDragSourceChange() {\n        return this.lastConnectedDragSource !== this.dragSource;\n    }\n    didConnectedDragPreviewChange() {\n        return this.lastConnectedDragPreview !== this.dragPreview;\n    }\n    didDragSourceOptionsChange() {\n        return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n    }\n    didDragPreviewOptionsChange() {\n        return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n    }\n    disconnectDragSource() {\n        if (this.dragSourceUnsubscribe) {\n            this.dragSourceUnsubscribe();\n            this.dragSourceUnsubscribe = undefined;\n        }\n    }\n    disconnectDragPreview() {\n        if (this.dragPreviewUnsubscribe) {\n            this.dragPreviewUnsubscribe();\n            this.dragPreviewUnsubscribe = undefined;\n            this.dragPreviewNode = null;\n            this.dragPreviewRef = null;\n        }\n    }\n    get dragSource() {\n        return (this.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current));\n    }\n    get dragPreview() {\n        return (this.dragPreviewNode ||\n            (this.dragPreviewRef && this.dragPreviewRef.current));\n    }\n    clearDragSource() {\n        this.dragSourceNode = null;\n        this.dragSourceRef = null;\n    }\n    clearDragPreview() {\n        this.dragPreviewNode = null;\n        this.dragPreviewRef = null;\n    }\n}\n"]}