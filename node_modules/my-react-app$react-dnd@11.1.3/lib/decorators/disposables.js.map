{"version":3,"sources":["disposables.js"],"names":["isFunction","noop","Disposable","constructor","action","isDisposed","isDisposable","d","Boolean","dispose","_fixup","result","empty","create","CompositeDisposable","disposables","add","item","push","remove","shouldDispose","idx","indexOf","splice","clear","len","length","currentDisposables","Array","i","SerialDisposable","getDisposable","current","setDisposable","value","old","undefined"],"mappings":";;;;AAAA,iBAASA,UAAT,EAAqBC,IAArB,QAAiC,mBAAjC;AACA;;;;;AAKA,YAAIC,aAAa,aAAc,CAAC,MAAM;AAClC,kBAAMA,UAAN,CAAiB;AACbC,4BAAYC,MAAZ,EAAoB;AAChB,yBAAKC,UAAL,GAAkB,KAAlB;AACA,yBAAKD,MAAL,GAAcJ,WAAWI,MAAX,IAAqBA,MAArB,GAA8BH,IAA5C;AACH;AACD;;;;;AAKA,uBAAOK,YAAP,CAAoBC,CAApB,EAAuB;AACnB,2BAAOC,QAAQD,KAAKP,WAAWO,EAAEE,OAAb,CAAb,CAAP;AACH;AACD,uBAAOC,MAAP,CAAcC,MAAd,EAAsB;AAClB,2BAAOT,WAAWI,YAAX,CAAwBK,MAAxB,IAAkCA,MAAlC,GAA2CT,WAAWU,KAA7D;AACH;AACD;;;;;;AAMA,uBAAOC,MAAP,CAAcT,MAAd,EAAsB;AAClB,2BAAO,IAAIF,UAAJ,CAAeE,MAAf,CAAP;AACH;AACD;AACAK,0BAAU;AACN,wBAAI,CAAC,KAAKJ,UAAV,EAAsB;AAClB,6BAAKD,MAAL;AACA,6BAAKC,UAAL,GAAkB,IAAlB;AACH;AACJ;AA/BY;AAiCjB;;;AAGAH,uBAAWU,KAAX,GAAmB,EAAEH,SAASR,IAAX,EAAnB;AACA,mBAAOC,UAAP;AACH,SAvC8B,GAA/B;AAwCA,iBAASA,UAAT;AACA;;;;AAIA,eAAO,MAAMY,mBAAN,CAA0B;AAC7BX,wBAAY,GAAGY,WAAf,EAA4B;AACxB,qBAAKV,UAAL,GAAkB,KAAlB;AACA,qBAAKU,WAAL,GAAmBA,WAAnB;AACH;AACD;;;;AAIAC,gBAAIC,IAAJ,EAAU;AACN,oBAAI,KAAKZ,UAAT,EAAqB;AACjBY,yBAAKR,OAAL;AACH,iBAFD,MAGK;AACD,yBAAKM,WAAL,CAAiBG,IAAjB,CAAsBD,IAAtB;AACH;AACJ;AACD;;;;;AAKAE,mBAAOF,IAAP,EAAa;AACT,oBAAIG,gBAAgB,KAApB;AACA,oBAAI,CAAC,KAAKf,UAAV,EAAsB;AAClB,0BAAMgB,MAAM,KAAKN,WAAL,CAAiBO,OAAjB,CAAyBL,IAAzB,CAAZ;AACA,wBAAII,QAAQ,CAAC,CAAb,EAAgB;AACZD,wCAAgB,IAAhB;AACA,6BAAKL,WAAL,CAAiBQ,MAAjB,CAAwBF,GAAxB,EAA6B,CAA7B;AACAJ,6BAAKR,OAAL;AACH;AACJ;AACD,uBAAOW,aAAP;AACH;AACD;;;;AAIAI,oBAAQ;AACJ,oBAAI,CAAC,KAAKnB,UAAV,EAAsB;AAClB,0BAAMoB,MAAM,KAAKV,WAAL,CAAiBW,MAA7B;AACA,0BAAMC,qBAAqB,IAAIC,KAAJ,CAAUH,GAAV,CAA3B;AACA,yBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC1BF,2CAAmBE,CAAnB,IAAwB,KAAKd,WAAL,CAAiBc,CAAjB,CAAxB;AACH;AACD,yBAAKd,WAAL,GAAmB,EAAnB;AACA,yBAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC1BF,2CAAmBE,CAAnB,EAAsBpB,OAAtB;AACH;AACJ;AACJ;AACD;;;AAGAA,sBAAU;AACN,oBAAI,CAAC,KAAKJ,UAAV,EAAsB;AAClB,yBAAKA,UAAL,GAAkB,IAAlB;AACA,0BAAMoB,MAAM,KAAKV,WAAL,CAAiBW,MAA7B;AACA,0BAAMC,qBAAqB,IAAIC,KAAJ,CAAUH,GAAV,CAA3B;AACA,yBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC1BF,2CAAmBE,CAAnB,IAAwB,KAAKd,WAAL,CAAiBc,CAAjB,CAAxB;AACH;AACD,yBAAKd,WAAL,GAAmB,EAAnB;AACA,yBAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC1BF,2CAAmBE,CAAnB,EAAsBpB,OAAtB;AACH;AACJ;AACJ;AAnE4B;AAqEjC;;;;;AAKA,eAAO,MAAMqB,gBAAN,CAAuB;AAC1B3B,0BAAc;AACV,qBAAKE,UAAL,GAAkB,KAAlB;AACH;AACD;;;;AAIA0B,4BAAgB;AACZ,uBAAO,KAAKC,OAAZ;AACH;AACDC,0BAAcC,KAAd,EAAqB;AACjB,sBAAMd,gBAAgB,KAAKf,UAA3B;AACA,oBAAI,CAACe,aAAL,EAAoB;AAChB,0BAAMe,MAAM,KAAKH,OAAjB;AACA,yBAAKA,OAAL,GAAeE,KAAf;AACA,wBAAIC,GAAJ,EAAS;AACLA,4BAAI1B,OAAJ;AACH;AACJ;AACD,oBAAIW,iBAAiBc,KAArB,EAA4B;AACxBA,0BAAMzB,OAAN;AACH;AACJ;AACD;AACAA,sBAAU;AACN,oBAAI,CAAC,KAAKJ,UAAV,EAAsB;AAClB,yBAAKA,UAAL,GAAkB,IAAlB;AACA,0BAAM8B,MAAM,KAAKH,OAAjB;AACA,yBAAKA,OAAL,GAAeI,SAAf;AACA,wBAAID,GAAJ,EAAS;AACLA,4BAAI1B,OAAJ;AACH;AACJ;AACJ;AAlCyB","file":"disposables.js","sourcesContent":["import { isFunction, noop } from '../utils/js_utils';\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\nlet Disposable = /** @class */ (() => {\n    class Disposable {\n        constructor(action) {\n            this.isDisposed = false;\n            this.action = isFunction(action) ? action : noop;\n        }\n        /**\n         * Validates whether the given object is a disposable\n         * @param {Object} Object to test whether it has a dispose method\n         * @returns {Boolean} true if a disposable object, else false.\n         */\n        static isDisposable(d) {\n            return Boolean(d && isFunction(d.dispose));\n        }\n        static _fixup(result) {\n            return Disposable.isDisposable(result) ? result : Disposable.empty;\n        }\n        /**\n         * Creates a disposable object that invokes the specified action when disposed.\n         * @param {Function} dispose Action to run during the first call to dispose.\n         * The action is guaranteed to be run at most once.\n         * @return {Disposable} The disposable object that runs the given action upon disposal.\n         */\n        static create(action) {\n            return new Disposable(action);\n        }\n        /** Performs the task of cleaning up resources. */\n        dispose() {\n            if (!this.isDisposed) {\n                this.action();\n                this.isDisposed = true;\n            }\n        }\n    }\n    /**\n     * Gets the disposable that does nothing when disposed.\n     */\n    Disposable.empty = { dispose: noop };\n    return Disposable;\n})();\nexport { Disposable };\n/**\n * Represents a group of disposable resources that are disposed together.\n * @constructor\n */\nexport class CompositeDisposable {\n    constructor(...disposables) {\n        this.isDisposed = false;\n        this.disposables = disposables;\n    }\n    /**\n     * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.\n     * @param {Any} item Disposable to add.\n     */\n    add(item) {\n        if (this.isDisposed) {\n            item.dispose();\n        }\n        else {\n            this.disposables.push(item);\n        }\n    }\n    /**\n     * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.\n     * @param {Any} item Disposable to remove.\n     * @returns {Boolean} true if found; false otherwise.\n     */\n    remove(item) {\n        let shouldDispose = false;\n        if (!this.isDisposed) {\n            const idx = this.disposables.indexOf(item);\n            if (idx !== -1) {\n                shouldDispose = true;\n                this.disposables.splice(idx, 1);\n                item.dispose();\n            }\n        }\n        return shouldDispose;\n    }\n    /**\n     *  Disposes all disposables in the group and removes them from the group but\n     *  does not dispose the CompositeDisposable.\n     */\n    clear() {\n        if (!this.isDisposed) {\n            const len = this.disposables.length;\n            const currentDisposables = new Array(len);\n            for (let i = 0; i < len; i++) {\n                currentDisposables[i] = this.disposables[i];\n            }\n            this.disposables = [];\n            for (let i = 0; i < len; i++) {\n                currentDisposables[i].dispose();\n            }\n        }\n    }\n    /**\n     *  Disposes all disposables in the group and removes them from the group.\n     */\n    dispose() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            const len = this.disposables.length;\n            const currentDisposables = new Array(len);\n            for (let i = 0; i < len; i++) {\n                currentDisposables[i] = this.disposables[i];\n            }\n            this.disposables = [];\n            for (let i = 0; i < len; i++) {\n                currentDisposables[i].dispose();\n            }\n        }\n    }\n}\n/**\n * Represents a disposable resource whose underlying disposable resource can\n * be replaced by another disposable resource, causing automatic disposal of\n * the previous underlying disposable resource.\n */\nexport class SerialDisposable {\n    constructor() {\n        this.isDisposed = false;\n    }\n    /**\n     * Gets the underlying disposable.\n     * @returns {Any} the underlying disposable.\n     */\n    getDisposable() {\n        return this.current;\n    }\n    setDisposable(value) {\n        const shouldDispose = this.isDisposed;\n        if (!shouldDispose) {\n            const old = this.current;\n            this.current = value;\n            if (old) {\n                old.dispose();\n            }\n        }\n        if (shouldDispose && value) {\n            value.dispose();\n        }\n    }\n    /** Performs the task of cleaning up resources. */\n    dispose() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            const old = this.current;\n            this.current = undefined;\n            if (old) {\n                old.dispose();\n            }\n        }\n    }\n}\n"]}