{"version":3,"sources":["DragLayer.js"],"names":["React","shallowEqual","hoistStatics","invariant","DndContext","isPlainObject","isRefable","checkDecoratorArguments","DragLayer","collect","options","decorateLayer","DecoratedComponent","Decorated","arePropsEqual","displayName","name","DragLayerContainer","Component","constructor","arguments","isCurrentlyMounted","ref","createRef","handleChange","nextState","getCurrentState","state","setState","getDecoratedComponentInstance","current","shouldComponentUpdate","nextProps","props","componentDidMount","componentWillUnmount","unsubscribeFromOffsetChange","undefined","unsubscribeFromStateChange","render","createElement","Consumer","dragDropManager","receiveDragDropManager","Object","assign","manager","monitor","getMonitor","subscribeToOffsetChange","subscribeToStateChange"],"mappings":"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","file":"DragLayer.js","sourcesContent":["import * as React from 'react';\nimport { shallowEqual } from '@react-dnd/shallowequal';\nimport hoistStatics from 'hoist-non-react-statics';\nimport { invariant } from '@react-dnd/invariant';\nimport { DndContext } from '../common/DndContext';\nimport { isPlainObject } from '../utils/js_utils';\nimport { isRefable, checkDecoratorArguments } from './utils';\nexport function DragLayer(collect, options = {}) {\n    checkDecoratorArguments('DragLayer', 'collect[, options]', collect, options);\n    invariant(typeof collect === 'function', 'Expected \"collect\" provided as the first argument to DragLayer to be a function that collects props to inject into the component. ', 'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer', collect);\n    invariant(isPlainObject(options), 'Expected \"options\" provided as the second argument to DragLayer to be a plain object when specified. ' +\n        'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-layer', options);\n    return function decorateLayer(DecoratedComponent) {\n        const Decorated = DecoratedComponent;\n        const { arePropsEqual = shallowEqual } = options;\n        const displayName = Decorated.displayName || Decorated.name || 'Component';\n        let DragLayerContainer = /** @class */ (() => {\n            class DragLayerContainer extends React.Component {\n                constructor() {\n                    super(...arguments);\n                    this.isCurrentlyMounted = false;\n                    this.ref = React.createRef();\n                    this.handleChange = () => {\n                        if (!this.isCurrentlyMounted) {\n                            return;\n                        }\n                        const nextState = this.getCurrentState();\n                        if (!shallowEqual(nextState, this.state)) {\n                            this.setState(nextState);\n                        }\n                    };\n                }\n                getDecoratedComponentInstance() {\n                    invariant(this.ref.current, 'In order to access an instance of the decorated component, it must either be a class component or use React.forwardRef()');\n                    return this.ref.current;\n                }\n                shouldComponentUpdate(nextProps, nextState) {\n                    return (!arePropsEqual(nextProps, this.props) ||\n                        !shallowEqual(nextState, this.state));\n                }\n                componentDidMount() {\n                    this.isCurrentlyMounted = true;\n                    this.handleChange();\n                }\n                componentWillUnmount() {\n                    this.isCurrentlyMounted = false;\n                    if (this.unsubscribeFromOffsetChange) {\n                        this.unsubscribeFromOffsetChange();\n                        this.unsubscribeFromOffsetChange = undefined;\n                    }\n                    if (this.unsubscribeFromStateChange) {\n                        this.unsubscribeFromStateChange();\n                        this.unsubscribeFromStateChange = undefined;\n                    }\n                }\n                render() {\n                    return (React.createElement(DndContext.Consumer, null, ({ dragDropManager }) => {\n                        if (dragDropManager === undefined) {\n                            return null;\n                        }\n                        this.receiveDragDropManager(dragDropManager);\n                        // Let componentDidMount fire to initialize the collected state\n                        if (!this.isCurrentlyMounted) {\n                            return null;\n                        }\n                        return (React.createElement(Decorated, Object.assign({}, this.props, this.state, { ref: isRefable(Decorated) ? this.ref : null })));\n                    }));\n                }\n                receiveDragDropManager(dragDropManager) {\n                    if (this.manager !== undefined) {\n                        return;\n                    }\n                    this.manager = dragDropManager;\n                    invariant(typeof dragDropManager === 'object', 'Could not find the drag and drop manager in the context of %s. ' +\n                        'Make sure to render a DndProvider component in your top-level component. ' +\n                        'Read more: http://react-dnd.github.io/react-dnd/docs/troubleshooting#could-not-find-the-drag-and-drop-manager-in-the-context', displayName, displayName);\n                    const monitor = this.manager.getMonitor();\n                    this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleChange);\n                    this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleChange);\n                }\n                getCurrentState() {\n                    if (!this.manager) {\n                        return {};\n                    }\n                    const monitor = this.manager.getMonitor();\n                    return collect(monitor, this.props);\n                }\n            }\n            DragLayerContainer.displayName = `DragLayer(${displayName})`;\n            DragLayerContainer.DecoratedComponent = DecoratedComponent;\n            return DragLayerContainer;\n        })();\n        return hoistStatics(DragLayerContainer, DecoratedComponent);\n    };\n}\n"]}