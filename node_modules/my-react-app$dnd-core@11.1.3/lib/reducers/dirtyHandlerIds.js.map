{"version":3,"sources":["dirtyHandlerIds.js"],"names":["BEGIN_DRAG","PUBLISH_DRAG_SOURCE","HOVER","END_DRAG","DROP","ADD_SOURCE","ADD_TARGET","REMOVE_SOURCE","REMOVE_TARGET","areArraysEqual","NONE","ALL","xor","reduce","_state","action","type","targetIds","prevTargetIds","payload","result","didChange","length","prevInnermostTargetId","innermostTargetId","push"],"mappings":";;;;AAAA,iBAASA,UAAT,EAAqBC,mBAArB,EAA0CC,KAA1C,EAAiDC,QAAjD,EAA2DC,IAA3D,QAAwE,qBAAxE;AACA,iBAASC,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAsE,qBAAtE;AACA,iBAASC,cAAT,QAA+B,mBAA/B;AACA,iBAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,iBAASC,GAAT,QAAoB,mBAApB;AACA,eAAO,SAASC,MAAT;AACP;AACAC,iBAASJ,IAFF,EAEQK,MAFR,EAEgB;AACnB,oBAAQA,OAAOC,IAAf;AACI,qBAAKd,KAAL;AACI;AACJ,qBAAKG,UAAL;AACA,qBAAKC,UAAL;AACA,qBAAKE,aAAL;AACA,qBAAKD,aAAL;AACI,2BAAOG,IAAP;AACJ,qBAAKV,UAAL;AACA,qBAAKC,mBAAL;AACA,qBAAKE,QAAL;AACA,qBAAKC,IAAL;AACA;AACI,2BAAOO,GAAP;AAbR;AAeA,kBAAM,EAAEM,YAAY,EAAd,EAAkBC,gBAAgB,EAAlC,KAAyCH,OAAOI,OAAtD;AACA,kBAAMC,SAASR,IAAIK,SAAJ,EAAeC,aAAf,CAAf;AACA,kBAAMG,YAAYD,OAAOE,MAAP,GAAgB,CAAhB,IAAqB,CAACb,eAAeQ,SAAf,EAA0BC,aAA1B,CAAxC;AACA,gBAAI,CAACG,SAAL,EAAgB;AACZ,uBAAOX,IAAP;AACH;AACD;AACA;AACA,kBAAMa,wBAAwBL,cAAcA,cAAcI,MAAd,GAAuB,CAArC,CAA9B;AACA,kBAAME,oBAAoBP,UAAUA,UAAUK,MAAV,GAAmB,CAA7B,CAA1B;AACA,gBAAIC,0BAA0BC,iBAA9B,EAAiD;AAC7C,oBAAID,qBAAJ,EAA2B;AACvBH,2BAAOK,IAAP,CAAYF,qBAAZ;AACH;AACD,oBAAIC,iBAAJ,EAAuB;AACnBJ,2BAAOK,IAAP,CAAYD,iBAAZ;AACH;AACJ;AACD,mBAAOJ,MAAP;AACH","file":"dirtyHandlerIds.js","sourcesContent":["import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP, } from '../actions/dragDrop';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET, } from '../actions/registry';\nimport { areArraysEqual } from '../utils/equality';\nimport { NONE, ALL } from '../utils/dirtiness';\nimport { xor } from '../utils/js_utils';\nexport function reduce(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_state = NONE, action) {\n    switch (action.type) {\n        case HOVER:\n            break;\n        case ADD_SOURCE:\n        case ADD_TARGET:\n        case REMOVE_TARGET:\n        case REMOVE_SOURCE:\n            return NONE;\n        case BEGIN_DRAG:\n        case PUBLISH_DRAG_SOURCE:\n        case END_DRAG:\n        case DROP:\n        default:\n            return ALL;\n    }\n    const { targetIds = [], prevTargetIds = [] } = action.payload;\n    const result = xor(targetIds, prevTargetIds);\n    const didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n    if (!didChange) {\n        return NONE;\n    }\n    // Check the target ids at the innermost position. If they are valid, add them\n    // to the result\n    const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n    const innermostTargetId = targetIds[targetIds.length - 1];\n    if (prevInnermostTargetId !== innermostTargetId) {\n        if (prevInnermostTargetId) {\n            result.push(prevInnermostTargetId);\n        }\n        if (innermostTargetId) {\n            result.push(innermostTargetId);\n        }\n    }\n    return result;\n}\n"]}