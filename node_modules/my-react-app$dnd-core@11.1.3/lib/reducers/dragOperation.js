Liferay.Loader.define('my-react-app$dnd-core@11.1.3/lib/reducers/dragOperation', ['module', 'exports', 'require'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }

            return target;
        };

        import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';
        import { REMOVE_TARGET } from '../actions/registry';
        import { without } from '../utils/js_utils';
        const initialState = {
            itemType: null,
            item: null,
            sourceId: null,
            targetIds: [],
            dropResult: null,
            didDrop: false,
            isSourcePublic: null
        };
        export function reduce(state = initialState, action) {
            const { payload } = action;
            switch (action.type) {
                case BEGIN_DRAG:
                    return _extends({}, state, {
                        itemType: payload.itemType,
                        item: payload.item,
                        sourceId: payload.sourceId,
                        isSourcePublic: payload.isSourcePublic,
                        dropResult: null,
                        didDrop: false
                    });
                case PUBLISH_DRAG_SOURCE:
                    return _extends({}, state, {
                        isSourcePublic: true
                    });
                case HOVER:
                    return _extends({}, state, {
                        targetIds: payload.targetIds
                    });
                case REMOVE_TARGET:
                    if (state.targetIds.indexOf(payload.targetId) === -1) {
                        return state;
                    }
                    return _extends({}, state, {
                        targetIds: without(state.targetIds, payload.targetId)
                    });
                case DROP:
                    return _extends({}, state, {
                        dropResult: payload.dropResult,
                        didDrop: true,
                        targetIds: []
                    });
                case END_DRAG:
                    return _extends({}, state, {
                        itemType: null,
                        item: null,
                        sourceId: null,
                        dropResult: null,
                        didDrop: false,
                        isSourcePublic: null,
                        targetIds: []
                    });
                default:
                    return state;
            }
        }
    }
});
//# sourceMappingURL=dragOperation.js.map