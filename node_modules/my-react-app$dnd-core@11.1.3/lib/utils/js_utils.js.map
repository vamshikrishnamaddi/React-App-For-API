{"version":3,"sources":["js_utils.js"],"names":["get","obj","path","defaultValue","split","reduce","a","c","without","items","item","filter","i","isString","input","isObject","xor","itemsA","itemsB","map","Map","insertItem","set","has","forEach","result","count","key","push","intersection","t","indexOf"],"mappings":";;;;AAAA;AACA;;;;;;AAMA,eAAO,SAASA,GAAT,CAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,YAAxB,EAAsC;AACzC,mBAAOD,KACFE,KADE,CACI,GADJ,EAEFC,MAFE,CAEK,CAACC,CAAD,EAAIC,CAAJ,KAAWD,KAAKA,EAAEC,CAAF,CAAL,GAAYD,EAAEC,CAAF,CAAZ,GAAmBJ,gBAAgB,IAFnD,EAE0DF,GAF1D,CAAP;AAGH;AACD;;;AAGA,eAAO,SAASO,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AACjC,mBAAOD,MAAME,MAAN,CAAcC,CAAD,IAAOA,MAAMF,IAA1B,CAAP;AACH;AACD;;;;AAIA,eAAO,SAASG,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,mBAAO,OAAOA,KAAP,KAAiB,QAAxB;AACH;AACD;;;;AAIA,eAAO,SAASC,QAAT,CAAkBD,KAAlB,EAAyB;AAC5B,mBAAO,OAAOA,KAAP,KAAiB,QAAxB;AACH;AACD;;;;;AAKA,eAAO,SAASE,GAAT,CAAaC,MAAb,EAAqBC,MAArB,EAA6B;AAChC,kBAAMC,MAAM,IAAIC,GAAJ,EAAZ;AACA,kBAAMC,aAAcX,IAAD,IAAU;AACzBS,oBAAIG,GAAJ,CAAQZ,IAAR,EAAcS,IAAII,GAAJ,CAAQb,IAAR,IAAgBS,IAAInB,GAAJ,CAAQU,IAAR,IAAgB,CAAhC,GAAoC,CAAlD;AACH,aAFD;AAGAO,mBAAOO,OAAP,CAAeH,UAAf;AACAH,mBAAOM,OAAP,CAAeH,UAAf;AACA,kBAAMI,SAAS,EAAf;AACAN,gBAAIK,OAAJ,CAAY,CAACE,KAAD,EAAQC,GAAR,KAAgB;AACxB,oBAAID,UAAU,CAAd,EAAiB;AACbD,2BAAOG,IAAP,CAAYD,GAAZ;AACH;AACJ,aAJD;AAKA,mBAAOF,MAAP;AACH;AACD;;;;;AAKA,eAAO,SAASI,YAAT,CAAsBZ,MAAtB,EAA8BC,MAA9B,EAAsC;AACzC,mBAAOD,OAAON,MAAP,CAAemB,CAAD,IAAOZ,OAAOa,OAAP,CAAeD,CAAf,IAAoB,CAAC,CAA1C,CAAP;AACH","file":"js_utils.js","sourcesContent":["// cheap lodash replacements\n/**\n * drop-in replacement for _.get\n * @param obj\n * @param path\n * @param defaultValue\n */\nexport function get(obj, path, defaultValue) {\n    return path\n        .split('.')\n        .reduce((a, c) => (a && a[c] ? a[c] : defaultValue || null), obj);\n}\n/**\n * drop-in replacement for _.without\n */\nexport function without(items, item) {\n    return items.filter((i) => i !== item);\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isString(input) {\n    return typeof input === 'string';\n}\n/**\n * drop-in replacement for _.isString\n * @param input\n */\nexport function isObject(input) {\n    return typeof input === 'object';\n}\n/**\n * repalcement for _.xor\n * @param itemsA\n * @param itemsB\n */\nexport function xor(itemsA, itemsB) {\n    const map = new Map();\n    const insertItem = (item) => {\n        map.set(item, map.has(item) ? map.get(item) + 1 : 1);\n    };\n    itemsA.forEach(insertItem);\n    itemsB.forEach(insertItem);\n    const result = [];\n    map.forEach((count, key) => {\n        if (count === 1) {\n            result.push(key);\n        }\n    });\n    return result;\n}\n/**\n * replacement for _.intersection\n * @param itemsA\n * @param itemsB\n */\nexport function intersection(itemsA, itemsB) {\n    return itemsA.filter((t) => itemsB.indexOf(t) > -1);\n}\n"]}