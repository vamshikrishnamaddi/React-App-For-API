{"version":3,"sources":["drop.js"],"names":["invariant","DROP","isObject","createDrop","manager","drop","options","monitor","getMonitor","registry","getRegistry","verifyInvariants","targetIds","getDroppableTargets","forEach","targetId","index","dropResult","determineDropResult","action","type","payload","dispatch","isDragging","didDrop","target","getTarget","undefined","verifyDropResultType","getDropResult","getTargetIds","filter","canDropOnTarget","reverse"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,iBAASA,SAAT,QAA0B,sBAA1B;AACA,iBAASC,IAAT,QAAqB,SAArB;AACA,iBAASC,QAAT,QAAyB,sBAAzB;AACA,eAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAChC,mBAAO,SAASC,IAAT,CAAcC,UAAU,EAAxB,EAA4B;AAC/B,sBAAMC,UAAUH,QAAQI,UAAR,EAAhB;AACA,sBAAMC,WAAWL,QAAQM,WAAR,EAAjB;AACAC,iCAAiBJ,OAAjB;AACA,sBAAMK,YAAYC,oBAAoBN,OAApB,CAAlB;AACA;AACAK,0BAAUE,OAAV,CAAkB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACnC,0BAAMC,aAAaC,oBAAoBH,QAApB,EAA8BC,KAA9B,EAAqCP,QAArC,EAA+CF,OAA/C,CAAnB;AACA,0BAAMY,SAAS;AACXC,8BAAMnB,IADK;AAEXoB,iCAAS;AACLJ,qDACOX,OADP,EAEOW,UAFP;AADK;AAFE,qBAAf;AASAb,4BAAQkB,QAAR,CAAiBH,MAAjB;AACH,iBAZD;AAaH,aAnBD;AAoBH;AACD,iBAASR,gBAAT,CAA0BJ,OAA1B,EAAmC;AAC/BP,sBAAUO,QAAQgB,UAAR,EAAV,EAAgC,sCAAhC;AACAvB,sBAAU,CAACO,QAAQiB,OAAR,EAAX,EAA8B,mDAA9B;AACH;AACD,iBAASN,mBAAT,CAA6BH,QAA7B,EAAuCC,KAAvC,EAA8CP,QAA9C,EAAwDF,OAAxD,EAAiE;AAC7D,kBAAMkB,SAAShB,SAASiB,SAAT,CAAmBX,QAAnB,CAAf;AACA,gBAAIE,aAAaQ,SAASA,OAAOpB,IAAP,CAAYE,OAAZ,EAAqBQ,QAArB,CAAT,GAA0CY,SAA3D;AACAC,iCAAqBX,UAArB;AACA,gBAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuC;AACnCA,6BAAaD,UAAU,CAAV,GAAc,EAAd,GAAmBT,QAAQsB,aAAR,EAAhC;AACH;AACD,mBAAOZ,UAAP;AACH;AACD,iBAASW,oBAAT,CAA8BX,UAA9B,EAA0C;AACtCjB,sBAAU,OAAOiB,UAAP,KAAsB,WAAtB,IAAqCf,SAASe,UAAT,CAA/C,EAAqE,oDAArE;AACH;AACD,iBAASJ,mBAAT,CAA6BN,OAA7B,EAAsC;AAClC,kBAAMK,YAAYL,QACbuB,YADa,GAEbC,MAFa,CAENxB,QAAQyB,eAFF,EAEmBzB,OAFnB,CAAlB;AAGAK,sBAAUqB,OAAV;AACA,mBAAOrB,SAAP;AACH","file":"drop.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { DROP } from './types';\nimport { isObject } from '../../utils/js_utils';\nexport function createDrop(manager) {\n    return function drop(options = {}) {\n        const monitor = manager.getMonitor();\n        const registry = manager.getRegistry();\n        verifyInvariants(monitor);\n        const targetIds = getDroppableTargets(monitor);\n        // Multiple actions are dispatched here, which is why this doesn't return an action\n        targetIds.forEach((targetId, index) => {\n            const dropResult = determineDropResult(targetId, index, registry, monitor);\n            const action = {\n                type: DROP,\n                payload: {\n                    dropResult: {\n                        ...options,\n                        ...dropResult,\n                    },\n                },\n            };\n            manager.dispatch(action);\n        });\n    };\n}\nfunction verifyInvariants(monitor) {\n    invariant(monitor.isDragging(), 'Cannot call drop while not dragging.');\n    invariant(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');\n}\nfunction determineDropResult(targetId, index, registry, monitor) {\n    const target = registry.getTarget(targetId);\n    let dropResult = target ? target.drop(monitor, targetId) : undefined;\n    verifyDropResultType(dropResult);\n    if (typeof dropResult === 'undefined') {\n        dropResult = index === 0 ? {} : monitor.getDropResult();\n    }\n    return dropResult;\n}\nfunction verifyDropResultType(dropResult) {\n    invariant(typeof dropResult === 'undefined' || isObject(dropResult), 'Drop result must either be an object or undefined.');\n}\nfunction getDroppableTargets(monitor) {\n    const targetIds = monitor\n        .getTargetIds()\n        .filter(monitor.canDropOnTarget, monitor);\n    targetIds.reverse();\n    return targetIds;\n}\n"]}