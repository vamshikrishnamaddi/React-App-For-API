{"version":3,"sources":["beginDrag.js"],"names":["invariant","setClientOffset","isObject","BEGIN_DRAG","INIT_COORDS","ResetCoordinatesAction","type","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","options","publishSource","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","verifyItemIsObject","pinSource","itemType","getSourceType","isSourcePublic","isDragging","forEach","i","length","canDragSource"],"mappings":"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","file":"beginDrag.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nconst ResetCoordinatesAction = {\n    type: INIT_COORDS,\n    payload: {\n        clientOffset: null,\n        sourceClientOffset: null,\n    },\n};\nexport function createBeginDrag(manager) {\n    return function beginDrag(sourceIds = [], options = {\n        publishSource: true,\n    }) {\n        const { publishSource = true, clientOffset, getSourceClientOffset, } = options;\n        const monitor = manager.getMonitor();\n        const registry = manager.getRegistry();\n        // Initialize the coordinates using the client offset\n        manager.dispatch(setClientOffset(clientOffset));\n        verifyInvariants(sourceIds, monitor, registry);\n        // Get the draggable source\n        const sourceId = getDraggableSource(sourceIds, monitor);\n        if (sourceId === null) {\n            manager.dispatch(ResetCoordinatesAction);\n            return;\n        }\n        // Get the source client offset\n        let sourceClientOffset = null;\n        if (clientOffset) {\n            if (!getSourceClientOffset) {\n                throw new Error('getSourceClientOffset must be defined');\n            }\n            verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n            sourceClientOffset = getSourceClientOffset(sourceId);\n        }\n        // Initialize the full coordinates\n        manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n        const source = registry.getSource(sourceId);\n        const item = source.beginDrag(monitor, sourceId);\n        verifyItemIsObject(item);\n        registry.pinSource(sourceId);\n        const itemType = registry.getSourceType(sourceId);\n        return {\n            type: BEGIN_DRAG,\n            payload: {\n                itemType,\n                item,\n                sourceId,\n                clientOffset: clientOffset || null,\n                sourceClientOffset: sourceClientOffset || null,\n                isSourcePublic: !!publishSource,\n            },\n        };\n    };\n}\nfunction verifyInvariants(sourceIds, monitor, registry) {\n    invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n    sourceIds.forEach(function (sourceId) {\n        invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n    });\n}\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n    invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\nfunction verifyItemIsObject(item) {\n    invariant(isObject(item), 'Item must be an object.');\n}\nfunction getDraggableSource(sourceIds, monitor) {\n    let sourceId = null;\n    for (let i = sourceIds.length - 1; i >= 0; i--) {\n        if (monitor.canDragSource(sourceIds[i])) {\n            sourceId = sourceIds[i];\n            break;\n        }\n    }\n    return sourceId;\n}\n"]}