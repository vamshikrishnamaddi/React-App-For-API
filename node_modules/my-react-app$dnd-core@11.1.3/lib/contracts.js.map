{"version":3,"sources":["contracts.js"],"names":["invariant","validateSourceContract","source","canDrag","beginDrag","endDrag","validateTargetContract","target","canDrop","hover","drop","validateType","type","allowArray","Array","isArray","forEach","t"],"mappings":";;;;AAAA,iBAASA,SAAT,QAA0B,sBAA1B;AACA,eAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC3CF,sBAAU,OAAOE,OAAOC,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACAH,sBAAU,OAAOE,OAAOE,SAAd,KAA4B,UAAtC,EAAkD,sCAAlD;AACAJ,sBAAU,OAAOE,OAAOG,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACH;AACD,eAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC3CP,sBAAU,OAAOO,OAAOC,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACAR,sBAAU,OAAOO,OAAOE,KAAd,KAAwB,UAAlC,EAA8C,kCAA9C;AACAT,sBAAU,OAAOO,OAAOG,IAAd,KAAuB,UAAjC,EAA6C,sCAA7C;AACH;AACD,eAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,UAA5B,EAAwC;AAC3C,gBAAIA,cAAcC,MAAMC,OAAN,CAAcH,IAAd,CAAlB,EAAuC;AACnCA,qBAAKI,OAAL,CAAcC,CAAD,IAAON,aAAaM,CAAb,EAAgB,KAAhB,CAApB;AACA;AACH;AACDjB,sBAAU,OAAOY,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAtD,EAAgEC,aAC1D,6DAD0D,GAE1D,wCAFN;AAGH","file":"contracts.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n    invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n    invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n    invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n    invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n    invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n    invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n    if (allowArray && Array.isArray(type)) {\n        type.forEach((t) => validateType(t, false));\n        return;\n    }\n    invariant(typeof type === 'string' || typeof type === 'symbol', allowArray\n        ? 'Type can only be a string, a symbol, or an array of either.'\n        : 'Type can only be a string or a symbol.');\n}\n"]}