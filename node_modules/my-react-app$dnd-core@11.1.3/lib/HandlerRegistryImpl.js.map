{"version":3,"sources":["HandlerRegistryImpl.js"],"names":["invariant","addSource","addTarget","removeSource","removeTarget","getNextUniqueId","HandlerRole","validateSourceContract","validateTargetContract","validateType","asap","getNextHandlerId","role","id","toString","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","done","value","next","HandlerRegistryImpl","constructor","store","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","type","source","sourceId","addHandler","dispatch","target","targetId","containsHandler","handler","getSource","includePinned","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","delete","pinSource","unpinSource","set"],"mappings":"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","file":"HandlerRegistryImpl.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { addSource, addTarget, removeSource, removeTarget, } from './actions/registry';\nimport { getNextUniqueId } from './utils/getNextUniqueId';\nimport { HandlerRole, } from './interfaces';\nimport { validateSourceContract, validateTargetContract, validateType, } from './contracts';\nimport { asap } from '@react-dnd/asap';\nfunction getNextHandlerId(role) {\n    const id = getNextUniqueId().toString();\n    switch (role) {\n        case HandlerRole.SOURCE:\n            return `S${id}`;\n        case HandlerRole.TARGET:\n            return `T${id}`;\n        default:\n            throw new Error(`Unknown Handler Role: ${role}`);\n    }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n    switch (handlerId[0]) {\n        case 'S':\n            return HandlerRole.SOURCE;\n        case 'T':\n            return HandlerRole.TARGET;\n        default:\n            invariant(false, `Cannot parse handler ID: ${handlerId}`);\n    }\n}\nfunction mapContainsValue(map, searchValue) {\n    const entries = map.entries();\n    let isDone = false;\n    do {\n        const { done, value: [, value], } = entries.next();\n        if (value === searchValue) {\n            return true;\n        }\n        isDone = !!done;\n    } while (!isDone);\n    return false;\n}\nexport class HandlerRegistryImpl {\n    constructor(store) {\n        this.types = new Map();\n        this.dragSources = new Map();\n        this.dropTargets = new Map();\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n        this.store = store;\n    }\n    addSource(type, source) {\n        validateType(type);\n        validateSourceContract(source);\n        const sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n        this.store.dispatch(addSource(sourceId));\n        return sourceId;\n    }\n    addTarget(type, target) {\n        validateType(type, true);\n        validateTargetContract(target);\n        const targetId = this.addHandler(HandlerRole.TARGET, type, target);\n        this.store.dispatch(addTarget(targetId));\n        return targetId;\n    }\n    containsHandler(handler) {\n        return (mapContainsValue(this.dragSources, handler) ||\n            mapContainsValue(this.dropTargets, handler));\n    }\n    getSource(sourceId, includePinned = false) {\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        const isPinned = includePinned && sourceId === this.pinnedSourceId;\n        const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n        return source;\n    }\n    getTarget(targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.dropTargets.get(targetId);\n    }\n    getSourceType(sourceId) {\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        return this.types.get(sourceId);\n    }\n    getTargetType(targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.types.get(targetId);\n    }\n    isSourceId(handlerId) {\n        const role = parseRoleFromHandlerId(handlerId);\n        return role === HandlerRole.SOURCE;\n    }\n    isTargetId(handlerId) {\n        const role = parseRoleFromHandlerId(handlerId);\n        return role === HandlerRole.TARGET;\n    }\n    removeSource(sourceId) {\n        invariant(this.getSource(sourceId), 'Expected an existing source.');\n        this.store.dispatch(removeSource(sourceId));\n        asap(() => {\n            this.dragSources.delete(sourceId);\n            this.types.delete(sourceId);\n        });\n    }\n    removeTarget(targetId) {\n        invariant(this.getTarget(targetId), 'Expected an existing target.');\n        this.store.dispatch(removeTarget(targetId));\n        this.dropTargets.delete(targetId);\n        this.types.delete(targetId);\n    }\n    pinSource(sourceId) {\n        const source = this.getSource(sourceId);\n        invariant(source, 'Expected an existing source.');\n        this.pinnedSourceId = sourceId;\n        this.pinnedSource = source;\n    }\n    unpinSource() {\n        invariant(this.pinnedSource, 'No source is pinned at the time.');\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n    }\n    addHandler(role, type, handler) {\n        const id = getNextHandlerId(role);\n        this.types.set(id, type);\n        if (role === HandlerRole.SOURCE) {\n            this.dragSources.set(id, handler);\n        }\n        else if (role === HandlerRole.TARGET) {\n            this.dropTargets.set(id, handler);\n        }\n        return id;\n    }\n}\n"]}