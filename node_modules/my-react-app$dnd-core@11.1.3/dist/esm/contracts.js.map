{"version":3,"sources":["contracts.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","invariant","validateSourceContract","source","canDrag","beginDrag","endDrag","validateTargetContract","target","canDrop","hover","drop","validateType","type","allowArray","Array","isArray","forEach","t"],"mappings":";;;;AAAA,aAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;AAA2B,UAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,OAAOC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,kBAAU,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,iBAAO,OAAOA,GAAd;AAAoB,SAAtD;AAAyD,OAApI,MAA0I;AAAED,kBAAU,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,iBAAOA,OAAO,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,IAAIG,WAAJ,KAAoBF,MAA3D,IAAqED,QAAQC,OAAOG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,SAAjK;AAAoK,OAAC,OAAOD,QAAQC,GAAR,CAAP;AAAsB;;AAE1X,aAASK,SAAT,QAA0B,sBAA1B;AACA,WAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7CF,gBAAU,OAAOE,OAAOC,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACAH,gBAAU,OAAOE,OAAOE,SAAd,KAA4B,UAAtC,EAAkD,sCAAlD;AACAJ,gBAAU,OAAOE,OAAOG,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACD;AACD,WAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7CP,gBAAU,OAAOO,OAAOC,OAAd,KAA0B,UAApC,EAAgD,oCAAhD;AACAR,gBAAU,OAAOO,OAAOE,KAAd,KAAwB,UAAlC,EAA8C,kCAA9C;AACAT,gBAAU,OAAOO,OAAOG,IAAd,KAAuB,UAAjC,EAA6C,sCAA7C;AACD;AACD,WAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,UAA5B,EAAwC;AAC7C,UAAIA,cAAcC,MAAMC,OAAN,CAAcH,IAAd,CAAlB,EAAuC;AACrCA,aAAKI,OAAL,CAAa,UAAUC,CAAV,EAAa;AACxB,iBAAON,aAAaM,CAAb,EAAgB,KAAhB,CAAP;AACD,SAFD;AAGA;AACD;;AAEDjB,gBAAU,OAAOY,IAAP,KAAgB,QAAhB,IAA4BlB,QAAQkB,IAAR,MAAkB,QAAxD,EAAkEC,aAAa,6DAAb,GAA6E,wCAA/I;AACD","file":"contracts.js","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n  invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n  invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n  invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n  invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n  invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n  invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n  if (allowArray && Array.isArray(type)) {\n    type.forEach(function (t) {\n      return validateType(t, false);\n    });\n    return;\n  }\n\n  invariant(typeof type === 'string' || _typeof(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}"]}