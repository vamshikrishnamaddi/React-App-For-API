{"version":3,"sources":["beginDrag.js"],"names":["invariant","setClientOffset","isObject","BEGIN_DRAG","INIT_COORDS","ResetCoordinatesAction","type","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","arguments","length","undefined","options","publishSource","_options$publishSourc","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","verifyItemIsObject","pinSource","itemType","getSourceType","isSourcePublic","isDragging","forEach","i","canDragSource"],"mappings":"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","file":"beginDrag.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nvar ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport function createBeginDrag(manager) {\n  return function beginDrag() {\n    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    var _options$publishSourc = options.publishSource,\n        publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,\n        clientOffset = options.clientOffset,\n        getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    var sourceClientOffset = null;\n\n    if (clientOffset) {\n      if (!getSourceClientOffset) {\n        throw new Error('getSourceClientOffset must be defined');\n      }\n\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId);\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}"]}