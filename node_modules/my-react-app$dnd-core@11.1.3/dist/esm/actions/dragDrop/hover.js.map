{"version":3,"sources":["hover.js"],"names":["invariant","matchesType","HOVER","createHover","manager","hover","targetIdsArg","_ref","arguments","length","undefined","clientOffset","verifyTargetIdsIsArray","targetIds","slice","monitor","getMonitor","registry","getRegistry","checkInvariants","draggedItemType","getItemType","removeNonMatchingTargetIds","hoverAllTargets","type","payload","Array","isArray","isDragging","didDrop","i","targetId","lastIndexOf","target","getTarget","targetType","getTargetType","splice","forEach"],"mappings":";;;;AAAA,aAASA,SAAT,QAA0B,sBAA1B;AACA,aAASC,WAAT,QAA4B,yBAA5B;AACA,aAASC,KAAT,QAAsB,SAAtB;AACA,WAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACnC,aAAO,SAASC,KAAT,CAAeC,YAAf,EAA6B;AAClC,YAAIC,OAAOC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;AAAA,YACIG,eAAeJ,KAAKI,YADxB;;AAGAC,+BAAuBN,YAAvB;AACA,YAAIO,YAAYP,aAAaQ,KAAb,CAAmB,CAAnB,CAAhB;AACA,YAAIC,UAAUX,QAAQY,UAAR,EAAd;AACA,YAAIC,WAAWb,QAAQc,WAAR,EAAf;AACAC,wBAAgBN,SAAhB,EAA2BE,OAA3B,EAAoCE,QAApC;AACA,YAAIG,kBAAkBL,QAAQM,WAAR,EAAtB;AACAC,mCAA2BT,SAA3B,EAAsCI,QAAtC,EAAgDG,eAAhD;AACAG,wBAAgBV,SAAhB,EAA2BE,OAA3B,EAAoCE,QAApC;AACA,eAAO;AACLO,gBAAMtB,KADD;AAELuB,mBAAS;AACPZ,uBAAWA,SADJ;AAEPF,0BAAcA,gBAAgB;AAFvB;AAFJ,SAAP;AAOD,OAnBD;AAoBD;;AAED,aAASC,sBAAT,CAAgCN,YAAhC,EAA8C;AAC5CN,gBAAU0B,MAAMC,OAAN,CAAcrB,YAAd,CAAV,EAAuC,oCAAvC;AACD;;AAED,aAASa,eAAT,CAAyBN,SAAzB,EAAoCE,OAApC,EAA6CE,QAA7C,EAAuD;AACrDjB,gBAAUe,QAAQa,UAAR,EAAV,EAAgC,uCAAhC;AACA5B,gBAAU,CAACe,QAAQc,OAAR,EAAX,EAA8B,+BAA9B;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIjB,UAAUJ,MAA9B,EAAsCqB,GAAtC,EAA2C;AACzC,YAAIC,WAAWlB,UAAUiB,CAAV,CAAf;AACA9B,kBAAUa,UAAUmB,WAAV,CAAsBD,QAAtB,MAAoCD,CAA9C,EAAiD,sDAAjD;AACA,YAAIG,SAAShB,SAASiB,SAAT,CAAmBH,QAAnB,CAAb;AACA/B,kBAAUiC,MAAV,EAAkB,sCAAlB;AACD;AACF;;AAED,aAASX,0BAAT,CAAoCT,SAApC,EAA+CI,QAA/C,EAAyDG,eAAzD,EAA0E;AACxE;AACA;AACA;AACA,WAAK,IAAIU,IAAIjB,UAAUJ,MAAV,GAAmB,CAAhC,EAAmCqB,KAAK,CAAxC,EAA2CA,GAA3C,EAAgD;AAC9C,YAAIC,WAAWlB,UAAUiB,CAAV,CAAf;AACA,YAAIK,aAAalB,SAASmB,aAAT,CAAuBL,QAAvB,CAAjB;;AAEA,YAAI,CAAC9B,YAAYkC,UAAZ,EAAwBf,eAAxB,CAAL,EAA+C;AAC7CP,oBAAUwB,MAAV,CAAiBP,CAAjB,EAAoB,CAApB;AACD;AACF;AACF;;AAED,aAASP,eAAT,CAAyBV,SAAzB,EAAoCE,OAApC,EAA6CE,QAA7C,EAAuD;AACrD;AACAJ,gBAAUyB,OAAV,CAAkB,UAAUP,QAAV,EAAoB;AACpC,YAAIE,SAAShB,SAASiB,SAAT,CAAmBH,QAAnB,CAAb;AACAE,eAAO5B,KAAP,CAAaU,OAAb,EAAsBgB,QAAtB;AACD,OAHD;AAID","file":"hover.js","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { matchesType } from '../../utils/matchesType';\nimport { HOVER } from './types';\nexport function createHover(manager) {\n  return function hover(targetIdsArg) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        clientOffset = _ref.clientOffset;\n\n    verifyTargetIdsIsArray(targetIdsArg);\n    var targetIds = targetIdsArg.slice(0);\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry();\n    checkInvariants(targetIds, monitor, registry);\n    var draggedItemType = monitor.getItemType();\n    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n    hoverAllTargets(targetIds, monitor, registry);\n    return {\n      type: HOVER,\n      payload: {\n        targetIds: targetIds,\n        clientOffset: clientOffset || null\n      }\n    };\n  };\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n  invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\n\nfunction checkInvariants(targetIds, monitor, registry) {\n  invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');\n  invariant(!monitor.didDrop(), 'Cannot call hover after drop.');\n\n  for (var i = 0; i < targetIds.length; i++) {\n    var targetId = targetIds[i];\n    invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n    var target = registry.getTarget(targetId);\n    invariant(target, 'Expected targetIds to be registered.');\n  }\n}\n\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n  // Remove those targetIds that don't match the targetType.  This\n  // fixes shallow isOver which would only be non-shallow because of\n  // non-matching targets.\n  for (var i = targetIds.length - 1; i >= 0; i--) {\n    var targetId = targetIds[i];\n    var targetType = registry.getTargetType(targetId);\n\n    if (!matchesType(targetType, draggedItemType)) {\n      targetIds.splice(i, 1);\n    }\n  }\n}\n\nfunction hoverAllTargets(targetIds, monitor, registry) {\n  // Finally call hover on all matching targets.\n  targetIds.forEach(function (targetId) {\n    var target = registry.getTarget(targetId);\n    target.hover(monitor, targetId);\n  });\n}"]}