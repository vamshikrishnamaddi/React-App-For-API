{"version":3,"sources":["dirtyHandlerIds.js"],"names":["BEGIN_DRAG","PUBLISH_DRAG_SOURCE","HOVER","END_DRAG","DROP","ADD_SOURCE","ADD_TARGET","REMOVE_SOURCE","REMOVE_TARGET","areArraysEqual","NONE","ALL","xor","reduce","arguments","length","undefined","action","type","_action$payload","payload","_action$payload$targe","targetIds","_action$payload$prevT","prevTargetIds","result","didChange","prevInnermostTargetId","innermostTargetId","push"],"mappings":";;;;AAAA,aAASA,UAAT,EAAqBC,mBAArB,EAA0CC,KAA1C,EAAiDC,QAAjD,EAA2DC,IAA3D,QAAuE,qBAAvE;AACA,aAASC,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,qBAArE;AACA,aAASC,cAAT,QAA+B,mBAA/B;AACA,aAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,aAASC,GAAT,QAAoB,mBAApB;AACA,WAAO,SAASC,MAAT,GAAkB;AACVC,gBAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoEJ,IAD1D;;;AAGvB,UAAIO,SAASH,UAAUC,MAAV,GAAmB,CAAnB,GAAuBD,UAAU,CAAV,CAAvB,GAAsCE,SAAnD;;AAEA,cAAQC,OAAOC,IAAf;AACE,aAAKhB,KAAL;AACE;;AAEF,aAAKG,UAAL;AACA,aAAKC,UAAL;AACA,aAAKE,aAAL;AACA,aAAKD,aAAL;AACE,iBAAOG,IAAP;;AAEF,aAAKV,UAAL;AACA,aAAKC,mBAAL;AACA,aAAKE,QAAL;AACA,aAAKC,IAAL;AACA;AACE,iBAAOO,GAAP;AAfJ;;AAkBA,UAAIQ,kBAAkBF,OAAOG,OAA7B;AAAA,UACIC,wBAAwBF,gBAAgBG,SAD5C;AAAA,UAEIA,YAAYD,0BAA0B,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAFxD;AAAA,UAGIE,wBAAwBJ,gBAAgBK,aAH5C;AAAA,UAIIA,gBAAgBD,0BAA0B,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAJ5D;AAKA,UAAIE,SAASb,IAAIU,SAAJ,EAAeE,aAAf,CAAb;AACA,UAAIE,YAAYD,OAAOV,MAAP,GAAgB,CAAhB,IAAqB,CAACN,eAAea,SAAf,EAA0BE,aAA1B,CAAtC;;AAEA,UAAI,CAACE,SAAL,EAAgB;AACd,eAAOhB,IAAP;AACD,OAjCsB,CAiCrB;AACF;;;AAGA,UAAIiB,wBAAwBH,cAAcA,cAAcT,MAAd,GAAuB,CAArC,CAA5B;AACA,UAAIa,oBAAoBN,UAAUA,UAAUP,MAAV,GAAmB,CAA7B,CAAxB;;AAEA,UAAIY,0BAA0BC,iBAA9B,EAAiD;AAC/C,YAAID,qBAAJ,EAA2B;AACzBF,iBAAOI,IAAP,CAAYF,qBAAZ;AACD;;AAED,YAAIC,iBAAJ,EAAuB;AACrBH,iBAAOI,IAAP,CAAYD,iBAAZ;AACD;AACF;;AAED,aAAOH,MAAP;AACD","file":"dirtyHandlerIds.js","sourcesContent":["import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry';\nimport { areArraysEqual } from '../utils/equality';\nimport { NONE, ALL } from '../utils/dirtiness';\nimport { xor } from '../utils/js_utils';\nexport function reduce() {\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\n\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HOVER:\n      break;\n\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n\n  var _action$payload = action.payload,\n      _action$payload$targe = _action$payload.targetIds,\n      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\n      _action$payload$prevT = _action$payload.prevTargetIds,\n      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\n  var result = xor(targetIds, prevTargetIds);\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n\n  if (!didChange) {\n    return NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  var innermostTargetId = targetIds[targetIds.length - 1];\n\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n\n  return result;\n}"]}