{"version":3,"sources":["coords.js"],"names":["Object","defineProperty","exports","value","add","subtract","getSourceClientOffset","getDifferenceFromInitialOffset","a","b","x","y","state","clientOffset","initialClientOffset","initialSourceClientOffset"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,GAAR,GAAcA,GAAd;AACAF,YAAQG,QAAR,GAAmBA,QAAnB;AACAH,YAAQI,qBAAR,GAAgCA,qBAAhC;AACAJ,YAAQK,8BAAR,GAAyCA,8BAAzC;;AAEA;;;;;AAKA,aAASH,GAAT,CAAaI,CAAb,EAAgBC,CAAhB,EAAmB;AACjB,aAAO;AACLC,WAAGF,EAAEE,CAAF,GAAMD,EAAEC,CADN;AAELC,WAAGH,EAAEG,CAAF,GAAMF,EAAEE;AAFN,OAAP;AAID;AACD;;;;;;AAOA,aAASN,QAAT,CAAkBG,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,aAAO;AACLC,WAAGF,EAAEE,CAAF,GAAMD,EAAEC,CADN;AAELC,WAAGH,EAAEG,CAAF,GAAMF,EAAEE;AAFN,OAAP;AAID;AACD;;;;;;;;;AAUA,aAASL,qBAAT,CAA+BM,KAA/B,EAAsC;AACpC,UAAIC,eAAeD,MAAMC,YAAzB;AAAA,UACIC,sBAAsBF,MAAME,mBADhC;AAAA,UAEIC,4BAA4BH,MAAMG,yBAFtC;;AAIA,UAAI,CAACF,YAAD,IAAiB,CAACC,mBAAlB,IAAyC,CAACC,yBAA9C,EAAyE;AACvE,eAAO,IAAP;AACD;;AAED,aAAOV,SAASD,IAAIS,YAAJ,EAAkBE,yBAAlB,CAAT,EAAuDD,mBAAvD,CAAP;AACD;AACD;;;;;;AAOA,aAASP,8BAAT,CAAwCK,KAAxC,EAA+C;AAC7C,UAAIC,eAAeD,MAAMC,YAAzB;AAAA,UACIC,sBAAsBF,MAAME,mBADhC;;AAGA,UAAI,CAACD,YAAD,IAAiB,CAACC,mBAAtB,EAA2C;AACzC,eAAO,IAAP;AACD;;AAED,aAAOT,SAASQ,YAAT,EAAuBC,mBAAvB,CAAP;AACD","file":"coords.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = add;\nexports.subtract = subtract;\nexports.getSourceClientOffset = getSourceClientOffset;\nexports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;\n\n/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */\nfunction add(a, b) {\n  return {\n    x: a.x + b.x,\n    y: a.y + b.y\n  };\n}\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */\n\n\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */\n\n\nfunction getSourceClientOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset,\n      initialSourceClientOffset = state.initialSourceClientOffset;\n\n  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n    return null;\n  }\n\n  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */\n\n\nfunction getDifferenceFromInitialOffset(state) {\n  var clientOffset = state.clientOffset,\n      initialClientOffset = state.initialClientOffset;\n\n  if (!clientOffset || !initialClientOffset) {\n    return null;\n  }\n\n  return subtract(clientOffset, initialClientOffset);\n}"]}