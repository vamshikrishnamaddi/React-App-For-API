{"version":3,"sources":["gh-pages.js"],"names":["ghpages","require","program","path","pkg","addr","publish","config","Promise","resolve","reject","basePath","process","cwd","dist","err","main","args","then","version","option","defaults","src","branch","dest","message","git","depth","remote","remove","parse","user","parts","parseOneAddress","Error","name","email","address","beforeAdd","m","paths","default","repo","silent","tag","dotfiles","add","push","history","module","argv","stdout","write","catch","stderr","exit","exports"],"mappings":"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","file":"gh-pages.js","sourcesContent":["\n\nconst ghpages = require('../lib/index.js');\nconst program = require('commander');\nconst path = require('path');\nconst pkg = require('../package.json');\nconst addr = require('email-addresses');\n\nfunction publish(config) {\n  return new Promise((resolve, reject) => {\n    const basePath = path.resolve(process.cwd(), program.dist);\n    ghpages.publish(basePath, config, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n}\n\nfunction main(args) {\n  return Promise.resolve().then(() => {\n    program\n      .version(pkg.version)\n      .option('-d, --dist <dist>', 'Base directory for all source files')\n      .option(\n        '-s, --src <src>',\n        'Pattern used to select which files to publish',\n        ghpages.defaults.src\n      )\n      .option(\n        '-b, --branch <branch>',\n        'Name of the branch you are pushing to',\n        ghpages.defaults.branch\n      )\n      .option(\n        '-e, --dest <dest>',\n        'Target directory within the destination branch (relative to the root)',\n        ghpages.defaults.dest\n      )\n      .option('-a, --add', 'Only add, and never remove existing files')\n      .option('-x, --silent', 'Do not output the repository url')\n      .option(\n        '-m, --message <message>',\n        'commit message',\n        ghpages.defaults.message\n      )\n      .option('-g, --tag <tag>', 'add tag to commit')\n      .option('--git <git>', 'Path to git executable', ghpages.defaults.git)\n      .option('-t, --dotfiles', 'Include dotfiles')\n      .option('-r, --repo <repo>', 'URL of the repository you are pushing to')\n      .option('-p, --depth <depth>', 'depth for clone', ghpages.defaults.depth)\n      .option(\n        '-o, --remote <name>',\n        'The name of the remote',\n        ghpages.defaults.remote\n      )\n      .option(\n        '-u, --user <address>',\n        'The name and email of the user (defaults to the git config).  Format is \"Your Name <email@example.com>\".'\n      )\n      .option(\n        '-v, --remove <pattern>',\n        'Remove files that match the given pattern ' +\n          '(ignored if used together with --add).',\n        ghpages.defaults.remove\n      )\n      .option('-n, --no-push', 'Commit only (with no push)')\n      .option(\n        '-f, --no-history',\n        'Push force new commit without parent history'\n      )\n      .option(\n        '--before-add <file>',\n        'Execute the function exported by <file> before \"git add\"'\n      )\n      .parse(args);\n\n    let user;\n    if (program.user) {\n      const parts = addr.parseOneAddress(program.user);\n      if (!parts) {\n        throw new Error(\n          `Could not parse name and email from user option \"${program.user}\" ` +\n            '(format should be \"Your Name <email@example.com>\")'\n        );\n      }\n      user = {name: parts.name, email: parts.address};\n    }\n    let beforeAdd;\n    if (program.beforeAdd) {\n      const m = require(require.resolve(program.beforeAdd, {\n        paths: [process.cwd()],\n      }));\n\n      if (typeof m === 'function') {\n        beforeAdd = m;\n      } else if (typeof m === 'object' && typeof m.default === 'function') {\n        beforeAdd = m.default;\n      } else {\n        throw new Error(\n          `Could not find function to execute before adding files in ` +\n            `\"${program.beforeAdd}\".\\n `\n        );\n      }\n    }\n\n    const config = {\n      repo: program.repo,\n      silent: !!program.silent,\n      branch: program.branch,\n      src: program.src,\n      dest: program.dest,\n      message: program.message,\n      tag: program.tag,\n      git: program.git,\n      depth: program.depth,\n      dotfiles: !!program.dotfiles,\n      add: !!program.add,\n      remove: program.remove,\n      remote: program.remote,\n      push: !!program.push,\n      history: !!program.history,\n      user: user,\n      beforeAdd: beforeAdd,\n    };\n\n    return publish(config);\n  });\n}\n\nif (require.main === module) {\n  main(process.argv)\n    .then(() => {\n      process.stdout.write('Published\\n');\n    })\n    .catch((err) => {\n      process.stderr.write(`${err.message}\\n`, () => process.exit(1));\n    });\n}\n\nmodule.exports = main;\nexports = module.exports;\n"]}