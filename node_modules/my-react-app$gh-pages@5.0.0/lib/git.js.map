{"version":3,"sources":["git.js"],"names":["cp","require","fs","path","util","ProcessError","code","message","callee","arguments","Error","apply","captureStackTrace","name","inherits","spawn","exe","args","cwd","Promise","resolve","reject","child","process","buffer","stderr","on","chunk","push","toString","stdout","output","join","Git","cmd","prototype","exec","then","init","clean","reset","remote","branch","fetch","checkout","error","rm","files","Array","isArray","add","commit","catch","tag","force","getRemoteUrl","git","repo","split","shift","err","deleteRef","clone","dir","options","exists","mkdirp","dirname","depth","module","exports"],"mappings":"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","file":"git.js","sourcesContent":["const cp = require('child_process');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst util = require('util');\n\n/**\n * @function Object() { [native code] }\n * @param {number} code Error code.\n * @param {string} message Error message.\n */\nfunction ProcessError(code, message) {\n  const callee = arguments.callee;\n  Error.apply(this, [message]);\n  Error.captureStackTrace(this, callee);\n  this.code = code;\n  this.message = message;\n  this.name = callee.name;\n}\nutil.inherits(ProcessError, Error);\n\n/**\n * Util function for handling spawned processes as promises.\n * @param {string} exe Executable.\n * @param {Array<string>} args Arguments.\n * @param {string} cwd Working directory.\n * @return {Promise} A promise.\n */\nfunction spawn(exe, args, cwd) {\n  return new Promise((resolve, reject) => {\n    const child = cp.spawn(exe, args, {cwd: cwd || process.cwd()});\n    const buffer = [];\n    child.stderr.on('data', (chunk) => {\n      buffer.push(chunk.toString());\n    });\n    child.stdout.on('data', (chunk) => {\n      buffer.push(chunk.toString());\n    });\n    child.on('close', (code) => {\n      const output = buffer.join('');\n      if (code) {\n        const msg = output || 'Process failed: ' + code;\n        reject(new ProcessError(code, msg));\n      } else {\n        resolve(output);\n      }\n    });\n  });\n}\n\n/**\n * Create an object for executing git commands.\n * @param {string} cwd Repository directory.\n * @param {string} cmd Git executable (full path if not already on path).\n * @function Object() { [native code] }\n */\nfunction Git(cwd, cmd) {\n  this.cwd = cwd;\n  this.cmd = cmd || 'git';\n  this.output = '';\n}\n\n/**\n * Execute an arbitrary git command.\n * @param {Array<string>} args Arguments (e.g. ['remote', 'update']).\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.exec = function (...args) {\n  return spawn(this.cmd, [...args], this.cwd).then((output) => {\n    this.output = output;\n    return this;\n  });\n};\n\n/**\n * Initialize repository.\n * @return {Promise} A promise.\n */\nGit.prototype.init = function () {\n  return this.exec('init');\n};\n\n/**\n * Clean up unversioned files.\n * @return {Promise} A promise.\n */\nGit.prototype.clean = function () {\n  return this.exec('clean', '-f', '-d');\n};\n\n/**\n * Hard reset to remote/branch\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.reset = function (remote, branch) {\n  return this.exec('reset', '--hard', remote + '/' + branch);\n};\n\n/**\n * Fetch from a remote.\n * @param {string} remote Remote alias.\n * @return {Promise} A promise.\n */\nGit.prototype.fetch = function (remote) {\n  return this.exec('fetch', remote);\n};\n\n/**\n * Checkout a branch (create an orphan if it doesn't exist on the remote).\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.checkout = function (remote, branch) {\n  const treeish = remote + '/' + branch;\n  return this.exec('ls-remote', '--exit-code', '.', treeish).then(\n    () => {\n      // branch exists on remote, hard reset\n      return this.exec('checkout', branch)\n        .then(() => this.clean())\n        .then(() => this.reset(remote, branch));\n    },\n    (error) => {\n      if (error instanceof ProcessError && error.code === 2) {\n        // branch doesn't exist, create an orphan\n        return this.exec('checkout', '--orphan', branch);\n      } else {\n        // unhandled error\n        throw error;\n      }\n    }\n  );\n};\n\n/**\n * Remove all unversioned files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.rm = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('rm', '--ignore-unmatch', '-r', '-f', ...files);\n};\n\n/**\n * Add files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.add = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('add', ...files);\n};\n\n/**\n * Commit (if there are any changes).\n * @param {string} message Commit message.\n * @return {Promise} A promise.\n */\nGit.prototype.commit = function (message) {\n  return this.exec('diff-index', '--quiet', 'HEAD').catch(() =>\n    this.exec('commit', '-m', message)\n  );\n};\n\n/**\n * Add tag\n * @param {string} name Name of tag.\n * @return {Promise} A promise.\n */\nGit.prototype.tag = function (name) {\n  return this.exec('tag', name);\n};\n\n/**\n * Push a branch.\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {boolean} force Force push.\n * @return {Promise} A promise.\n */\nGit.prototype.push = function (remote, branch, force) {\n  const args = ['push', '--tags', remote, branch];\n  if (force) {\n    args.push('--force');\n  }\n  return this.exec.apply(this, args);\n};\n\n/**\n * Get the URL for a remote.\n * @param {string} remote Remote alias.\n * @return {Promise<string>} A promise for the remote URL.\n */\nGit.prototype.getRemoteUrl = function (remote) {\n  return this.exec('config', '--get', 'remote.' + remote + '.url')\n    .then((git) => {\n      const repo = git.output && git.output.split(/[\\n\\r]/).shift();\n      if (repo) {\n        return repo;\n      } else {\n        throw new Error(\n          'Failed to get repo URL from options or current directory.'\n        );\n      }\n    })\n    .catch((err) => {\n      throw new Error(\n        'Failed to get remote.' +\n          remote +\n          '.url (task must either be ' +\n          'run in a git repository with a configured ' +\n          remote +\n          ' remote ' +\n          'or must be configured with the \"repo\" option).'\n      );\n    });\n};\n\n/**\n * Delete ref to remove branch history\n * @param {string} branch The branch name.\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.deleteRef = function (branch) {\n  return this.exec('update-ref', '-d', 'refs/heads/' + branch);\n};\n\n/**\n * Clone a repo into the given dir if it doesn't already exist.\n * @param {string} repo Repository URL.\n * @param {string} dir Target directory.\n * @param {string} branch Branch name.\n * @param {options} options All options.\n * @return {Promise<Git>} A promise.\n */\nGit.clone = function clone(repo, dir, branch, options) {\n  return fs.exists(dir).then((exists) => {\n    if (exists) {\n      return Promise.resolve(new Git(dir, options.git));\n    } else {\n      return fs.mkdirp(path.dirname(path.resolve(dir))).then(() => {\n        const args = [\n          'clone',\n          repo,\n          dir,\n          '--branch',\n          branch,\n          '--single-branch',\n          '--origin',\n          options.remote,\n          '--depth',\n          options.depth,\n        ];\n        return spawn(options.git, args)\n          .catch((err) => {\n            // try again without branch or depth options\n            return spawn(options.git, [\n              'clone',\n              repo,\n              dir,\n              '--origin',\n              options.remote,\n            ]);\n          })\n          .then(() => new Git(dir, options.git));\n      });\n    }\n  });\n};\n\nmodule.exports = Git;\n"]}