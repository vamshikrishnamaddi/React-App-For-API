{"version":3,"sources":["util.js"],"names":["path","require","Git","async","fs","uniqueDirs","files","dirs","Set","forEach","filepath","parts","dirname","split","sep","partial","add","i","ii","length","join","Array","from","exports","byShortPath","a","b","aParts","bParts","aLength","bLength","cmp","aPart","bPart","dirsToCreate","sort","copyFile","obj","callback","called","done","err","read","createReadStream","src","on","write","createWriteStream","dest","pipe","makeDir","mkdir","stat","err2","isDirectory","copy","base","Promise","resolve","reject","pairs","destFiles","file","relative","target","push","eachSeries","each","getUser","cwd","all","exec","then","results","name","output","trim","email","catch"],"mappings":"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","file":"util.js","sourcesContent":["const path = require('path');\nconst Git = require('./git.js');\nconst async = require('async');\nconst fs = require('fs-extra');\n\n/**\n * Generate a list of unique directory paths given a list of file paths.\n * @param {Array<string>} files List of file paths.\n * @return {Array<string>} List of directory paths.\n */\nfunction uniqueDirs(files) {\n  const dirs = new Set();\n  files.forEach((filepath) => {\n    const parts = path.dirname(filepath).split(path.sep);\n    let partial = parts[0] || '/';\n    dirs.add(partial);\n    for (let i = 1, ii = parts.length; i < ii; ++i) {\n      partial = path.join(partial, parts[i]);\n      dirs.add(partial);\n    }\n  });\n  return Array.from(dirs);\n}\nexports.uniqueDirs = uniqueDirs;\n\n/**\n * Sort function for paths.  Sorter paths come first.  Paths of equal length are\n * sorted alphanumerically in path segment order.\n * @param {string} a First path.\n * @param {string} b Second path.\n * @return {number} Comparison.\n */\nfunction byShortPath(a, b) {\n  const aParts = a.split(path.sep);\n  const bParts = b.split(path.sep);\n  const aLength = aParts.length;\n  const bLength = bParts.length;\n  let cmp = 0;\n  if (aLength < bLength) {\n    cmp = -1;\n  } else if (aLength > bLength) {\n    cmp = 1;\n  } else {\n    let aPart, bPart;\n    for (let i = 0; i < aLength; ++i) {\n      aPart = aParts[i];\n      bPart = bParts[i];\n      if (aPart < bPart) {\n        cmp = -1;\n        break;\n      } else if (aPart > bPart) {\n        cmp = 1;\n        break;\n      }\n    }\n  }\n  return cmp;\n}\nexports.byShortPath = byShortPath;\n\n/**\n * Generate a list of directories to create given a list of file paths.\n * @param {Array<string>} files List of file paths.\n * @return {Array<string>} List of directory paths ordered by path length.\n */\nfunction dirsToCreate(files) {\n  return uniqueDirs(files).sort(byShortPath);\n}\nexports.dirsToCreate = dirsToCreate;\n\n/**\n * Copy a file.\n * @param {object} obj Object with src and dest properties.\n * @param {function(Error)} callback Callback\n */\nfunction copyFile(obj, callback) {\n  let called = false;\n  function done(err) {\n    if (!called) {\n      called = true;\n      callback(err);\n    }\n  }\n\n  const read = fs.createReadStream(obj.src);\n  read.on('error', (err) => {\n    done(err);\n  });\n\n  const write = fs.createWriteStream(obj.dest);\n  write.on('error', (err) => {\n    done(err);\n  });\n  write.on('close', () => {\n    done();\n  });\n\n  read.pipe(write);\n}\nexports.copyFile = copyFile;\n\n/**\n * Make directory, ignoring errors if directory already exists.\n * @param {string} path Directory path.\n * @param {function(Error)} callback Callback.\n */\nfunction makeDir(path, callback) {\n  fs.mkdir(path, (err) => {\n    if (err) {\n      // check if directory exists\n      fs.stat(path, (err2, stat) => {\n        if (err2 || !stat.isDirectory()) {\n          callback(err);\n        } else {\n          callback();\n        }\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\n/**\n * Copy a list of files.\n * @param {Array<string>} files Files to copy.\n * @param {string} base Base directory.\n * @param {string} dest Destination directory.\n * @return {Promise} A promise.\n */\nexports.copy = function (files, base, dest) {\n  return new Promise((resolve, reject) => {\n    const pairs = [];\n    const destFiles = [];\n    files.forEach((file) => {\n      const src = path.resolve(base, file);\n      const relative = path.relative(base, src);\n      const target = path.join(dest, relative);\n      pairs.push({\n        src: src,\n        dest: target,\n      });\n      destFiles.push(target);\n    });\n\n    async.eachSeries(dirsToCreate(destFiles), makeDir, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      async.each(pairs, copyFile, (err) => {\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve();\n        }\n      });\n    });\n  });\n};\n\nexports.getUser = function (cwd) {\n  return Promise.all([\n    new Git(cwd).exec('config', 'user.name'),\n    new Git(cwd).exec('config', 'user.email'),\n  ])\n    .then((results) => {\n      return {name: results[0].output.trim(), email: results[1].output.trim()};\n    })\n    .catch((err) => {\n      // git config exits with 1 if name or email is not set\n      return null;\n    });\n};\n"]}