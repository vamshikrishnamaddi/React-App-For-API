{"version":3,"sources":["email-addresses.js"],"names":["test","require","addrs","t","fxn","result","parseOneAddress","notOk","node","equal","address","name","local","domain","ok","parts","semantic","end","input","atInDisplayName","commaInDisplayName","undefined","comments","parseAddressList","length","addressListSeparator","ast","addresses","partial","rfc6532","check","s","comment","expected","rejectTLD","strict","parseFrom","parseSender","parseReplyTo"],"mappings":"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","file":"email-addresses.js","sourcesContent":["\nvar test = require(\"tap\").test;\n\nvar addrs = require(\"../lib/email-addresses\");\n\n\ntest(\"simple one address function\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    result = fxn(\"ABC < a@b.c>\") || {};\n    t.notOk(result.node, \"has no ast information\");\n    t.equal(result.address, \"a@b.c\", \"full address, semantic only\");\n    t.equal(result.name, \"ABC\", \"display name\");\n    t.equal(result.local, \"a\", \"local part\");\n    t.equal(result.domain, \"b.c\", \"domain\");\n\n    t.equal(fxn(\"bogus\"), null, \"bogus address > null\");\n    t.equal(fxn(\"a@b.c, d@e.f\"), null, \"address list > null\");\n\n    result = fxn(\"\\\"Françoise Lefèvre\\\"@example.com\");\n    t.ok(result, \"RFC 6532 (Unicode support) is enabled by default\");\n    t.equal(result.parts.local.semantic, \"Françoise Lefèvre\");\n\n    result = fxn(\"First Last <first@last.com>\");\n    t.equal(result.name, \"First Last\",\n        \"whitespace is not removed from display names without quotes\");\n\n    result = fxn(\"  First   Last   <first@last.com>\");\n    t.equal(result.name, \"First Last\",\n        \"whitespace in names is collapsed\");\n\n    t.end();\n});\n\ntest(\"address with @ in the name\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n    result = fxn({input: \"ABC@abc (comment) < a@b.c>\", atInDisplayName: true }) || {};\n    t.equal(result.name, \"ABC@abc\", \"display name\");\n    t.end();\n});\n\ntest(\"address with comma in the display name\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n    result = fxn({input: \"ABC, abc (comment) <a@b.c>\", commaInDisplayName: true }) || {};\n    t.equal(result.name, \"ABC, abc\", \"display name\");\n\n    result = fxn({input: \"ABC, abc (comment) <a@b.c>\", commaInDisplayName: false }) || {};\n    t.equal(result.name, undefined);\n    t.end();\n});\n\ntest(\"address with comments\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n    result = fxn(\"ABC (comment) < a@b.c>\" ) || {};\n    t.equal(result.name, \"ABC\", \"display name\");\n    t.equal(result.comments, '(comment)');\n    t.end();\n});\n\ntest(\"simple address list function\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseAddressList;\n\n    result = fxn(\"\\\"A B C\\\" < a@b.c>, d@e\") || [{}, {}];\n    t.notOk(result[0].node, \"has no ast information\");\n    t.equal(result[0].address, \"a@b.c\", \"full address, semantic only\");\n    t.equal(result[0].name, \"A B C\", \"display name\");\n    t.equal(result[0].local, \"a\", \"local part\");\n    t.equal(result[0].domain, \"b.c\", \"domain\");\n\n    t.notOk(result[1].node, \"has no ast information\");\n    t.equal(result[1].address, \"d@e\", \"second address\");\n    t.equal(result[1].name, null, \"second display name\");\n    t.equal(result[1].local, \"d\", \"second local part\");\n    t.equal(result[1].domain, \"e\", \"second domain\");\n\n    t.equal(fxn(\"bogus\"), null, \"bogus address > null\");\n    t.equal(fxn(\"a@b.c\").length, 1, \"single address > ok\");\n\n    result = fxn(\"\\\"Françoise Lefèvre\\\"@example.com\");\n    t.ok(result, \"RFC 6532 (Unicode support) is enabled by default\");\n\n    t.end();\n});\n\ntest(\"simple address list function with user-specified list separator\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseAddressList;\n\n    result = fxn({ input: \"\\\"A B C\\\" < a@b.c>; d@e\", addressListSeparator: \";\" }) || [{}, {}];\n    t.notOk(result[0].node, \"has no ast information\");\n    t.equal(result[0].address, \"a@b.c\", \"full address, semantic only\");\n    t.equal(result[0].name, \"A B C\", \"display name\");\n    t.equal(result[0].local, \"a\", \"local part\");\n    t.equal(result[0].domain, \"b.c\", \"domain\");\n\n    t.notOk(result[1].node, \"has no ast information\");\n    t.equal(result[1].address, \"d@e\", \"second address\");\n    t.equal(result[1].name, null, \"second display name\");\n    t.equal(result[1].local, \"d\", \"second local part\");\n    t.equal(result[1].domain, \"e\", \"second domain\");\n\n    t.end();\n});\n\ntest(\"rfc5322 parser\", function (t) {\n    var fxn, result;\n    fxn = addrs;\n\n    result = fxn(\"\\\"A B C\\\" < a@b.c>, d@e\") || {};\n    t.ok(result.ast, \"has an ast\");\n    t.ok(result.addresses.length, \"has the addresses\");\n\n    result = result.addresses;\n    t.ok(result[0].node, \"has link to node in ast\");\n    t.equal(result[0].address, \"a@b.c\", \"full address, semantic only\");\n    t.equal(result[0].name, \"A B C\", \"display name\");\n    t.equal(result[0].local, \"a\", \"local part\");\n    t.equal(result[0].domain, \"b.c\", \"domain\");\n\n    t.ok(result[1].node, \"has link to node in ast\");\n    t.equal(result[1].address, \"d@e\", \"second address\");\n    t.equal(result[1].name, null, \"second display name\");\n    t.equal(result[1].local, \"d\", \"second local part\");\n    t.equal(result[1].domain, \"e\", \"second domain\");\n\n    t.equal(fxn(\"bogus\"), null, \"bogus address > null\");\n    t.equal(fxn(\"a@b bogus\"), null, \"not all input is an email list > null\");\n\n    result = fxn({ input: \"a@b bogus\", partial: true });\n    t.ok(result, \"can obtain partial results if at beginning of string\");\n\n    result = fxn(\"\\\"Françoise Lefèvre\\\"@example.com\");\n    t.notOk(result, \"extended ascii characters are invalid according to RFC 5322\");\n\n    result = fxn({ input: \"\\\"Françoise Lefèvre\\\"@example.com\", rfc6532: true });\n    t.ok(result, \"but extended ascii is allowed starting with RFC 6532\");\n\n    t.end();\n});\n\ntest(\"display-name semantic interpretation\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    function check(s, comment, expected) {\n        t.equal(fxn(s).name, expected || \"First Last\", comment);\n    }\n\n    check(\n        \"First<foo@bar.com>\",\n        \"single basic name is ok\",\n        \"First\");\n\n    check(\n        \"First Last<foo@bar.com>\",\n        \"no extra whitespace is ok\");\n\n    check(\n        \" First Last <foo@bar.com>\",\n        \"single whitespace at beginning and end is removed\");\n\n    check(\n        \"First   Last<foo@bar.com>\",\n        \"whitespace in the middle is collapsed\");\n\n    check(\n        \"   First    Last     <foo@bar.com>\",\n        \"extra whitespace everywhere is collapsed\");\n\n    check(\n        \"   First  Middle   Last     <foo@bar.com>\",\n        \"extra whitespace everywhere is collapsed, with more than 2 names\",\n        \"First Middle Last\");\n\n    check(\n        \"\\tFirst \\t  Last\\t<foo@bar.com>\",\n        \"extra whitespace everywhere is collapsed with a mix of tabs and spaces\");\n\n    check(\n        \"\\\"First Last\\\"<foo@bar.com>\",\n        \"surrounding quotes are not semantic\");\n\n    check(\n        \" \\t \\\"First   Last\\\" <foo@bar.com>\",\n        \"surrounding quotes are not semantic and whitespace is collapsed\");\n\n    check(\n        \" \\t \\\"First \\\\\\\"The\\t\\tNickname\\\\\\\"  Last\\\" <foo@bar.com>\",\n        \"surrounding quotes are not semantic, but inner quotes are, and whitespace is collapsed\",\n        \"First \\\"The Nickname\\\" Last\");\n\n    t.end();\n});\n\ntest(\"address semantic interpretation\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    function check(s, comment, expected) {\n        t.equal(fxn(s).address, expected || \"foo@bar.com\", comment);\n    }\n\n    check(\n        \"foo@bar.com\",\n        \"plain address is ok\");\n\n    check(\n        \"  foo@bar.com  \",\n        \"plain address with whitespace at beginning and end\");\n\n    check(\n        \"foo  @bar.com\",\n        \"plain address with whitespace left of @ sign\");\n\n    check(\n        \"foo@  bar.com\",\n        \"plain address with whitespace right of @ sign\");\n\n    // Technically, we should also be able to handle removing CFWS in\n    // a dot-atom (or more importantly, obs-domain), but I don't think anyone cares.\n\n    check(\n        \"\\t  foo\\t\\t@ \\t  bar.com \\t \",\n        \"plain address with whitespace everywhere\");\n\n    check(\n        \"Bob <\\t  foo\\t\\t@ \\t  bar.com \\t >\",\n        \"angle-addr with whitespace everywhere\");\n\n    check(\n        \"\\\"foo\\\"@bar.com\",\n        \"plain address with quoted-string local-part\");\n\n    check(\n        \"\\\"foo   baz\\\"@bar.com\",\n        \"plain address with quoted-string local-part including spaces\" +\n        \" (Note: This is a confusing situation for 'semantic' local-parts, and\" +\n        \" in this case we don't return a valid address. Don't use this. Just\" +\n        \" take the raw tokens used for the address if you always want it to be equivalent.)\",\n        \"foo baz@bar.com\");\n\n    t.end();\n});\n\ntest(\"unicode support\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    result = fxn(\"\\\"Françoise Lefèvre\\\"@example.com\");\n    t.ok(result, \"extended ascii characters are allowed\");\n\n    result = fxn(\"杨孝宇 <xiaoyu@example.com>\");\n    t.ok(result, \"unicode support includes chinese characters (display-name, no quoted string)\");\n\n    result = fxn(\"\\\"杨孝宇\\\" <xiaoyu@example.com>\");\n    t.ok(result, \"unicode support includes chinese characters (display-name, quoted-string)\");\n\n    t.end();\n});\n\ntest(\"rejectTLD option\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    result = fxn({ input: \"foo@bar.com\", rejectTLD: false });\n    t.ok(result, \"a simple address is ok (rejectTLD false)\");\n\n    result = fxn({ input: \"foo@bar.com\", rejectTLD: true });\n    t.ok(result, \"a simple address is ok (rejectTLD true)\");\n\n    result = fxn({ input: \"\\\"Foo Bar\\\" <foo@bar.com>\", rejectTLD: false });\n    t.ok(result, \"a more complicated address is ok (rejectTLD false)\");\n\n    result = fxn({ input: \"\\\"Foo Bar\\\" <foo@bar.com>\", rejectTLD: true });\n    t.ok(result, \"a more complicated address is ok (rejectTLD true)\");\n\n    result = fxn({ input: \"foo@bar\", rejectTLD: false });\n    t.ok(result, \"an address with a TLD for its domain is allowed by rfc 5322\");\n\n    result = fxn({ input: \"foo@bar\", rejectTLD: true });\n    t.notOk(result, \"an address with a TLD for its domain is rejected when the option is set\");\n\n    result = fxn({ input: \"\\\"Foo Bar\\\" <foo@bar>\", rejectTLD: false });\n    t.ok(result, \"a more complicated address with a TLD for its domain is allowed by rfc 5322\");\n\n    result = fxn({ input: \"\\\"Foo Bar\\\" <foo@bar>\", rejectTLD: true });\n    t.notOk(result, \"a more complicated address with a TLD for its domain is rejected when the option is set\");\n\n    result = fxn({ input: \"jack@\", rejectTLD: true });\n    t.notOk(result, \"no domain is ok with rejectTLD set\");\n\n    t.end();\n});\n\ntest(\"dots in unquoted display-names\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    result = fxn(\"H.P. Lovecraft <foo@bar.net>\");\n    t.ok(result, \"dots in the middle of an unquoted display-name with spaces (obs-phrase production)\");\n\n    result = fxn(\"Hmm Yes Info. <foo@bar.net>\");\n    t.ok(result, \"dots to end an unquoted display-name (obs-phrase production)\");\n\n    result = fxn(\"bar.net <foo@bar.net>\");\n    t.ok(result, \"dots in the middle of an unquoted display-name without spaces (obs-phrase production)\");\n\n    result = fxn({ input: \"H.P. Lovecraft <foo@bar.net>\", strict: true });\n    t.notOk(result, \"dots without using 'obsolete' productions\");\n\n    result = fxn({ input: \"Hmm Yes Info. <foo@bar.net>\", strict: true });\n    t.notOk(result, \"dots without using 'obsolete' productions\");\n\n    result = fxn({ input: \"bar.net <foo@bar.net>\", strict: true });\n    t.notOk(result, \"dots without using 'obsolete' productions\");\n\n    t.end();\n});\n\ntest(\"rfc6854 - from\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseFrom;\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;\");\n    t.ok(result, \"Parse group for From:\");\n    t.equal(result[0].name, \"Managing Partners\", \"Extract group name\");\n    t.equal(result[0].addresses.length, 2, \"Extract group addresses\");\n    t.equal(result[0].addresses[0].address, \"ben@example.com\", \"Group address 1\");\n    t.equal(result[0].addresses[1].address, \"carol@example.com\", \"Group address 1\")\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;, \\\"Foo\\\" <foo@example.com>\");\n    t.ok(result, \"Group and mailbox\");\n    t.equal(result[0].name, \"Managing Partners\", \"Extract group name\");\n    t.equal(result[1].name, \"Foo\", \"Second address name\");\n    t.equal(result[1].local, \"foo\", \"Second address local\");\n    t.equal(result[1].domain, \"example.com\", \"Second address domain\");\n\n    t.end();\n});\n\ntest(\"rfc6854 - sender\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseSender;\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;\");\n    t.ok(result, \"Parse group for Sender:\");\n    t.equal(result.length, undefined, \"Result is not an array\");\n    t.equal(result.name, \"Managing Partners\", \"Result has name\");\n    t.equal(result.local, undefined, \"Result has no local part\");\n    t.equal(result.addresses.length, 2, \"Result has two addresses\");\n    t.equal(result.addresses[0].address, \"ben@example.com\", \"Result first address match\");\n    t.equal(result.addresses[1].address, \"carol@example.com\", \"Result first address match\");\n\n    t.end();\n});\n\ntest(\"rfc6854 - reply-to\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseReplyTo;\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;\");\n    t.ok(result, \"Parse group for Reply-To:\");\n    t.equal(result[0].name, \"Managing Partners\", \"Extract group name\");\n    t.equal(result[0].addresses.length, 2, \"Extract group addresses\");\n    t.equal(result[0].addresses[0].address, \"ben@example.com\", \"Group address 1\");\n    t.equal(result[0].addresses[1].address, \"carol@example.com\", \"Group address 1\")\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;, \\\"Foo\\\" <foo@example.com>\");\n    t.ok(result, \"Group and mailbox\");\n    t.equal(result[0].name, \"Managing Partners\", \"Extract group name\");\n    t.equal(result[1].name, \"Foo\", \"Second address name\");\n    t.equal(result[1].local, \"foo\", \"Second address local\");\n    t.equal(result[1].domain, \"example.com\", \"Second address domain\");\n\n    result = fxn(\"Managing Partners:ben@example.com,carol@example.com;, \\\"Foo\\\" <foo@example.com>, Group2:alice@example.com;\");\n    t.ok(result, \"Group, mailbox, group\");\n    t.equal(result[0].name, \"Managing Partners\", \"First: group name\");\n    t.equal(result[0].addresses[0].address, \"ben@example.com\");\n    t.equal(result[0].addresses[1].address, \"carol@example.com\");\n    t.equal(result[1].name, \"Foo\", \"Second: address name\");\n    t.equal(result[2].name, \"Group2\", \"Third: group name\");\n\n    t.end();\n});\n\ntest(\"whitespace in domain\", function (t) {\n    var fxn, result;\n    fxn = addrs.parseOneAddress;\n\n    result = fxn('\":sysmail\"@ Some-Group. Some-Org');\n    t.ok(result, \"spaces in domain parses ok\");\n    t.equal(result.domain, \"Some-Group.Some-Org\", \"domain parsing strips whitespace\");\n\n    t.end();\n})\n"]}