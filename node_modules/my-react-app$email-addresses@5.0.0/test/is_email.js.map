{"version":3,"sources":["is_email.js"],"names":["fs","require","libxmljs","test","addrs","TESTS_FILE","TESTS_FILE_ENCODING","ISEMAIL_ERR","ISEMAIL_ERR_DOMAINHYPHENSTART","ISEMAIL_ERR_DOMAINHYPHENEND","isEmailTest","t","data","nodes","getNodes","forEach","node","id","getAttr","address","getChildValue","diagnosis","result","convertAddress","ast","addresses","isValid","expectedToBeValid","shouldParse","equal","end","isOk","startsWith","s","chars","i","length","code","charCodeAt","push","String","fromCharCode","join","parent","nodeName","find","text","attrName","attr","value","xml","xpath","doc","parseXml","substring","readFile","err","console","error"],"mappings":"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","file":"is_email.js","sourcesContent":["var fs = require(\"fs\"),\n    libxmljs = require(\"libxmljs\"),\n    test = require(\"tap\").test;\n\nvar addrs = require(\"../lib/email-addresses\");\n\nvar TESTS_FILE = \"tests.xml\",\n    TESTS_FILE_ENCODING = \"utf8\";\n\nvar ISEMAIL_ERR = \"ISEMAIL_ERR\",\n    ISEMAIL_ERR_DOMAINHYPHENSTART = \"ISEMAIL_ERR_DOMAINHYPHENSTART\",\n    ISEMAIL_ERR_DOMAINHYPHENEND = \"ISEMAIL_ERR_DOMAINHYPHENEND\";\n\n\nfunction isEmailTest(t, data) {\n    var nodes = getNodes(data, \"//test\");\n    nodes.forEach(function (node) {\n        var id = getAttr(node, \"id\"),\n            address = getChildValue(node, \"address\"),\n            diagnosis = getChildValue(node, \"diagnosis\");\n\n        var result = addrs(convertAddress(address)),\n            ast = null;\n        if (result !== null) {\n            ast = result.addresses[0].node;\n        }\n\n        var isValid = ast !== null,\n            expectedToBeValid = shouldParse(diagnosis);\n\n        t.equal(isValid, expectedToBeValid,\n            \"[test \" + id + \"] address: \" + address + \", expects: \" + expectedToBeValid);\n    });\n    t.end();\n}\n\nfunction shouldParse(diagnosis) {\n    var isOk = !startsWith(diagnosis, ISEMAIL_ERR) ||\n        // is_email considers address with a domain beginning\n        // or ending with \"-\" to be incorrect because they are not\n        // valid domains, but we are only concerned with rfc5322.\n        // From rfc5322's perspective, this is OK.\n        diagnosis === ISEMAIL_ERR_DOMAINHYPHENSTART ||\n        diagnosis === ISEMAIL_ERR_DOMAINHYPHENEND;\n    return isOk;\n}\n\n// the is_email tests encode control characters\n// in the U+2400 block for display purposes\nfunction convertAddress(s) {\n    var chars = [];\n    for (var i = 0; i < s.length; i += 1) {\n        var code = s.charCodeAt(i);\n        if (code >= 0x2400) {\n            code -= 0x2400;\n        }\n        chars.push(String.fromCharCode(code));\n    }\n    return chars.join('');\n}\n\nfunction getChildValue(parent, nodeName) {\n    return parent.find(nodeName)[0].text();\n}\n\nfunction getAttr(node, attrName) {\n    return node.attr(attrName).value();\n}\n\nfunction getNodes(xml, xpath) {\n    var doc = libxmljs.parseXml(xml);\n    return doc.find(xpath);\n}\n\nfunction startsWith(s, t) {\n    return s.substring(0, t.length) === t;\n}\n\ntest(\"isemail tests\", function (t) {\n    fs.readFile(TESTS_FILE, TESTS_FILE_ENCODING, function (err, data) {\n        if (err) {\n            t.end();\n            return console.error(err);\n        }\n        isEmailTest(t, data);\n    });\n});\n"]}