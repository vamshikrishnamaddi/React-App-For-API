{"version":3,"sources":["email-addresses.js"],"names":["global","parse5322","opts","inStr","pos","len","curTok","parseString","getPos","setPos","i","nextTok","initialize","length","o","name","value","tokens","semantic","children","wrap","ast","n","push","add","parent","child","compareToken","fxnCompare","tok","noop","literal","lit","literalFunc","and","args","arguments","andFunc","s","result","start","or","orFunc","opt","prod","optFunc","invis","invisFunc","colwsp","collapseSemanticWhitespace","star","minimum","starFunc","count","min","undefined","collapseWhitespace","replace","isUTF8NonAscii","charCodeAt","cr","crlf","lf","dquote","htab","sp","vchar","vcharFunc","code","accept","rfc6532","wsp","quotedPair","qp","obsQP","fws","obsFws","ctext","ctextFunc1","ctextFunc2","obsCtext","ccontent","comment","cfws","atext","atextFunc","indexOf","atom","dotAtomText","maybeText","dotAtom","qtext","qtextFunc1","qtextFunc2","obsQtext","qcontent","quotedString","word","phrase","obsPhrase","address","mailbox","group","nameAddr","addrSpec","displayName","angleAddr","obsAngleAddr","groupList","phraseFixedSemantic","mailboxList","obsMboxList","addressList","addressListSeparator","obsAddrList","obsGroupList","localPart","obsLocalPart","dtext","dtextFunc1","dtextFunc2","obsDtext","domainLiteral","domain","domainCheckTLD","obsDomain","rejectTLD","obsNoWsCtl","strict","atInDisplayName","commaInDisplayName","obsRoute","obsDomainList","findNode","root","stack","node","pop","findAllNodes","findAllNodesNoChildren","names","namesLookup","giveResult","addresses","groupsAndMailboxes","groupOrMailbox","giveResultGroup","giveResultMailbox","simple","simplifyResult","oneResult","groupName","groupResultMailboxes","mailboxes","parts","type","grabSemantic","aspec","comments","local","concatComments","partial","parsed","startProduction","handleOpts","input","fromSpec","replyToSpec","senderSpec","startAt","defs","isString","str","Object","prototype","toString","call","isObject","isNullUndef","defaults","parseOneAddress","parseOneAddressSimple","parseAddressList","parseAddressListSimple","parseFrom","parseFromSimple","parseSender","parseSenderSimple","parseReplyTo","parseReplyToSimple","module","exports","emailAddresses"],"mappings":"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","file":"email-addresses.js","sourcesContent":["\n// email-addresses.js - RFC 5322 email address parser\n// v 5.0.0\n//\n// http://tools.ietf.org/html/rfc5322\n//\n// This library does not validate email addresses.\n// emailAddresses attempts to parse addresses using the (fairly liberal)\n// grammar specified in RFC 5322.\n//\n// email-addresses returns {\n//     ast: <an abstract syntax tree based on rfc5322>,\n//     addresses: [{\n//            node: <node in ast for this address>,\n//            name: <display-name>,\n//            address: <addr-spec>,\n//            local: <local-part>,\n//            domain: <domain>\n//         }, ...]\n// }\n//\n// emailAddresses.parseOneAddress and emailAddresses.parseAddressList\n// work as you might expect. Try it out.\n//\n// Many thanks to Dominic Sayers and his documentation on the is_email function,\n// http://code.google.com/p/isemail/ , which helped greatly in writing this parser.\n\n(function (global) {\n\"use strict\";\n\nfunction parse5322(opts) {\n\n    // tokenizing functions\n\n    function inStr() { return pos < len; }\n    function curTok() { return parseString[pos]; }\n    function getPos() { return pos; }\n    function setPos(i) { pos = i; }\n    function nextTok() { pos += 1; }\n    function initialize() {\n        pos = 0;\n        len = parseString.length;\n    }\n\n    // parser helper functions\n\n    function o(name, value) {\n        return {\n            name: name,\n            tokens: value || \"\",\n            semantic: value || \"\",\n            children: []\n        };\n    }\n\n    function wrap(name, ast) {\n        var n;\n        if (ast === null) { return null; }\n        n = o(name);\n        n.tokens = ast.tokens;\n        n.semantic = ast.semantic;\n        n.children.push(ast);\n        return n;\n    }\n\n    function add(parent, child) {\n        if (child !== null) {\n            parent.tokens += child.tokens;\n            parent.semantic += child.semantic;\n        }\n        parent.children.push(child);\n        return parent;\n    }\n\n    function compareToken(fxnCompare) {\n        var tok;\n        if (!inStr()) { return null; }\n        tok = curTok();\n        if (fxnCompare(tok)) {\n            nextTok();\n            return o('token', tok);\n        }\n        return null;\n    }\n\n    function noop() {\n        return null;\n    }\n\n    function literal(lit) {\n        return function literalFunc() {\n            return wrap('literal', compareToken(function (tok) {\n                return tok === lit;\n            }));\n        };\n    }\n\n    function and() {\n        var args = arguments;\n        return function andFunc() {\n            var i, s, result, start;\n            start = getPos();\n            s = o('and');\n            for (i = 0; i < args.length; i += 1) {\n                result = args[i]();\n                if (result === null) {\n                    setPos(start);\n                    return null;\n                }\n                add(s, result);\n            }\n            return s;\n        };\n    }\n\n    function or() {\n        var args = arguments;\n        return function orFunc() {\n            var i, result, start;\n            start = getPos();\n            for (i = 0; i < args.length; i += 1) {\n                result = args[i]();\n                if (result !== null) {\n                    return result;\n                }\n                setPos(start);\n            }\n            return null;\n        };\n    }\n\n    function opt(prod) {\n        return function optFunc() {\n            var result, start;\n            start = getPos();\n            result = prod();\n            if (result !== null) {\n                return result;\n            }\n            else {\n                setPos(start);\n                return o('opt');\n            }\n        };\n    }\n\n    function invis(prod) {\n        return function invisFunc() {\n            var result = prod();\n            if (result !== null) {\n                result.semantic = \"\";\n            }\n            return result;\n        };\n    }\n\n    function colwsp(prod) {\n        return function collapseSemanticWhitespace() {\n            var result = prod();\n            if (result !== null && result.semantic.length > 0) {\n                result.semantic = \" \";\n            }\n            return result;\n        };\n    }\n\n    function star(prod, minimum) {\n        return function starFunc() {\n            var s, result, count, start, min;\n            start = getPos();\n            s = o('star');\n            count = 0;\n            min = minimum === undefined ? 0 : minimum;\n            while ((result = prod()) !== null) {\n                count = count + 1;\n                add(s, result);\n            }\n            if (count >= min) {\n                return s;\n            }\n            else {\n                setPos(start);\n                return null;\n            }\n        };\n    }\n\n    // One expects names to get normalized like this:\n    // \"  First  Last \" -> \"First Last\"\n    // \"First Last\" -> \"First Last\"\n    // \"First   Last\" -> \"First Last\"\n    function collapseWhitespace(s) {\n        return s.replace(/([ \\t]|\\r\\n)+/g, ' ').replace(/^\\s*/, '').replace(/\\s*$/, '');\n    }\n\n    // UTF-8 pseudo-production (RFC 6532)\n    // RFC 6532 extends RFC 5322 productions to include UTF-8\n    // using the following productions:\n    // UTF8-non-ascii  =   UTF8-2 / UTF8-3 / UTF8-4\n    // UTF8-2          =   <Defined in Section 4 of RFC3629>\n    // UTF8-3          =   <Defined in Section 4 of RFC3629>\n    // UTF8-4          =   <Defined in Section 4 of RFC3629>\n    //\n    // For reference, the extended RFC 5322 productions are:\n    // VCHAR   =/  UTF8-non-ascii\n    // ctext   =/  UTF8-non-ascii\n    // atext   =/  UTF8-non-ascii\n    // qtext   =/  UTF8-non-ascii\n    // dtext   =/  UTF8-non-ascii\n    function isUTF8NonAscii(tok) {\n        // In JavaScript, we just deal directly with Unicode code points,\n        // so we aren't checking individual bytes for UTF-8 encoding.\n        // Just check that the character is non-ascii.\n        return tok.charCodeAt(0) >= 128;\n    }\n\n\n    // common productions (RFC 5234)\n    // http://tools.ietf.org/html/rfc5234\n    // B.1. Core Rules\n\n    // CR             =  %x0D\n    //                         ; carriage return\n    function cr() { return wrap('cr', literal('\\r')()); }\n\n    // CRLF           =  CR LF\n    //                         ; Internet standard newline\n    function crlf() { return wrap('crlf', and(cr, lf)()); }\n\n    // DQUOTE         =  %x22\n    //                         ; \" (Double Quote)\n    function dquote() { return wrap('dquote', literal('\"')()); }\n\n    // HTAB           =  %x09\n    //                         ; horizontal tab\n    function htab() { return wrap('htab', literal('\\t')()); }\n\n    // LF             =  %x0A\n    //                         ; linefeed\n    function lf() { return wrap('lf', literal('\\n')()); }\n\n    // SP             =  %x20\n    function sp() { return wrap('sp', literal(' ')()); }\n\n    // VCHAR          =  %x21-7E\n    //                         ; visible (printing) characters\n    function vchar() {\n        return wrap('vchar', compareToken(function vcharFunc(tok) {\n            var code = tok.charCodeAt(0);\n            var accept = (0x21 <= code && code <= 0x7E);\n            if (opts.rfc6532) {\n                accept = accept || isUTF8NonAscii(tok);\n            }\n            return accept;\n        }));\n    }\n\n    // WSP            =  SP / HTAB\n    //                         ; white space\n    function wsp() { return wrap('wsp', or(sp, htab)()); }\n\n\n    // email productions (RFC 5322)\n    // http://tools.ietf.org/html/rfc5322\n    // 3.2.1. Quoted characters\n\n    // quoted-pair     =   (\"\\\" (VCHAR / WSP)) / obs-qp\n    function quotedPair() {\n        var qp = wrap('quoted-pair',\n        or(\n            and(literal('\\\\'), or(vchar, wsp)),\n            obsQP\n        )());\n        if (qp === null) { return null; }\n        // a quoted pair will be two characters, and the \"\\\" character\n        // should be semantically \"invisible\" (RFC 5322 3.2.1)\n        qp.semantic = qp.semantic[1];\n        return qp;\n    }\n\n    // 3.2.2. Folding White Space and Comments\n\n    // FWS             =   ([*WSP CRLF] 1*WSP) /  obs-FWS\n    function fws() {\n        return wrap('fws', or(\n            obsFws,\n            and(\n                opt(and(\n                    star(wsp),\n                    invis(crlf)\n                   )),\n                star(wsp, 1)\n            )\n        )());\n    }\n\n    // ctext           =   %d33-39 /          ; Printable US-ASCII\n    //                     %d42-91 /          ;  characters not including\n    //                     %d93-126 /         ;  \"(\", \")\", or \"\\\"\n    //                     obs-ctext\n    function ctext() {\n        return wrap('ctext', or(\n            function ctextFunc1() {\n                return compareToken(function ctextFunc2(tok) {\n                    var code = tok.charCodeAt(0);\n                    var accept =\n                        (33 <= code && code <= 39) ||\n                        (42 <= code && code <= 91) ||\n                        (93 <= code && code <= 126);\n                    if (opts.rfc6532) {\n                        accept = accept || isUTF8NonAscii(tok);\n                    }\n                    return accept;\n                });\n            },\n            obsCtext\n        )());\n    }\n\n    // ccontent        =   ctext / quoted-pair / comment\n    function ccontent() {\n        return wrap('ccontent', or(ctext, quotedPair, comment)());\n    }\n\n    // comment         =   \"(\" *([FWS] ccontent) [FWS] \")\"\n    function comment() {\n        return wrap('comment', and(\n            literal('('),\n            star(and(opt(fws), ccontent)),\n            opt(fws),\n            literal(')')\n        )());\n    }\n\n    // CFWS            =   (1*([FWS] comment) [FWS]) / FWS\n    function cfws() {\n        return wrap('cfws', or(\n            and(\n                star(\n                    and(opt(fws), comment),\n                    1\n                ),\n                opt(fws)\n            ),\n            fws\n        )());\n    }\n\n    // 3.2.3. Atom\n\n    //atext           =   ALPHA / DIGIT /    ; Printable US-ASCII\n    //                       \"!\" / \"#\" /        ;  characters not including\n    //                       \"$\" / \"%\" /        ;  specials.  Used for atoms.\n    //                       \"&\" / \"'\" /\n    //                       \"*\" / \"+\" /\n    //                       \"-\" / \"/\" /\n    //                       \"=\" / \"?\" /\n    //                       \"^\" / \"_\" /\n    //                       \"`\" / \"{\" /\n    //                       \"|\" / \"}\" /\n    //                       \"~\"\n    function atext() {\n        return wrap('atext', compareToken(function atextFunc(tok) {\n            var accept =\n                ('a' <= tok && tok <= 'z') ||\n                ('A' <= tok && tok <= 'Z') ||\n                ('0' <= tok && tok <= '9') ||\n                (['!', '#', '$', '%', '&', '\\'', '*', '+', '-', '/',\n                  '=', '?', '^', '_', '`', '{', '|', '}', '~'].indexOf(tok) >= 0);\n            if (opts.rfc6532) {\n                accept = accept || isUTF8NonAscii(tok);\n            }\n            return accept;\n        }));\n    }\n\n    // atom            =   [CFWS] 1*atext [CFWS]\n    function atom() {\n        return wrap('atom', and(colwsp(opt(cfws)), star(atext, 1), colwsp(opt(cfws)))());\n    }\n\n    // dot-atom-text   =   1*atext *(\".\" 1*atext)\n    function dotAtomText() {\n        var s, maybeText;\n        s = wrap('dot-atom-text', star(atext, 1)());\n        if (s === null) { return s; }\n        maybeText = star(and(literal('.'), star(atext, 1)))();\n        if (maybeText !== null) {\n            add(s, maybeText);\n        }\n        return s;\n    }\n\n    // dot-atom        =   [CFWS] dot-atom-text [CFWS]\n    function dotAtom() {\n        return wrap('dot-atom', and(invis(opt(cfws)), dotAtomText, invis(opt(cfws)))());\n    }\n\n    // 3.2.4. Quoted Strings\n\n    //  qtext           =   %d33 /             ; Printable US-ASCII\n    //                      %d35-91 /          ;  characters not including\n    //                      %d93-126 /         ;  \"\\\" or the quote character\n    //                      obs-qtext\n    function qtext() {\n        return wrap('qtext', or(\n            function qtextFunc1() {\n                return compareToken(function qtextFunc2(tok) {\n                    var code = tok.charCodeAt(0);\n                    var accept =\n                        (33 === code) ||\n                        (35 <= code && code <= 91) ||\n                        (93 <= code && code <= 126);\n                    if (opts.rfc6532) {\n                        accept = accept || isUTF8NonAscii(tok);\n                    }\n                    return accept;\n                });\n            },\n            obsQtext\n        )());\n    }\n\n    // qcontent        =   qtext / quoted-pair\n    function qcontent() {\n        return wrap('qcontent', or(qtext, quotedPair)());\n    }\n\n    //  quoted-string   =   [CFWS]\n    //                      DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n    //                      [CFWS]\n    function quotedString() {\n        return wrap('quoted-string', and(\n            invis(opt(cfws)),\n            invis(dquote), star(and(opt(colwsp(fws)), qcontent)), opt(invis(fws)), invis(dquote),\n            invis(opt(cfws))\n        )());\n    }\n\n    // 3.2.5 Miscellaneous Tokens\n\n    // word            =   atom / quoted-string\n    function word() {\n        return wrap('word', or(atom, quotedString)());\n    }\n\n    // phrase          =   1*word / obs-phrase\n    function phrase() {\n        return wrap('phrase', or(obsPhrase, star(word, 1))());\n    }\n\n    // 3.4. Address Specification\n    //   address         =   mailbox / group\n    function address() {\n        return wrap('address', or(mailbox, group)());\n    }\n\n    //   mailbox         =   name-addr / addr-spec\n    function mailbox() {\n        return wrap('mailbox', or(nameAddr, addrSpec)());\n    }\n\n    //   name-addr       =   [display-name] angle-addr\n    function nameAddr() {\n        return wrap('name-addr', and(opt(displayName), angleAddr)());\n    }\n\n    //   angle-addr      =   [CFWS] \"<\" addr-spec \">\" [CFWS] /\n    //                       obs-angle-addr\n    function angleAddr() {\n        return wrap('angle-addr', or(\n            and(\n                invis(opt(cfws)),\n                literal('<'),\n                addrSpec,\n                literal('>'),\n                invis(opt(cfws))\n            ),\n            obsAngleAddr\n        )());\n    }\n\n    //   group           =   display-name \":\" [group-list] \";\" [CFWS]\n    function group() {\n        return wrap('group', and(\n            displayName,\n            literal(':'),\n            opt(groupList),\n            literal(';'),\n            invis(opt(cfws))\n        )());\n    }\n\n    //   display-name    =   phrase\n    function displayName() {\n        return wrap('display-name', function phraseFixedSemantic() {\n            var result = phrase();\n            if (result !== null) {\n                result.semantic = collapseWhitespace(result.semantic);\n            }\n            return result;\n        }());\n    }\n\n    //   mailbox-list    =   (mailbox *(\",\" mailbox)) / obs-mbox-list\n    function mailboxList() {\n        return wrap('mailbox-list', or(\n            and(\n                mailbox,\n                star(and(literal(','), mailbox))\n            ),\n            obsMboxList\n        )());\n    }\n\n    //   address-list    =   (address *(\",\" address)) / obs-addr-list\n    function addressList() {\n        return wrap('address-list', or(\n            and(\n                address,\n                star(and(literal(opts.addressListSeparator), address))\n            ),\n            obsAddrList\n        )());\n    }\n\n    //   group-list      =   mailbox-list / CFWS / obs-group-list\n    function groupList() {\n        return wrap('group-list', or(\n            mailboxList,\n            invis(cfws),\n            obsGroupList\n        )());\n    }\n\n    // 3.4.1 Addr-Spec Specification\n\n    // local-part      =   dot-atom / quoted-string / obs-local-part\n    function localPart() {\n        // note: quoted-string, dotAtom are proper subsets of obs-local-part\n        // so we really just have to look for obsLocalPart, if we don't care about the exact parse tree\n        return wrap('local-part', or(obsLocalPart, dotAtom, quotedString)());\n    }\n\n    //  dtext           =   %d33-90 /          ; Printable US-ASCII\n    //                      %d94-126 /         ;  characters not including\n    //                      obs-dtext          ;  \"[\", \"]\", or \"\\\"\n    function dtext() {\n        return wrap('dtext', or(\n            function dtextFunc1() {\n                return compareToken(function dtextFunc2(tok) {\n                    var code = tok.charCodeAt(0);\n                    var accept =\n                        (33 <= code && code <= 90) ||\n                        (94 <= code && code <= 126);\n                    if (opts.rfc6532) {\n                        accept = accept || isUTF8NonAscii(tok);\n                    }\n                    return accept;\n                });\n            },\n            obsDtext\n            )()\n        );\n    }\n\n    // domain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n    function domainLiteral() {\n        return wrap('domain-literal', and(\n            invis(opt(cfws)),\n            literal('['),\n            star(and(opt(fws), dtext)),\n            opt(fws),\n            literal(']'),\n            invis(opt(cfws))\n        )());\n    }\n\n    // domain          =   dot-atom / domain-literal / obs-domain\n    function domain() {\n        return wrap('domain', function domainCheckTLD() {\n            var result = or(obsDomain, dotAtom, domainLiteral)();\n            if (opts.rejectTLD) {\n                if (result && result.semantic && result.semantic.indexOf('.') < 0) {\n                    return null;\n                }\n            }\n            // strip all whitespace from domains\n            if (result) {\n                result.semantic = result.semantic.replace(/\\s+/g, '');\n            }\n            return result;\n        }());\n    }\n\n    // addr-spec       =   local-part \"@\" domain\n    function addrSpec() {\n        return wrap('addr-spec', and(\n            localPart, literal('@'), domain\n        )());\n    }\n\n    // 3.6.2 Originator Fields\n    // Below we only parse the field body, not the name of the field\n    // like \"From:\", \"Sender:\", or \"Reply-To:\". Other libraries that\n    // parse email headers can parse those and defer to these productions\n    // for the \"RFC 5322\" part.\n\n    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields\n    // from = \"From:\" (mailbox-list / address-list) CRLF\n    function fromSpec() {\n        return wrap('from', or(\n            mailboxList,\n            addressList\n        )());\n    }\n\n    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields\n    // sender = \"Sender:\" (mailbox / address) CRLF\n    function senderSpec() {\n        return wrap('sender', or(\n            mailbox,\n            address\n        )());\n    }\n\n    // RFC 6854 2.1. Replacement of RFC 5322, Section 3.6.2. Originator Fields\n    // reply-to = \"Reply-To:\" address-list CRLF\n    function replyToSpec() {\n        return wrap('reply-to', addressList());\n    }\n\n    // 4.1. Miscellaneous Obsolete Tokens\n\n    //  obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control\n    //                      %d11 /             ;  characters that do not\n    //                      %d12 /             ;  include the carriage\n    //                      %d14-31 /          ;  return, line feed, and\n    //                      %d127              ;  white space characters\n    function obsNoWsCtl() {\n        return opts.strict ? null : wrap('obs-NO-WS-CTL', compareToken(function (tok) {\n            var code = tok.charCodeAt(0);\n            return ((1 <= code && code <= 8) ||\n                    (11 === code || 12 === code) ||\n                    (14 <= code && code <= 31) ||\n                    (127 === code));\n        }));\n    }\n\n    // obs-ctext       =   obs-NO-WS-CTL\n    function obsCtext() { return opts.strict ? null : wrap('obs-ctext', obsNoWsCtl()); }\n\n    // obs-qtext       =   obs-NO-WS-CTL\n    function obsQtext() { return opts.strict ? null : wrap('obs-qtext', obsNoWsCtl()); }\n\n    // obs-qp          =   \"\\\" (%d0 / obs-NO-WS-CTL / LF / CR)\n    function obsQP() {\n        return opts.strict ? null : wrap('obs-qp', and(\n            literal('\\\\'),\n            or(literal('\\0'), obsNoWsCtl, lf, cr)\n        )());\n    }\n\n    // obs-phrase      =   word *(word / \".\" / CFWS)\n    function obsPhrase() {\n        return opts.strict\n          ? null\n          : wrap('obs-phrase', and(\n              word,\n              star(or(\n                  word,\n                  literal('.'),\n                  opts.atInDisplayName ? literal('@') : noop,\n                  opts.commaInDisplayName ? literal(',') : noop,\n                  colwsp(cfws)))\n            )());\n    }\n\n    // 4.2. Obsolete Folding White Space\n\n    // NOTE: read the errata http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908\n    // obs-FWS         =   1*([CRLF] WSP)\n    function obsFws() {\n        return opts.strict ? null : wrap('obs-FWS', star(\n            and(invis(opt(crlf)), wsp),\n            1\n        )());\n    }\n\n    // 4.4. Obsolete Addressing\n\n    // obs-angle-addr  =   [CFWS] \"<\" obs-route addr-spec \">\" [CFWS]\n    function obsAngleAddr() {\n        return opts.strict ? null : wrap('obs-angle-addr', and(\n            invis(opt(cfws)),\n            literal('<'),\n            obsRoute,\n            addrSpec,\n            literal('>'),\n            invis(opt(cfws))\n        )());\n    }\n\n    // obs-route       =   obs-domain-list \":\"\n    function obsRoute() {\n        return opts.strict ? null : wrap('obs-route', and(\n            obsDomainList,\n            literal(':')\n        )());\n    }\n\n    //   obs-domain-list =   *(CFWS / \",\") \"@\" domain\n    //                       *(\",\" [CFWS] [\"@\" domain])\n    function obsDomainList() {\n        return opts.strict ? null : wrap('obs-domain-list', and(\n            star(or(invis(cfws), literal(','))),\n            literal('@'),\n            domain,\n            star(and(\n                literal(','),\n                invis(opt(cfws)),\n                opt(and(literal('@'), domain))\n            ))\n        )());\n    }\n\n    // obs-mbox-list   =   *([CFWS] \",\") mailbox *(\",\" [mailbox / CFWS])\n    function obsMboxList() {\n        return opts.strict ? null : wrap('obs-mbox-list', and(\n            star(and(\n                invis(opt(cfws)),\n                literal(',')\n            )),\n            mailbox,\n            star(and(\n                literal(','),\n                opt(and(\n                    mailbox,\n                    invis(cfws)\n                ))\n            ))\n        )());\n    }\n\n    // obs-addr-list   =   *([CFWS] \",\") address *(\",\" [address / CFWS])\n    function obsAddrList() {\n        return opts.strict ? null : wrap('obs-addr-list', and(\n            star(and(\n                invis(opt(cfws)),\n                literal(',')\n            )),\n            address,\n            star(and(\n                literal(','),\n                opt(and(\n                    address,\n                    invis(cfws)\n                ))\n            ))\n        )());\n    }\n\n    // obs-group-list  =   1*([CFWS] \",\") [CFWS]\n    function obsGroupList() {\n        return opts.strict ? null : wrap('obs-group-list', and(\n            star(and(\n                invis(opt(cfws)),\n                literal(',')\n            ), 1),\n            invis(opt(cfws))\n        )());\n    }\n\n    // obs-local-part = word *(\".\" word)\n    function obsLocalPart() {\n        return opts.strict ? null : wrap('obs-local-part', and(word, star(and(literal('.'), word)))());\n    }\n\n    // obs-domain       = atom *(\".\" atom)\n    function obsDomain() {\n        return opts.strict ? null : wrap('obs-domain', and(atom, star(and(literal('.'), atom)))());\n    }\n\n    // obs-dtext       =   obs-NO-WS-CTL / quoted-pair\n    function obsDtext() {\n        return opts.strict ? null : wrap('obs-dtext', or(obsNoWsCtl, quotedPair)());\n    }\n\n    /////////////////////////////////////////////////////\n\n    // ast analysis\n\n    function findNode(name, root) {\n        var i, stack, node;\n        if (root === null || root === undefined) { return null; }\n        stack = [root];\n        while (stack.length > 0) {\n            node = stack.pop();\n            if (node.name === name) {\n                return node;\n            }\n            for (i = node.children.length - 1; i >= 0; i -= 1) {\n                stack.push(node.children[i]);\n            }\n        }\n        return null;\n    }\n\n    function findAllNodes(name, root) {\n        var i, stack, node, result;\n        if (root === null || root === undefined) { return null; }\n        stack = [root];\n        result = [];\n        while (stack.length > 0) {\n            node = stack.pop();\n            if (node.name === name) {\n                result.push(node);\n            }\n            for (i = node.children.length - 1; i >= 0; i -= 1) {\n                stack.push(node.children[i]);\n            }\n        }\n        return result;\n    }\n\n    function findAllNodesNoChildren(names, root) {\n        var i, stack, node, result, namesLookup;\n        if (root === null || root === undefined) { return null; }\n        stack = [root];\n        result = [];\n        namesLookup = {};\n        for (i = 0; i < names.length; i += 1) {\n            namesLookup[names[i]] = true;\n        }\n\n        while (stack.length > 0) {\n            node = stack.pop();\n            if (node.name in namesLookup) {\n                result.push(node);\n                // don't look at children (hence findAllNodesNoChildren)\n            } else {\n                for (i = node.children.length - 1; i >= 0; i -= 1) {\n                    stack.push(node.children[i]);\n                }\n            }\n        }\n        return result;\n    }\n\n    function giveResult(ast) {\n        var addresses, groupsAndMailboxes, i, groupOrMailbox, result;\n        if (ast === null) {\n            return null;\n        }\n        addresses = [];\n\n        // An address is a 'group' (i.e. a list of mailboxes) or a 'mailbox'.\n        groupsAndMailboxes = findAllNodesNoChildren(['group', 'mailbox'], ast);\n        for (i = 0; i <  groupsAndMailboxes.length; i += 1) {\n            groupOrMailbox = groupsAndMailboxes[i];\n            if (groupOrMailbox.name === 'group') {\n                addresses.push(giveResultGroup(groupOrMailbox));\n            } else if (groupOrMailbox.name === 'mailbox') {\n                addresses.push(giveResultMailbox(groupOrMailbox));\n            }\n        }\n\n        result = {\n            ast: ast,\n            addresses: addresses,\n        };\n        if (opts.simple) {\n            result = simplifyResult(result);\n        }\n        if (opts.oneResult) {\n            return oneResult(result);\n        }\n        if (opts.simple) {\n            return result && result.addresses;\n        } else {\n            return result;\n        }\n    }\n\n    function giveResultGroup(group) {\n        var i;\n        var groupName = findNode('display-name', group);\n        var groupResultMailboxes = [];\n        var mailboxes = findAllNodesNoChildren(['mailbox'], group);\n        for (i = 0; i < mailboxes.length; i += 1) {\n            groupResultMailboxes.push(giveResultMailbox(mailboxes[i]));\n        }\n        return {\n            node: group,\n            parts: {\n                name: groupName,\n            },\n            type: group.name, // 'group'\n            name: grabSemantic(groupName),\n            addresses: groupResultMailboxes,\n        };\n    }\n\n    function giveResultMailbox(mailbox) {\n        var name = findNode('display-name', mailbox);\n        var aspec = findNode('addr-spec', mailbox);\n        var cfws = findAllNodes('cfws', mailbox);\n        var comments = findAllNodesNoChildren(['comment'], mailbox);\n\n\n        var local = findNode('local-part', aspec);\n        var domain = findNode('domain', aspec);\n        return {\n            node: mailbox,\n            parts: {\n                name: name,\n                address: aspec,\n                local: local,\n                domain: domain,\n                comments: cfws\n            },\n            type: mailbox.name, // 'mailbox'\n            name: grabSemantic(name),\n            address: grabSemantic(aspec),\n            local: grabSemantic(local),\n            domain: grabSemantic(domain),\n            comments: concatComments(comments),\n            groupName: grabSemantic(mailbox.groupName),\n        };\n    }\n\n    function grabSemantic(n) {\n        return n !== null && n !== undefined ? n.semantic : null;\n    }\n\n    function simplifyResult(result) {\n        var i;\n        if (result && result.addresses) {\n            for (i = 0; i < result.addresses.length; i += 1) {\n                delete result.addresses[i].node;\n            }\n        }\n        return result;\n    }\n\n    function concatComments(comments) {\n        var result = '';\n        if (comments) {\n            for (var i = 0; i < comments.length; i += 1) {\n                result += grabSemantic(comments[i]);\n            }\n        }\n        return result;\n    }\n\n    function oneResult(result) {\n        if (!result) { return null; }\n        if (!opts.partial && result.addresses.length > 1) { return null; }\n        return result.addresses && result.addresses[0];\n    }\n\n    /////////////////////////////////////////////////////\n\n    var parseString, pos, len, parsed, startProduction;\n\n    opts = handleOpts(opts, {});\n    if (opts === null) { return null; }\n\n    parseString = opts.input;\n\n    startProduction = {\n        'address': address,\n        'address-list': addressList,\n        'angle-addr': angleAddr,\n        'from': fromSpec,\n        'group': group,\n        'mailbox': mailbox,\n        'mailbox-list': mailboxList,\n        'reply-to': replyToSpec,\n        'sender': senderSpec,\n    }[opts.startAt] || addressList;\n\n    if (!opts.strict) {\n        initialize();\n        opts.strict = true;\n        parsed = startProduction(parseString);\n        if (opts.partial || !inStr()) {\n            return giveResult(parsed);\n        }\n        opts.strict = false;\n    }\n\n    initialize();\n    parsed = startProduction(parseString);\n    if (!opts.partial && inStr()) { return null; }\n    return giveResult(parsed);\n}\n\nfunction parseOneAddressSimple(opts) {\n    return parse5322(handleOpts(opts, {\n        oneResult: true,\n        rfc6532: true,\n        simple: true,\n        startAt: 'address-list',\n    }));\n}\n\nfunction parseAddressListSimple(opts) {\n    return parse5322(handleOpts(opts, {\n        rfc6532: true,\n        simple: true,\n        startAt: 'address-list',\n    }));\n}\n\nfunction parseFromSimple(opts) {\n    return parse5322(handleOpts(opts, {\n        rfc6532: true,\n        simple: true,\n        startAt: 'from',\n    }));\n}\n\nfunction parseSenderSimple(opts) {\n    return parse5322(handleOpts(opts, {\n        oneResult: true,\n        rfc6532: true,\n        simple: true,\n        startAt: 'sender',\n    }));\n}\n\nfunction parseReplyToSimple(opts) {\n    return parse5322(handleOpts(opts, {\n        rfc6532: true,\n        simple: true,\n        startAt: 'reply-to',\n    }));\n}\n\nfunction handleOpts(opts, defs) {\n    function isString(str) {\n        return Object.prototype.toString.call(str) === '[object String]';\n    }\n\n    function isObject(o) {\n        return o === Object(o);\n    }\n\n    function isNullUndef(o) {\n        return o === null || o === undefined;\n    }\n\n    var defaults, o;\n\n    if (isString(opts)) {\n        opts = { input: opts };\n    } else if (!isObject(opts)) {\n        return null;\n    }\n\n    if (!isString(opts.input)) { return null; }\n    if (!defs) { return null; }\n\n    defaults = {\n        oneResult: false,\n        partial: false,\n        rejectTLD: false,\n        rfc6532: false,\n        simple: false,\n        startAt: 'address-list',\n        strict: false,\n        atInDisplayName: false,\n        commaInDisplayName: false,\n        addressListSeparator: ',',\n    };\n\n    for (o in defaults) {\n        if (isNullUndef(opts[o])) {\n            opts[o] = !isNullUndef(defs[o]) ? defs[o] : defaults[o];\n        }\n    }\n    return opts;\n}\n\nparse5322.parseOneAddress = parseOneAddressSimple;\nparse5322.parseAddressList = parseAddressListSimple;\nparse5322.parseFrom = parseFromSimple;\nparse5322.parseSender = parseSenderSimple;\nparse5322.parseReplyTo = parseReplyToSimple;\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = parse5322;\n} else {\n    global.emailAddresses = parse5322;\n}\n\n}(this));\n"]}