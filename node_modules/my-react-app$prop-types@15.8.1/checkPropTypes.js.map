{"version":3,"sources":["checkPropTypes.js"],"names":["printWarning","ReactPropTypesSecret","require","loggedTypeFailures","has","text","message","console","error","Error","x","checkPropTypes","typeSpecs","values","location","componentName","getStack","typeSpecName","err","name","ex","stack","resetWarningCache","module","exports"],"mappings":"AAAA;;;;;;;AAOA;;;;;;AAEA,QAAIA,eAAe,YAAW,CAAE,CAAhC;;AAGE,QAAIC,uBAAuBC,QAAQ,4BAAR,CAA3B;AACA,QAAIC,qBAAqB,EAAzB;AACA,QAAIC,MAAMF,QAAQ,WAAR,CAAV;;AAEAF,mBAAe,UAASK,IAAT,EAAe;AAC5B,UAAIC,UAAU,cAAcD,IAA5B;AACA,UAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,gBAAQC,KAAR,CAAcF,OAAd;AACD;AACD,UAAI;AACF;AACA;AACA;AACA,cAAM,IAAIG,KAAJ,CAAUH,OAAV,CAAN;AACD,OALD,CAKE,OAAOI,CAAP,EAAU,CAAE,IAAM;AACrB,KAXD;;AAcF;;;;;;;;;;;AAWA,aAASC,cAAT,CAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,aAArD,EAAoEC,QAApE,EAA8E;AAE1E,WAAK,IAAIC,YAAT,IAAyBL,SAAzB,EAAoC;AAClC,YAAIR,IAAIQ,SAAJ,EAAeK,YAAf,CAAJ,EAAkC;AAChC,cAAIT,KAAJ;AACA;AACA;AACA;AACA,cAAI;AACF;AACA;AACA,gBAAI,OAAOI,UAAUK,YAAV,CAAP,KAAmC,UAAvC,EAAmD;AACjD,kBAAIC,MAAMT,MACR,CAACM,iBAAiB,aAAlB,IAAmC,IAAnC,GAA0CD,QAA1C,GAAqD,SAArD,GAAiEG,YAAjE,GAAgF,gBAAhF,GACA,8EADA,GACiF,OAAOL,UAAUK,YAAV,CADxF,GACkH,IADlH,GAEA,+FAHQ,CAAV;AAKAC,kBAAIC,IAAJ,GAAW,qBAAX;AACA,oBAAMD,GAAN;AACD;AACDV,oBAAQI,UAAUK,YAAV,EAAwBJ,MAAxB,EAAgCI,YAAhC,EAA8CF,aAA9C,EAA6DD,QAA7D,EAAuE,IAAvE,EAA6Eb,oBAA7E,CAAR;AACD,WAbD,CAaE,OAAOmB,EAAP,EAAW;AACXZ,oBAAQY,EAAR;AACD;AACD,cAAIZ,SAAS,EAAEA,iBAAiBC,KAAnB,CAAb,EAAwC;AACtCT,yBACE,CAACe,iBAAiB,aAAlB,IAAmC,0BAAnC,GACAD,QADA,GACW,IADX,GACkBG,YADlB,GACiC,iCADjC,GAEA,2DAFA,GAE8D,OAAOT,KAFrE,GAE6E,IAF7E,GAGA,iEAHA,GAIA,gEAJA,GAKA,iCANF;AAQD;AACD,cAAIA,iBAAiBC,KAAjB,IAA0B,EAAED,MAAMF,OAAN,IAAiBH,kBAAnB,CAA9B,EAAsE;AACpE;AACA;AACAA,+BAAmBK,MAAMF,OAAzB,IAAoC,IAApC;;AAEA,gBAAIe,QAAQL,WAAWA,UAAX,GAAwB,EAApC;;AAEAhB,yBACE,YAAYc,QAAZ,GAAuB,SAAvB,GAAmCN,MAAMF,OAAzC,IAAoDe,SAAS,IAAT,GAAgBA,KAAhB,GAAwB,EAA5E,CADF;AAGD;AACF;AACF;AAEJ;;AAED;;;;;AAKAV,mBAAeW,iBAAf,GAAmC,YAAW;AAE1CnB,2BAAqB,EAArB;AAEH,KAJD;;AAMAoB,WAAOC,OAAP,GAAiBb,cAAjB","file":"checkPropTypes.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = require('./lib/has');\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) { /**/ }\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +\n              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n"]}