{"version":3,"sources":["MonotonicInterpolant.js"],"names":["MonotonicInterpolant","constructor","xs","ys","length","indexes","i","push","sort","a","b","dys","dxs","ms","dx","dy","c1s","m2","mNext","dxNext","common","c2s","c3s","m","c1","invDx","interpolate","x","low","high","mid","Math","floor","xHere","max","diff","diffSq"],"mappings":"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","file":"MonotonicInterpolant.js","sourcesContent":["export class MonotonicInterpolant {\n    constructor(xs, ys) {\n        const { length } = xs;\n        // Rearrange xs and ys so that xs is sorted\n        const indexes = [];\n        for (let i = 0; i < length; i++) {\n            indexes.push(i);\n        }\n        indexes.sort((a, b) => (xs[a] < xs[b] ? -1 : 1));\n        // Get consecutive differences and slopes\n        const dys = [];\n        const dxs = [];\n        const ms = [];\n        let dx;\n        let dy;\n        for (let i = 0; i < length - 1; i++) {\n            dx = xs[i + 1] - xs[i];\n            dy = ys[i + 1] - ys[i];\n            dxs.push(dx);\n            dys.push(dy);\n            ms.push(dy / dx);\n        }\n        // Get degree-1 coefficients\n        const c1s = [ms[0]];\n        for (let i = 0; i < dxs.length - 1; i++) {\n            const m2 = ms[i];\n            const mNext = ms[i + 1];\n            if (m2 * mNext <= 0) {\n                c1s.push(0);\n            }\n            else {\n                dx = dxs[i];\n                const dxNext = dxs[i + 1];\n                const common = dx + dxNext;\n                c1s.push((3 * common) / ((common + dxNext) / m2 + (common + dx) / mNext));\n            }\n        }\n        c1s.push(ms[ms.length - 1]);\n        // Get degree-2 and degree-3 coefficients\n        const c2s = [];\n        const c3s = [];\n        let m;\n        for (let i = 0; i < c1s.length - 1; i++) {\n            m = ms[i];\n            const c1 = c1s[i];\n            const invDx = 1 / dxs[i];\n            const common = c1 + c1s[i + 1] - m - m;\n            c2s.push((m - c1 - common) * invDx);\n            c3s.push(common * invDx * invDx);\n        }\n        this.xs = xs;\n        this.ys = ys;\n        this.c1s = c1s;\n        this.c2s = c2s;\n        this.c3s = c3s;\n    }\n    interpolate(x) {\n        const { xs, ys, c1s, c2s, c3s } = this;\n        // The rightmost point in the dataset should give an exact result\n        let i = xs.length - 1;\n        if (x === xs[i]) {\n            return ys[i];\n        }\n        // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n        let low = 0;\n        let high = c3s.length - 1;\n        let mid;\n        while (low <= high) {\n            mid = Math.floor(0.5 * (low + high));\n            const xHere = xs[mid];\n            if (xHere < x) {\n                low = mid + 1;\n            }\n            else if (xHere > x) {\n                high = mid - 1;\n            }\n            else {\n                return ys[mid];\n            }\n        }\n        i = Math.max(0, high);\n        // Interpolate\n        const diff = x - xs[i];\n        const diffSq = diff * diff;\n        return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n    }\n}\n"]}