{"version":3,"sources":["OffsetUtils.js"],"names":["Object","defineProperty","exports","value","getNodeClientOffset","getEventClientOffset","getDragPreviewOffset","_BrowserDetector","require","_MonotonicInterpolant","ELEMENT_NODE","node","el","nodeType","parentElement","_el$getBoundingClient","getBoundingClientRect","top","left","x","y","e","clientX","clientY","isImageNode","_document$documentEle","nodeName","isFirefox","document","documentElement","contains","getDragPreviewSize","isImage","dragPreview","sourceWidth","sourceHeight","dragPreviewWidth","width","dragPreviewHeight","height","isSafari","window","devicePixelRatio","sourceNode","clientOffset","anchorPoint","offsetPoint","dragPreviewNode","dragPreviewNodeOffsetFromClient","offsetFromDragPreview","offsetWidth","offsetHeight","anchorX","anchorY","_getDragPreviewSize","offsetX","offsetY","calculateXOffset","interpolantX","MonotonicInterpolant","interpolate","calculateYOffset","interpolantY"],"mappings":"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","file":"OffsetUtils.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNodeClientOffset = getNodeClientOffset;\nexports.getEventClientOffset = getEventClientOffset;\nexports.getDragPreviewOffset = getDragPreviewOffset;\n\nvar _BrowserDetector = require(\"./BrowserDetector\");\n\nvar _MonotonicInterpolant = require(\"./MonotonicInterpolant\");\n\nvar ELEMENT_NODE = 1;\n\nfunction getNodeClientOffset(node) {\n  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;\n\n  if (!el) {\n    return null;\n  }\n\n  var _el$getBoundingClient = el.getBoundingClientRect(),\n      top = _el$getBoundingClient.top,\n      left = _el$getBoundingClient.left;\n\n  return {\n    x: left,\n    y: top\n  };\n}\n\nfunction getEventClientOffset(e) {\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n}\n\nfunction isImageNode(node) {\n  var _document$documentEle;\n\n  return node.nodeName === 'IMG' && ((0, _BrowserDetector.isFirefox)() || !((_document$documentEle = document.documentElement) === null || _document$documentEle === void 0 ? void 0 : _document$documentEle.contains(node)));\n}\n\nfunction getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {\n  var dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;\n  var dragPreviewHeight = isImage ? dragPreview.height : sourceHeight; // Work around @2x coordinate discrepancies in browsers\n\n  if ((0, _BrowserDetector.isSafari)() && isImage) {\n    dragPreviewHeight /= window.devicePixelRatio;\n    dragPreviewWidth /= window.devicePixelRatio;\n  }\n\n  return {\n    dragPreviewWidth: dragPreviewWidth,\n    dragPreviewHeight: dragPreviewHeight\n  };\n}\n\nfunction getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {\n  // The browsers will use the image intrinsic size under different conditions.\n  // Firefox only cares if it's an image, but WebKit also wants it to be detached.\n  var isImage = isImageNode(dragPreview);\n  var dragPreviewNode = isImage ? sourceNode : dragPreview;\n  var dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);\n  var offsetFromDragPreview = {\n    x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,\n    y: clientOffset.y - dragPreviewNodeOffsetFromClient.y\n  };\n  var sourceWidth = sourceNode.offsetWidth,\n      sourceHeight = sourceNode.offsetHeight;\n  var anchorX = anchorPoint.anchorX,\n      anchorY = anchorPoint.anchorY;\n\n  var _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),\n      dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,\n      dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;\n\n  var calculateYOffset = function calculateYOffset() {\n    var interpolantY = new _MonotonicInterpolant.MonotonicInterpolant([0, 0.5, 1], [// Dock to the top\n    offsetFromDragPreview.y, // Align at the center\n    offsetFromDragPreview.y / sourceHeight * dragPreviewHeight, // Dock to the bottom\n    offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);\n    var y = interpolantY.interpolate(anchorY); // Work around Safari 8 positioning bug\n\n    if ((0, _BrowserDetector.isSafari)() && isImage) {\n      // We'll have to wait for @3x to see if this is entirely correct\n      y += (window.devicePixelRatio - 1) * dragPreviewHeight;\n    }\n\n    return y;\n  };\n\n  var calculateXOffset = function calculateXOffset() {\n    // Interpolate coordinates depending on anchor point\n    // If you know a simpler way to do this, let me know\n    var interpolantX = new _MonotonicInterpolant.MonotonicInterpolant([0, 0.5, 1], [// Dock to the left\n    offsetFromDragPreview.x, // Align at the center\n    offsetFromDragPreview.x / sourceWidth * dragPreviewWidth, // Dock to the right\n    offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);\n    return interpolantX.interpolate(anchorX);\n  }; // Force offsets if specified in the options.\n\n\n  var offsetX = offsetPoint.offsetX,\n      offsetY = offsetPoint.offsetY;\n  var isManualOffsetX = offsetX === 0 || offsetX;\n  var isManualOffsetY = offsetY === 0 || offsetY;\n  return {\n    x: isManualOffsetX ? offsetX : calculateXOffset(),\n    y: isManualOffsetY ? offsetY : calculateYOffset()\n  };\n}"]}