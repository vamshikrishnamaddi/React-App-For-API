{"version":3,"sources":["position.js"],"names":["_extends","css","getOffset","getOffsetParent","scrollLeft","scrollTop","nodeName","node","toLowerCase","position","offsetParent","parentOffset","top","left","offset","getBoundingClientRect","parent","borderTop","String","parseInt","borderLeft","marginTop","marginLeft"],"mappings":";;;;AAAA,WAAOA,QAAP,MAAqB,oCAArB;AACA,WAAOC,GAAP,MAAgB,OAAhB;AACA,WAAOC,SAAP,MAAsB,UAAtB;AACA,WAAOC,eAAP,MAA4B,gBAA5B;AACA,WAAOC,UAAP,MAAuB,cAAvB;AACA,WAAOC,SAAP,MAAsB,aAAtB;;AAEA,QAAIC,WAAW,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACrC,aAAOA,KAAKD,QAAL,IAAiBC,KAAKD,QAAL,CAAcE,WAAd,EAAxB;AACD,KAFD;AAGA;;;;;;;AAQA,mBAAe,SAASC,QAAT,CAAkBF,IAAlB,EAAwBG,YAAxB,EAAsC;AACnD,UAAIC,eAAe;AACjBC,aAAK,CADY;AAEjBC,cAAM;AAFW,OAAnB;AAIA,UAAIC,MAAJ,CALmD,CAKvC;AACZ;;AAEA,UAAIb,IAAIM,IAAJ,EAAU,UAAV,MAA0B,OAA9B,EAAuC;AACrCO,iBAASP,KAAKQ,qBAAL,EAAT;AACD,OAFD,MAEO;AACL,YAAIC,SAASN,gBAAgBP,gBAAgBI,IAAhB,CAA7B;AACAO,iBAASZ,UAAUK,IAAV,CAAT;AACA,YAAID,SAASU,MAAT,MAAqB,MAAzB,EAAiCL,eAAeT,UAAUc,MAAV,CAAf;AACjC,YAAIC,YAAYC,OAAOjB,IAAIe,MAAJ,EAAY,gBAAZ,KAAiC,CAAxC,CAAhB;AACAL,qBAAaC,GAAb,IAAoBO,SAASF,SAAT,EAAoB,EAApB,IAA0BZ,UAAUW,MAAV,CAA1B,IAA+C,CAAnE;AACA,YAAII,aAAaF,OAAOjB,IAAIe,MAAJ,EAAY,iBAAZ,KAAkC,CAAzC,CAAjB;AACAL,qBAAaE,IAAb,IAAqBM,SAASC,UAAT,EAAqB,EAArB,IAA2BhB,WAAWY,MAAX,CAA3B,IAAiD,CAAtE;AACD;;AAED,UAAIK,YAAYH,OAAOjB,IAAIM,IAAJ,EAAU,WAAV,KAA0B,CAAjC,CAAhB;AACA,UAAIe,aAAaJ,OAAOjB,IAAIM,IAAJ,EAAU,YAAV,KAA2B,CAAlC,CAAjB,CArBmD,CAqBI;;AAEvD,aAAOP,SAAS,EAAT,EAAac,MAAb,EAAqB;AAC1BF,aAAKE,OAAOF,GAAP,GAAaD,aAAaC,GAA1B,IAAiCO,SAASE,SAAT,EAAoB,EAApB,KAA2B,CAA5D,CADqB;AAE1BR,cAAMC,OAAOD,IAAP,GAAcF,aAAaE,IAA3B,IAAmCM,SAASG,UAAT,EAAqB,EAArB,KAA4B,CAA/D;AAFoB,OAArB,CAAP;AAID","file":"position.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport css from './css';\nimport getOffset from './offset';\nimport getOffsetParent from './offsetParent';\nimport scrollLeft from './scrollLeft';\nimport scrollTop from './scrollTop';\n\nvar nodeName = function nodeName(node) {\n  return node.nodeName && node.nodeName.toLowerCase();\n};\n/**\n * Returns the relative position of a given element.\n * \n * @param node the element\n * @param offsetParent the offset parent\n */\n\n\nexport default function position(node, offsetParent) {\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n  var offset; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n  // because it is its only offset parent\n\n  if (css(node, 'position') === 'fixed') {\n    offset = node.getBoundingClientRect();\n  } else {\n    var parent = offsetParent || getOffsetParent(node);\n    offset = getOffset(node);\n    if (nodeName(parent) !== 'html') parentOffset = getOffset(parent);\n    var borderTop = String(css(parent, 'borderTopWidth') || 0);\n    parentOffset.top += parseInt(borderTop, 10) - scrollTop(parent) || 0;\n    var borderLeft = String(css(parent, 'borderLeftWidth') || 0);\n    parentOffset.left += parseInt(borderLeft, 10) - scrollLeft(parent) || 0;\n  }\n\n  var marginTop = String(css(node, 'marginTop') || 0);\n  var marginLeft = String(css(node, 'marginLeft') || 0); // Subtract parent offsets and node margins\n\n  return _extends({}, offset, {\n    top: offset.top - parentOffset.top - (parseInt(marginTop, 10) || 0),\n    left: offset.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)\n  });\n}"]}