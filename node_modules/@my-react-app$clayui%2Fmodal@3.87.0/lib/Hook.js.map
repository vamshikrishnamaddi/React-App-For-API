{"version":3,"sources":["Hook.js"],"names":["Object","defineProperty","exports","value","useUserInteractions","_shared","require","_react","_interopRequireDefault","obj","__esModule","default","modalElementRef","modalBodyElementRef","onClick","mouseEventTargetRef","useRef","getFocusableNodes","current","nodes","querySelectorAll","FOCUSABLE_ELEMENTS","keys","map","key","handleKeydown","event","Keys","Tab","target","contains","focus","focusableNodes","focusedItemIndex","indexOf","document","activeElement","shiftKey","length","preventDefault","handleKeyup","Esc","handleDocumentMouseDown","handleDocumentMouseUp","defaultPrevented","useEffect","addEventListener","removeEventListener"],"mappings":"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","file":"Hook.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUserInteractions = void 0;\n\nvar _shared = require(\"@clayui/shared\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * A hook that takes care of controlling click, keyup and keydown events\n * respectively close the modal after a click on the overlay, close the\n * modal by pressing the ESC key and control the focus within the Modal.\n */\nvar useUserInteractions = function useUserInteractions(modalElementRef, modalBodyElementRef, onClick) {\n  var mouseEventTargetRef = _react.default.useRef(null);\n\n  var getFocusableNodes = function getFocusableNodes() {\n    if (modalBodyElementRef.current) {\n      var nodes = modalBodyElementRef.current.querySelectorAll(_shared.FOCUSABLE_ELEMENTS);\n      return Object.keys(nodes).map(function (key) {\n        return nodes[key];\n      });\n    }\n\n    return [];\n  };\n\n  var handleKeydown = function handleKeydown(event) {\n    if (event.key === _shared.Keys.Tab) {\n      if (modalElementRef.current && event.target !== null && !modalElementRef.current.contains(event.target)) {\n        modalBodyElementRef.current.focus();\n      } else {\n        var focusableNodes = getFocusableNodes();\n        var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n        if (event.shiftKey && focusedItemIndex === 0) {\n          focusableNodes[focusableNodes.length - 1].focus();\n          event.preventDefault();\n        }\n\n        if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n          focusableNodes[0].focus();\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  var handleKeyup = function handleKeyup(event) {\n    if (event.key === _shared.Keys.Esc) {\n      onClick();\n    }\n  };\n\n  var handleDocumentMouseDown = function handleDocumentMouseDown(event) {\n    // We keep the `event.target` to check later in the click event if\n    // the target is the same, otherwise, we are assuming that the element\n    // has been removed from the DOM.\n    mouseEventTargetRef.current = event.target;\n  };\n\n  var handleDocumentMouseUp = function handleDocumentMouseUp(event) {\n    if (event.defaultPrevented) {\n      mouseEventTargetRef.current = null;\n      return;\n    }\n\n    if (event.target === modalElementRef.current && mouseEventTargetRef.current === event.target) {\n      mouseEventTargetRef.current = null;\n      onClick();\n    }\n\n    mouseEventTargetRef.current = null;\n  };\n  /**\n   * Just listen for keyup, keydown, and click when\n   * changeAttachEvent is true.\n   */\n\n\n  _react.default.useEffect(function () {\n    document.addEventListener('keydown', handleKeydown);\n    document.addEventListener('keyup', handleKeyup);\n    document.addEventListener('mousedown', handleDocumentMouseDown);\n    document.addEventListener('mouseup', handleDocumentMouseUp);\n    return function () {\n      document.removeEventListener('keydown', handleKeydown);\n      document.removeEventListener('keyup', handleKeyup);\n      document.removeEventListener('mousedown', handleDocumentMouseDown);\n      document.removeEventListener('mouseup', handleDocumentMouseUp);\n    };\n  }, []);\n};\n\nexports.useUserInteractions = useUserInteractions;"]}