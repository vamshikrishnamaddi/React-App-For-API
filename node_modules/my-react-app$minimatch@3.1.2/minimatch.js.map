{"version":3,"sources":["minimatch.js"],"names":["module","exports","minimatch","Minimatch","path","require","e","sep","GLOBSTAR","expand","plTypes","open","close","qmark","star","twoStarDot","twoStarNoDot","reSpecials","charSet","s","split","reduce","set","c","slashSplit","filter","pattern","options","p","i","list","ext","a","b","t","Object","keys","forEach","k","defaults","def","length","orig","m","makeRe","braceExpand","match","assertValidPattern","nocomment","charAt","trim","allowWindowsEscape","join","regexp","negate","comment","empty","partial","make","prototype","debug","parseNegate","globSet","console","error","apply","arguments","globParts","map","si","parse","indexOf","negateOffset","nonegate","l","substr","nobrace","test","MAX_PATTERN_LENGTH","TypeError","SUBPARSE","isSub","noglobstar","re","hasMagic","nocase","escaping","patternListStack","negativeLists","stateChar","inClass","reClassStart","classStart","patternStart","dot","self","clearStateChar","len","noext","push","type","start","reStart","pl","pop","reEnd","cs","substring","RegExp","er","sp","tail","slice","replace","_","$1","$2","addPatternStart","n","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","newRe","globUnescape","flags","regExp","_glob","_src","twoStar","regExpEscape","ex","mm","f","nonull","filename","file","matchBase","hit","matchOne","flipNegate","fi","pi","fl","fr","pr","swallowee","Error"],"mappings":";;;;AAAAA,WAAOC,OAAP,GAAiBC,SAAjB;AACAA,cAAUC,SAAV,GAAsBA,SAAtB;;AAEA,QAAIC,OAAQ,YAAY;AAAE,UAAI;AAAE,eAAOC,QAAQ,mBAAR,CAAP;AAAwB,OAA9B,CAA+B,OAAOC,CAAP,EAAU,CAAE;AAAC,KAA1D,EAAD,IAAkE;AAC3EC,WAAK;AADsE,KAA7E;AAGAL,cAAUK,GAAV,GAAgBH,KAAKG,GAArB;;AAEA,QAAIC,WAAWN,UAAUM,QAAV,GAAqBL,UAAUK,QAAV,GAAqB,EAAzD;AACA,QAAIC,SAASJ,QAAQ,8BAAR,CAAb;;AAEA,QAAIK,UAAU;AACZ,WAAK,EAAEC,MAAM,WAAR,EAAqBC,OAAO,WAA5B,EADO;AAEZ,WAAK,EAAED,MAAM,KAAR,EAAeC,OAAO,IAAtB,EAFO;AAGZ,WAAK,EAAED,MAAM,KAAR,EAAeC,OAAO,IAAtB,EAHO;AAIZ,WAAK,EAAED,MAAM,KAAR,EAAeC,OAAO,IAAtB,EAJO;AAKZ,WAAK,EAAED,MAAM,KAAR,EAAeC,OAAO,GAAtB;;AAGP;AACA;AATc,KAAd,CAUA,IAAIC,QAAQ,MAAZ;;AAEA;AACA,QAAIC,OAAOD,QAAQ,IAAnB;;AAEA;AACA;AACA;AACA,QAAIE,aAAa,2CAAjB;;AAEA;AACA;AACA,QAAIC,eAAe,0BAAnB;;AAEA;AACA,QAAIC,aAAaC,QAAQ,iBAAR,CAAjB;;AAEA;AACA,aAASA,OAAT,CAAkBC,CAAlB,EAAqB;AACnB,aAAOA,EAAEC,KAAF,CAAQ,EAAR,EAAYC,MAAZ,CAAmB,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC1CD,YAAIC,CAAJ,IAAS,IAAT;AACA,eAAOD,GAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;;AAED;AACA,QAAIE,aAAa,KAAjB;;AAEAtB,cAAUuB,MAAV,GAAmBA,MAAnB;AACA,aAASA,MAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AACjCA,gBAAUA,WAAW,EAArB;AACA,aAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,IAAhB,EAAsB;AAC3B,eAAO5B,UAAU0B,CAAV,EAAaF,OAAb,EAAsBC,OAAtB,CAAP;AACD,OAFD;AAGD;;AAED,aAASI,GAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAClBA,UAAIA,KAAK,EAAT;AACA,UAAIC,IAAI,EAAR;AACAC,aAAOC,IAAP,CAAYJ,CAAZ,EAAeK,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClCJ,UAAEI,CAAF,IAAON,EAAEM,CAAF,CAAP;AACD,OAFD;AAGAH,aAAOC,IAAP,CAAYH,CAAZ,EAAeI,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClCJ,UAAEI,CAAF,IAAOL,EAAEK,CAAF,CAAP;AACD,OAFD;AAGA,aAAOJ,CAAP;AACD;;AAEDhC,cAAUqC,QAAV,GAAqB,UAAUC,GAAV,EAAe;AAClC,UAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAAvB,IAAmC,CAACL,OAAOC,IAAP,CAAYI,GAAZ,EAAiBC,MAAzD,EAAiE;AAC/D,eAAOvC,SAAP;AACD;;AAED,UAAIwC,OAAOxC,SAAX;;AAEA,UAAIyC,IAAI,SAASzC,SAAT,CAAoB0B,CAApB,EAAuBF,OAAvB,EAAgCC,OAAhC,EAAyC;AAC/C,eAAOe,KAAKd,CAAL,EAAQF,OAAR,EAAiBK,IAAIS,GAAJ,EAASb,OAAT,CAAjB,CAAP;AACD,OAFD;;AAIAgB,QAAExC,SAAF,GAAc,SAASA,SAAT,CAAoBuB,OAApB,EAA6BC,OAA7B,EAAsC;AAClD,eAAO,IAAIe,KAAKvC,SAAT,CAAmBuB,OAAnB,EAA4BK,IAAIS,GAAJ,EAASb,OAAT,CAA5B,CAAP;AACD,OAFD;AAGAgB,QAAExC,SAAF,CAAYoC,QAAZ,GAAuB,SAASA,QAAT,CAAmBZ,OAAnB,EAA4B;AACjD,eAAOe,KAAKH,QAAL,CAAcR,IAAIS,GAAJ,EAASb,OAAT,CAAd,EAAiCxB,SAAxC;AACD,OAFD;;AAIAwC,QAAElB,MAAF,GAAW,SAASA,MAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAC5C,eAAOe,KAAKjB,MAAL,CAAYC,OAAZ,EAAqBK,IAAIS,GAAJ,EAASb,OAAT,CAArB,CAAP;AACD,OAFD;;AAIAgB,QAAEJ,QAAF,GAAa,SAASA,QAAT,CAAmBZ,OAAnB,EAA4B;AACvC,eAAOe,KAAKH,QAAL,CAAcR,IAAIS,GAAJ,EAASb,OAAT,CAAd,CAAP;AACD,OAFD;;AAIAgB,QAAEC,MAAF,GAAW,SAASA,MAAT,CAAiBlB,OAAjB,EAA0BC,OAA1B,EAAmC;AAC5C,eAAOe,KAAKE,MAAL,CAAYlB,OAAZ,EAAqBK,IAAIS,GAAJ,EAASb,OAAT,CAArB,CAAP;AACD,OAFD;;AAIAgB,QAAEE,WAAF,GAAgB,SAASA,WAAT,CAAsBnB,OAAtB,EAA+BC,OAA/B,EAAwC;AACtD,eAAOe,KAAKG,WAAL,CAAiBnB,OAAjB,EAA0BK,IAAIS,GAAJ,EAASb,OAAT,CAA1B,CAAP;AACD,OAFD;;AAIAgB,QAAEG,KAAF,GAAU,UAAUhB,IAAV,EAAgBJ,OAAhB,EAAyBC,OAAzB,EAAkC;AAC1C,eAAOe,KAAKI,KAAL,CAAWhB,IAAX,EAAiBJ,OAAjB,EAA0BK,IAAIS,GAAJ,EAASb,OAAT,CAA1B,CAAP;AACD,OAFD;;AAIA,aAAOgB,CAAP;AACD,KAvCD;;AAyCAxC,cAAUoC,QAAV,GAAqB,UAAUC,GAAV,EAAe;AAClC,aAAOtC,UAAUqC,QAAV,CAAmBC,GAAnB,EAAwBrC,SAA/B;AACD,KAFD;;AAIA,aAASD,SAAT,CAAoB0B,CAApB,EAAuBF,OAAvB,EAAgCC,OAAhC,EAAyC;AACvCoB,yBAAmBrB,OAAnB;;AAEA,UAAI,CAACC,OAAL,EAAcA,UAAU,EAAV;;AAEd;AACA,UAAI,CAACA,QAAQqB,SAAT,IAAsBtB,QAAQuB,MAAR,CAAe,CAAf,MAAsB,GAAhD,EAAqD;AACnD,eAAO,KAAP;AACD;;AAED,aAAO,IAAI9C,SAAJ,CAAcuB,OAAd,EAAuBC,OAAvB,EAAgCmB,KAAhC,CAAsClB,CAAtC,CAAP;AACD;;AAED,aAASzB,SAAT,CAAoBuB,OAApB,EAA6BC,OAA7B,EAAsC;AACpC,UAAI,EAAE,gBAAgBxB,SAAlB,CAAJ,EAAkC;AAChC,eAAO,IAAIA,SAAJ,CAAcuB,OAAd,EAAuBC,OAAvB,CAAP;AACD;;AAEDoB,yBAAmBrB,OAAnB;;AAEA,UAAI,CAACC,OAAL,EAAcA,UAAU,EAAV;;AAEdD,gBAAUA,QAAQwB,IAAR,EAAV;;AAEA;AACA,UAAI,CAACvB,QAAQwB,kBAAT,IAA+B/C,KAAKG,GAAL,KAAa,GAAhD,EAAqD;AACnDmB,kBAAUA,QAAQN,KAAR,CAAchB,KAAKG,GAAnB,EAAwB6C,IAAxB,CAA6B,GAA7B,CAAV;AACD;;AAED,WAAKzB,OAAL,GAAeA,OAAf;AACA,WAAKL,GAAL,GAAW,EAAX;AACA,WAAKI,OAAL,GAAeA,OAAf;AACA,WAAK2B,MAAL,GAAc,IAAd;AACA,WAAKC,MAAL,GAAc,KAAd;AACA,WAAKC,OAAL,GAAe,KAAf;AACA,WAAKC,KAAL,GAAa,KAAb;AACA,WAAKC,OAAL,GAAe,CAAC,CAAC9B,QAAQ8B,OAAzB;;AAEA;AACA,WAAKC,IAAL;AACD;;AAEDvD,cAAUwD,SAAV,CAAoBC,KAApB,GAA4B,YAAY,CAAE,CAA1C;;AAEAzD,cAAUwD,SAAV,CAAoBD,IAApB,GAA2BA,IAA3B;AACA,aAASA,IAAT,GAAiB;AACf,UAAIhC,UAAU,KAAKA,OAAnB;AACA,UAAIC,UAAU,KAAKA,OAAnB;;AAEA;AACA,UAAI,CAACA,QAAQqB,SAAT,IAAsBtB,QAAQuB,MAAR,CAAe,CAAf,MAAsB,GAAhD,EAAqD;AACnD,aAAKM,OAAL,GAAe,IAAf;AACA;AACD;AACD,UAAI,CAAC7B,OAAL,EAAc;AACZ,aAAK8B,KAAL,GAAa,IAAb;AACA;AACD;;AAED;AACA,WAAKK,WAAL;;AAEA;AACA,UAAIvC,MAAM,KAAKwC,OAAL,GAAe,KAAKjB,WAAL,EAAzB;;AAEA,UAAIlB,QAAQiC,KAAZ,EAAmB,KAAKA,KAAL,GAAa,SAASA,KAAT,GAAiB;AAAEG,gBAAQC,KAAR,CAAcC,KAAd,CAAoBF,OAApB,EAA6BG,SAA7B;AAAyC,OAAzE;;AAEnB,WAAKN,KAAL,CAAW,KAAKlC,OAAhB,EAAyBJ,GAAzB;;AAEA;AACA;AACA;AACA;AACA;AACAA,YAAM,KAAK6C,SAAL,GAAiB7C,IAAI8C,GAAJ,CAAQ,UAAUjD,CAAV,EAAa;AAC1C,eAAOA,EAAEC,KAAF,CAAQI,UAAR,CAAP;AACD,OAFsB,CAAvB;;AAIA,WAAKoC,KAAL,CAAW,KAAKlC,OAAhB,EAAyBJ,GAAzB;;AAEA;AACAA,YAAMA,IAAI8C,GAAJ,CAAQ,UAAUjD,CAAV,EAAakD,EAAb,EAAiB/C,GAAjB,EAAsB;AAClC,eAAOH,EAAEiD,GAAF,CAAM,KAAKE,KAAX,EAAkB,IAAlB,CAAP;AACD,OAFK,EAEH,IAFG,CAAN;;AAIA,WAAKV,KAAL,CAAW,KAAKlC,OAAhB,EAAyBJ,GAAzB;;AAEA;AACAA,YAAMA,IAAIG,MAAJ,CAAW,UAAUN,CAAV,EAAa;AAC5B,eAAOA,EAAEoD,OAAF,CAAU,KAAV,MAAqB,CAAC,CAA7B;AACD,OAFK,CAAN;;AAIA,WAAKX,KAAL,CAAW,KAAKlC,OAAhB,EAAyBJ,GAAzB;;AAEA,WAAKA,GAAL,GAAWA,GAAX;AACD;;AAEDnB,cAAUwD,SAAV,CAAoBE,WAApB,GAAkCA,WAAlC;AACA,aAASA,WAAT,GAAwB;AACtB,UAAInC,UAAU,KAAKA,OAAnB;AACA,UAAI4B,SAAS,KAAb;AACA,UAAI3B,UAAU,KAAKA,OAAnB;AACA,UAAI6C,eAAe,CAAnB;;AAEA,UAAI7C,QAAQ8C,QAAZ,EAAsB;;AAEtB,WAAK,IAAI5C,IAAI,CAAR,EAAW6C,IAAIhD,QAAQe,MAA5B,EACIZ,IAAI6C,CAAJ,IAAShD,QAAQuB,MAAR,CAAepB,CAAf,MAAsB,GADnC,EAEIA,GAFJ,EAES;AACPyB,iBAAS,CAACA,MAAV;AACAkB;AACD;;AAED,UAAIA,YAAJ,EAAkB,KAAK9C,OAAL,GAAeA,QAAQiD,MAAR,CAAeH,YAAf,CAAf;AAClB,WAAKlB,MAAL,GAAcA,MAAd;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApD,cAAU2C,WAAV,GAAwB,UAAUnB,OAAV,EAAmBC,OAAnB,EAA4B;AAClD,aAAOkB,YAAYnB,OAAZ,EAAqBC,OAArB,CAAP;AACD,KAFD;;AAIAxB,cAAUwD,SAAV,CAAoBd,WAApB,GAAkCA,WAAlC;;AAEA,aAASA,WAAT,CAAsBnB,OAAtB,EAA+BC,OAA/B,EAAwC;AACtC,UAAI,CAACA,OAAL,EAAc;AACZ,YAAI,gBAAgBxB,SAApB,EAA+B;AAC7BwB,oBAAU,KAAKA,OAAf;AACD,SAFD,MAEO;AACLA,oBAAU,EAAV;AACD;AACF;;AAEDD,gBAAU,OAAOA,OAAP,KAAmB,WAAnB,GACN,KAAKA,OADC,GACSA,OADnB;;AAGAqB,yBAAmBrB,OAAnB;;AAEA;AACA;AACA,UAAIC,QAAQiD,OAAR,IAAmB,CAAC,mBAAmBC,IAAnB,CAAwBnD,OAAxB,CAAxB,EAA0D;AACxD;AACA,eAAO,CAACA,OAAD,CAAP;AACD;;AAED,aAAOjB,OAAOiB,OAAP,CAAP;AACD;;AAED,QAAIoD,qBAAqB,OAAO,EAAhC;AACA,QAAI/B,qBAAqB,UAAUrB,OAAV,EAAmB;AAC1C,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAIqD,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAED,UAAIrD,QAAQe,MAAR,GAAiBqC,kBAArB,EAAyC;AACvC,cAAM,IAAIC,SAAJ,CAAc,qBAAd,CAAN;AACD;AACF,KARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5E,cAAUwD,SAAV,CAAoBW,KAApB,GAA4BA,KAA5B;AACA,QAAIU,WAAW,EAAf;AACA,aAASV,KAAT,CAAgB5C,OAAhB,EAAyBuD,KAAzB,EAAgC;AAC9BlC,yBAAmBrB,OAAnB;;AAEA,UAAIC,UAAU,KAAKA,OAAnB;;AAEA;AACA,UAAID,YAAY,IAAhB,EAAsB;AACpB,YAAI,CAACC,QAAQuD,UAAb,EACE,OAAO1E,QAAP,CADF,KAGEkB,UAAU,GAAV;AACH;AACD,UAAIA,YAAY,EAAhB,EAAoB,OAAO,EAAP;;AAEpB,UAAIyD,KAAK,EAAT;AACA,UAAIC,WAAW,CAAC,CAACzD,QAAQ0D,MAAzB;AACA,UAAIC,WAAW,KAAf;AACA;AACA,UAAIC,mBAAmB,EAAvB;AACA,UAAIC,gBAAgB,EAApB;AACA,UAAIC,SAAJ;AACA,UAAIC,UAAU,KAAd;AACA,UAAIC,eAAe,CAAC,CAApB;AACA,UAAIC,aAAa,CAAC,CAAlB;AACA;AACA;AACA,UAAIC,eAAenE,QAAQuB,MAAR,CAAe,CAAf,MAAsB,GAAtB,GAA4B,EAA5B,CAA+B;AAClD;AADmB,QAEjBtB,QAAQmE,GAAR,GAAc,kCAAd,GACA,SAHF;AAIA,UAAIC,OAAO,IAAX;;AAEA,eAASC,cAAT,GAA2B;AACzB,YAAIP,SAAJ,EAAe;AACb;AACA;AACA,kBAAQA,SAAR;AACE,iBAAK,GAAL;AACEN,oBAAMrE,IAAN;AACAsE,yBAAW,IAAX;AACF;AACA,iBAAK,GAAL;AACED,oBAAMtE,KAAN;AACAuE,yBAAW,IAAX;AACF;AACA;AACED,oBAAM,OAAOM,SAAb;AACF;AAXF;AAaAM,eAAKnC,KAAL,CAAW,sBAAX,EAAmC6B,SAAnC,EAA8CN,EAA9C;AACAM,sBAAY,KAAZ;AACD;AACF;;AAED,WAAK,IAAI5D,IAAI,CAAR,EAAWoE,MAAMvE,QAAQe,MAAzB,EAAiClB,CAAtC,EACKM,IAAIoE,GAAL,KAAc1E,IAAIG,QAAQuB,MAAR,CAAepB,CAAf,CAAlB,CADJ,EAEIA,GAFJ,EAES;AACP,aAAK+B,KAAL,CAAW,cAAX,EAA2BlC,OAA3B,EAAoCG,CAApC,EAAuCsD,EAAvC,EAA2C5D,CAA3C;;AAEA;AACA,YAAI+D,YAAYrE,WAAWM,CAAX,CAAhB,EAA+B;AAC7B4D,gBAAM,OAAO5D,CAAb;AACA+D,qBAAW,KAAX;AACA;AACD;;AAED,gBAAQ/D,CAAR;AACE;AACA,eAAK,GAAL;AAAU;AACR;AACA;AACA,qBAAO,KAAP;AACD;;AAED,eAAK,IAAL;AACEyE;AACAV,uBAAW,IAAX;AACF;;AAEA;AACA;AACA,eAAK,GAAL;AACA,eAAK,GAAL;AACA,eAAK,GAAL;AACA,eAAK,GAAL;AACA,eAAK,GAAL;AACE,iBAAK1B,KAAL,CAAW,4BAAX,EAAyClC,OAAzC,EAAkDG,CAAlD,EAAqDsD,EAArD,EAAyD5D,CAAzD;;AAEA;AACA;AACA,gBAAImE,OAAJ,EAAa;AACX,mBAAK9B,KAAL,CAAW,YAAX;AACA,kBAAIrC,MAAM,GAAN,IAAaM,MAAM+D,aAAa,CAApC,EAAuCrE,IAAI,GAAJ;AACvC4D,oBAAM5D,CAAN;AACA;AACD;;AAED;AACA;AACA;AACAwE,iBAAKnC,KAAL,CAAW,wBAAX,EAAqC6B,SAArC;AACAO;AACAP,wBAAYlE,CAAZ;AACA;AACA;AACA;AACA,gBAAII,QAAQuE,KAAZ,EAAmBF;AACrB;;AAEA,eAAK,GAAL;AACE,gBAAIN,OAAJ,EAAa;AACXP,oBAAM,GAAN;AACA;AACD;;AAED,gBAAI,CAACM,SAAL,EAAgB;AACdN,oBAAM,KAAN;AACA;AACD;;AAEDI,6BAAiBY,IAAjB,CAAsB;AACpBC,oBAAMX,SADc;AAEpBY,qBAAOxE,IAAI,CAFS;AAGpByE,uBAASnB,GAAG1C,MAHQ;AAIpB9B,oBAAMD,QAAQ+E,SAAR,EAAmB9E,IAJL;AAKpBC,qBAAOF,QAAQ+E,SAAR,EAAmB7E;AALN,aAAtB;AAOA;AACAuE,kBAAMM,cAAc,GAAd,GAAoB,WAApB,GAAkC,KAAxC;AACA,iBAAK7B,KAAL,CAAW,cAAX,EAA2B6B,SAA3B,EAAsCN,EAAtC;AACAM,wBAAY,KAAZ;AACF;;AAEA,eAAK,GAAL;AACE,gBAAIC,WAAW,CAACH,iBAAiB9C,MAAjC,EAAyC;AACvC0C,oBAAM,KAAN;AACA;AACD;;AAEDa;AACAZ,uBAAW,IAAX;AACA,gBAAImB,KAAKhB,iBAAiBiB,GAAjB,EAAT;AACA;AACA;AACArB,kBAAMoB,GAAG3F,KAAT;AACA,gBAAI2F,GAAGH,IAAH,KAAY,GAAhB,EAAqB;AACnBZ,4BAAcW,IAAd,CAAmBI,EAAnB;AACD;AACDA,eAAGE,KAAH,GAAWtB,GAAG1C,MAAd;AACF;;AAEA,eAAK,GAAL;AACE,gBAAIiD,WAAW,CAACH,iBAAiB9C,MAA7B,IAAuC6C,QAA3C,EAAqD;AACnDH,oBAAM,KAAN;AACAG,yBAAW,KAAX;AACA;AACD;;AAEDU;AACAb,kBAAM,GAAN;AACF;;AAEA;AACA,eAAK,GAAL;AACE;AACAa;;AAEA,gBAAIN,OAAJ,EAAa;AACXP,oBAAM,OAAO5D,CAAb;AACA;AACD;;AAEDmE,sBAAU,IAAV;AACAE,yBAAa/D,CAAb;AACA8D,2BAAeR,GAAG1C,MAAlB;AACA0C,kBAAM5D,CAAN;AACF;;AAEA,eAAK,GAAL;AACE;AACA;AACA;AACA;AACA,gBAAIM,MAAM+D,aAAa,CAAnB,IAAwB,CAACF,OAA7B,EAAsC;AACpCP,oBAAM,OAAO5D,CAAb;AACA+D,yBAAW,KAAX;AACA;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIoB,KAAKhF,QAAQiF,SAAR,CAAkBf,aAAa,CAA/B,EAAkC/D,CAAlC,CAAT;AACA,gBAAI;AACF+E,qBAAO,MAAMF,EAAN,GAAW,GAAlB;AACD,aAFD,CAEE,OAAOG,EAAP,EAAW;AACX;AACA,kBAAIC,KAAK,KAAKxC,KAAL,CAAWoC,EAAX,EAAe1B,QAAf,CAAT;AACAG,mBAAKA,GAAGR,MAAH,CAAU,CAAV,EAAagB,YAAb,IAA6B,KAA7B,GAAqCmB,GAAG,CAAH,CAArC,GAA6C,KAAlD;AACA1B,yBAAWA,YAAY0B,GAAG,CAAH,CAAvB;AACApB,wBAAU,KAAV;AACA;AACD;;AAED;AACAN,uBAAW,IAAX;AACAM,sBAAU,KAAV;AACAP,kBAAM5D,CAAN;AACF;;AAEA;AACE;AACAyE;;AAEA,gBAAIV,QAAJ,EAAc;AACZ;AACAA,yBAAW,KAAX;AACD,aAHD,MAGO,IAAIrE,WAAWM,CAAX,KACN,EAAEA,MAAM,GAAN,IAAamE,OAAf,CADE,EACuB;AAC5BP,oBAAM,IAAN;AACD;;AAEDA,kBAAM5D,CAAN;;AAlKJ,SAVO,CA8KL;AACH,OAvO6B,CAuO5B;;AAEF;AACA;AACA,UAAImE,OAAJ,EAAa;AACX;AACA;AACA;AACA;AACAgB,aAAKhF,QAAQiD,MAAR,CAAeiB,aAAa,CAA5B,CAAL;AACAkB,aAAK,KAAKxC,KAAL,CAAWoC,EAAX,EAAe1B,QAAf,CAAL;AACAG,aAAKA,GAAGR,MAAH,CAAU,CAAV,EAAagB,YAAb,IAA6B,KAA7B,GAAqCmB,GAAG,CAAH,CAA1C;AACA1B,mBAAWA,YAAY0B,GAAG,CAAH,CAAvB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,WAAKP,KAAKhB,iBAAiBiB,GAAjB,EAAV,EAAkCD,EAAlC,EAAsCA,KAAKhB,iBAAiBiB,GAAjB,EAA3C,EAAmE;AACjE,YAAIO,OAAO5B,GAAG6B,KAAH,CAAST,GAAGD,OAAH,GAAaC,GAAG5F,IAAH,CAAQ8B,MAA9B,CAAX;AACA,aAAKmB,KAAL,CAAW,cAAX,EAA2BuB,EAA3B,EAA+BoB,EAA/B;AACA;AACAQ,eAAOA,KAAKE,OAAL,CAAa,2BAAb,EAA0C,UAAUC,CAAV,EAAaC,EAAb,EAAiBC,EAAjB,EAAqB;AACpE,cAAI,CAACA,EAAL,EAAS;AACP;AACAA,iBAAK,IAAL;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,iBAAOD,KAAKA,EAAL,GAAUC,EAAV,GAAe,GAAtB;AACD,SAbM,CAAP;;AAeA,aAAKxD,KAAL,CAAW,gBAAX,EAA6BmD,IAA7B,EAAmCA,IAAnC,EAAyCR,EAAzC,EAA6CpB,EAA7C;AACA,YAAIjD,IAAIqE,GAAGH,IAAH,KAAY,GAAZ,GAAkBtF,IAAlB,GACJyF,GAAGH,IAAH,KAAY,GAAZ,GAAkBvF,KAAlB,GACA,OAAO0F,GAAGH,IAFd;;AAIAhB,mBAAW,IAAX;AACAD,aAAKA,GAAG6B,KAAH,CAAS,CAAT,EAAYT,GAAGD,OAAf,IAA0BpE,CAA1B,GAA8B,KAA9B,GAAsC6E,IAA3C;AACD;;AAED;AACAf;AACA,UAAIV,QAAJ,EAAc;AACZ;AACAH,cAAM,MAAN;AACD;;AAED;AACA;AACA,UAAIkC,kBAAkB,KAAtB;AACA,cAAQlC,GAAGlC,MAAH,CAAU,CAAV,CAAR;AACE,aAAK,GAAL,CAAU,KAAK,GAAL,CAAU,KAAK,GAAL;AAAUoE,4BAAkB,IAAlB;AADhC;;AAIA;AACA;AACA;AACA;AACA;AACA,WAAK,IAAIC,IAAI9B,cAAc/C,MAAd,GAAuB,CAApC,EAAuC6E,IAAI,CAAC,CAA5C,EAA+CA,GAA/C,EAAoD;AAClD,YAAIC,KAAK/B,cAAc8B,CAAd,CAAT;;AAEA,YAAIE,WAAWrC,GAAG6B,KAAH,CAAS,CAAT,EAAYO,GAAGjB,OAAf,CAAf;AACA,YAAImB,UAAUtC,GAAG6B,KAAH,CAASO,GAAGjB,OAAZ,EAAqBiB,GAAGd,KAAH,GAAW,CAAhC,CAAd;AACA,YAAIiB,SAASvC,GAAG6B,KAAH,CAASO,GAAGd,KAAH,GAAW,CAApB,EAAuBc,GAAGd,KAA1B,CAAb;AACA,YAAIkB,UAAUxC,GAAG6B,KAAH,CAASO,GAAGd,KAAZ,CAAd;;AAEAiB,kBAAUC,OAAV;;AAEA;AACA;AACA;AACA,YAAIC,mBAAmBJ,SAASpG,KAAT,CAAe,GAAf,EAAoBqB,MAApB,GAA6B,CAApD;AACA,YAAIoF,aAAaF,OAAjB;AACA,aAAK9F,IAAI,CAAT,EAAYA,IAAI+F,gBAAhB,EAAkC/F,GAAlC,EAAuC;AACrCgG,uBAAaA,WAAWZ,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAb;AACD;AACDU,kBAAUE,UAAV;;AAEA,YAAIC,SAAS,EAAb;AACA,YAAIH,YAAY,EAAZ,IAAkB1C,UAAUD,QAAhC,EAA0C;AACxC8C,mBAAS,GAAT;AACD;AACD,YAAIC,QAAQP,WAAWC,OAAX,GAAqBE,OAArB,GAA+BG,MAA/B,GAAwCJ,MAApD;AACAvC,aAAK4C,KAAL;AACD;;AAED;AACA;AACA;AACA,UAAI5C,OAAO,EAAP,IAAaC,QAAjB,EAA2B;AACzBD,aAAK,UAAUA,EAAf;AACD;;AAED,UAAIkC,eAAJ,EAAqB;AACnBlC,aAAKU,eAAeV,EAApB;AACD;;AAED;AACA,UAAIF,UAAUD,QAAd,EAAwB;AACtB,eAAO,CAACG,EAAD,EAAKC,QAAL,CAAP;AACD;;AAED;AACA;AACA;AACA,UAAI,CAACA,QAAL,EAAe;AACb,eAAO4C,aAAatG,OAAb,CAAP;AACD;;AAED,UAAIuG,QAAQtG,QAAQ0D,MAAR,GAAiB,GAAjB,GAAuB,EAAnC;AACA,UAAI;AACF,YAAI6C,SAAS,IAAItB,MAAJ,CAAW,MAAMzB,EAAN,GAAW,GAAtB,EAA2B8C,KAA3B,CAAb;AACD,OAFD,CAEE,OAAOpB,EAAP,EAAW,iDAAkD;AAC7D;AACA;AACA;AACA;AACA,eAAO,IAAID,MAAJ,CAAW,IAAX,CAAP;AACD;;AAEDsB,aAAOC,KAAP,GAAezG,OAAf;AACAwG,aAAOE,IAAP,GAAcjD,EAAd;;AAEA,aAAO+C,MAAP;AACD;;AAEDhI,cAAU0C,MAAV,GAAmB,UAAUlB,OAAV,EAAmBC,OAAnB,EAA4B;AAC7C,aAAO,IAAIxB,SAAJ,CAAcuB,OAAd,EAAuBC,WAAW,EAAlC,EAAsCiB,MAAtC,EAAP;AACD,KAFD;;AAIAzC,cAAUwD,SAAV,CAAoBf,MAApB,GAA6BA,MAA7B;AACA,aAASA,MAAT,GAAmB;AACjB,UAAI,KAAKS,MAAL,IAAe,KAAKA,MAAL,KAAgB,KAAnC,EAA0C,OAAO,KAAKA,MAAZ;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAI/B,MAAM,KAAKA,GAAf;;AAEA,UAAI,CAACA,IAAImB,MAAT,EAAiB;AACf,aAAKY,MAAL,GAAc,KAAd;AACA,eAAO,KAAKA,MAAZ;AACD;AACD,UAAI1B,UAAU,KAAKA,OAAnB;;AAEA,UAAI0G,UAAU1G,QAAQuD,UAAR,GAAqBpE,IAArB,GACVa,QAAQmE,GAAR,GAAc/E,UAAd,GACAC,YAFJ;AAGA,UAAIiH,QAAQtG,QAAQ0D,MAAR,GAAiB,GAAjB,GAAuB,EAAnC;;AAEA,UAAIF,KAAK7D,IAAI8C,GAAJ,CAAQ,UAAU1C,OAAV,EAAmB;AAClC,eAAOA,QAAQ0C,GAAR,CAAY,UAAUxC,CAAV,EAAa;AAC9B,iBAAQA,MAAMpB,QAAP,GAAmB6H,OAAnB,GACJ,OAAOzG,CAAP,KAAa,QAAd,GAA0B0G,aAAa1G,CAAb,CAA1B,GACAA,EAAEwG,IAFJ;AAGD,SAJM,EAIJhF,IAJI,CAIC,MAJD,CAAP;AAKD,OANQ,EAMNA,IANM,CAMD,GANC,CAAT;;AAQA;AACA;AACA+B,WAAK,SAASA,EAAT,GAAc,IAAnB;;AAEA;AACA,UAAI,KAAK7B,MAAT,EAAiB6B,KAAK,SAASA,EAAT,GAAc,MAAnB;;AAEjB,UAAI;AACF,aAAK9B,MAAL,GAAc,IAAIuD,MAAJ,CAAWzB,EAAX,EAAe8C,KAAf,CAAd;AACD,OAFD,CAEE,OAAOM,EAAP,EAAW,iDAAkD;AAC7D,aAAKlF,MAAL,GAAc,KAAd;AACD;AACD,aAAO,KAAKA,MAAZ;AACD;;AAEDnD,cAAU4C,KAAV,GAAkB,UAAUhB,IAAV,EAAgBJ,OAAhB,EAAyBC,OAAzB,EAAkC;AAClDA,gBAAUA,WAAW,EAArB;AACA,UAAI6G,KAAK,IAAIrI,SAAJ,CAAcuB,OAAd,EAAuBC,OAAvB,CAAT;AACAG,aAAOA,KAAKL,MAAL,CAAY,UAAUgH,CAAV,EAAa;AAC9B,eAAOD,GAAG1F,KAAH,CAAS2F,CAAT,CAAP;AACD,OAFM,CAAP;AAGA,UAAID,GAAG7G,OAAH,CAAW+G,MAAX,IAAqB,CAAC5G,KAAKW,MAA/B,EAAuC;AACrCX,aAAKqE,IAAL,CAAUzE,OAAV;AACD;AACD,aAAOI,IAAP;AACD,KAVD;;AAYA3B,cAAUwD,SAAV,CAAoBb,KAApB,GAA4B,SAASA,KAAT,CAAgB2F,CAAhB,EAAmBhF,OAAnB,EAA4B;AACtD,UAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoCA,UAAU,KAAKA,OAAf;AACpC,WAAKG,KAAL,CAAW,OAAX,EAAoB6E,CAApB,EAAuB,KAAK/G,OAA5B;AACA;AACA;AACA,UAAI,KAAK6B,OAAT,EAAkB,OAAO,KAAP;AAClB,UAAI,KAAKC,KAAT,EAAgB,OAAOiF,MAAM,EAAb;;AAEhB,UAAIA,MAAM,GAAN,IAAahF,OAAjB,EAA0B,OAAO,IAAP;;AAE1B,UAAI9B,UAAU,KAAKA,OAAnB;;AAEA;AACA,UAAIvB,KAAKG,GAAL,KAAa,GAAjB,EAAsB;AACpBkI,YAAIA,EAAErH,KAAF,CAAQhB,KAAKG,GAAb,EAAkB6C,IAAlB,CAAuB,GAAvB,CAAJ;AACD;;AAED;AACAqF,UAAIA,EAAErH,KAAF,CAAQI,UAAR,CAAJ;AACA,WAAKoC,KAAL,CAAW,KAAKlC,OAAhB,EAAyB,OAAzB,EAAkC+G,CAAlC;;AAEA;AACA;AACA;AACA;;AAEA,UAAInH,MAAM,KAAKA,GAAf;AACA,WAAKsC,KAAL,CAAW,KAAKlC,OAAhB,EAAyB,KAAzB,EAAgCJ,GAAhC;;AAEA;AACA,UAAIqH,QAAJ;AACA,UAAI9G,CAAJ;AACA,WAAKA,IAAI4G,EAAEhG,MAAF,GAAW,CAApB,EAAuBZ,KAAK,CAA5B,EAA+BA,GAA/B,EAAoC;AAClC8G,mBAAWF,EAAE5G,CAAF,CAAX;AACA,YAAI8G,QAAJ,EAAc;AACf;;AAED,WAAK9G,IAAI,CAAT,EAAYA,IAAIP,IAAImB,MAApB,EAA4BZ,GAA5B,EAAiC;AAC/B,YAAIH,UAAUJ,IAAIO,CAAJ,CAAd;AACA,YAAI+G,OAAOH,CAAX;AACA,YAAI9G,QAAQkH,SAAR,IAAqBnH,QAAQe,MAAR,KAAmB,CAA5C,EAA+C;AAC7CmG,iBAAO,CAACD,QAAD,CAAP;AACD;AACD,YAAIG,MAAM,KAAKC,QAAL,CAAcH,IAAd,EAAoBlH,OAApB,EAA6B+B,OAA7B,CAAV;AACA,YAAIqF,GAAJ,EAAS;AACP,cAAInH,QAAQqH,UAAZ,EAAwB,OAAO,IAAP;AACxB,iBAAO,CAAC,KAAK1F,MAAb;AACD;AACF;;AAED;AACA;AACA,UAAI3B,QAAQqH,UAAZ,EAAwB,OAAO,KAAP;AACxB,aAAO,KAAK1F,MAAZ;AACD,KAtDD;;AAwDA;AACA;AACA;AACA;AACA;AACAnD,cAAUwD,SAAV,CAAoBoF,QAApB,GAA+B,UAAUH,IAAV,EAAgBlH,OAAhB,EAAyB+B,OAAzB,EAAkC;AAC/D,UAAI9B,UAAU,KAAKA,OAAnB;;AAEA,WAAKiC,KAAL,CAAW,UAAX,EACE,EAAE,QAAQ,IAAV,EAAgBgF,MAAMA,IAAtB,EAA4BlH,SAASA,OAArC,EADF;;AAGA,WAAKkC,KAAL,CAAW,UAAX,EAAuBgF,KAAKnG,MAA5B,EAAoCf,QAAQe,MAA5C;;AAEA,WAAK,IAAIwG,KAAK,CAAT,EACDC,KAAK,CADJ,EAEDC,KAAKP,KAAKnG,MAFT,EAGD8D,KAAK7E,QAAQe,MAHjB,EAIOwG,KAAKE,EAAN,IAAcD,KAAK3C,EAJzB,EAKM0C,MAAMC,IALZ,EAKkB;AAChB,aAAKtF,KAAL,CAAW,eAAX;AACA,YAAIhC,IAAIF,QAAQwH,EAAR,CAAR;AACA,YAAIT,IAAIG,KAAKK,EAAL,CAAR;;AAEA,aAAKrF,KAAL,CAAWlC,OAAX,EAAoBE,CAApB,EAAuB6G,CAAvB;;AAEA;AACA;AACA;AACA,YAAI7G,MAAM,KAAV,EAAiB,OAAO,KAAP;;AAEjB,YAAIA,MAAMpB,QAAV,EAAoB;AAClB,eAAKoD,KAAL,CAAW,UAAX,EAAuB,CAAClC,OAAD,EAAUE,CAAV,EAAa6G,CAAb,CAAvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAIW,KAAKH,EAAT;AACA,cAAII,KAAKH,KAAK,CAAd;AACA,cAAIG,OAAO9C,EAAX,EAAe;AACb,iBAAK3C,KAAL,CAAW,eAAX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAOqF,KAAKE,EAAZ,EAAgBF,IAAhB,EAAsB;AACpB,kBAAIL,KAAKK,EAAL,MAAa,GAAb,IAAoBL,KAAKK,EAAL,MAAa,IAAjC,IACD,CAACtH,QAAQmE,GAAT,IAAgB8C,KAAKK,EAAL,EAAShG,MAAT,CAAgB,CAAhB,MAAuB,GAD1C,EACgD,OAAO,KAAP;AACjD;AACD,mBAAO,IAAP;AACD;;AAED;AACA,iBAAOmG,KAAKD,EAAZ,EAAgB;AACd,gBAAIG,YAAYV,KAAKQ,EAAL,CAAhB;;AAEA,iBAAKxF,KAAL,CAAW,kBAAX,EAA+BgF,IAA/B,EAAqCQ,EAArC,EAAyC1H,OAAzC,EAAkD2H,EAAlD,EAAsDC,SAAtD;;AAEA;AACA,gBAAI,KAAKP,QAAL,CAAcH,KAAK5B,KAAL,CAAWoC,EAAX,CAAd,EAA8B1H,QAAQsF,KAAR,CAAcqC,EAAd,CAA9B,EAAiD5F,OAAjD,CAAJ,EAA+D;AAC7D,mBAAKG,KAAL,CAAW,uBAAX,EAAoCwF,EAApC,EAAwCD,EAAxC,EAA4CG,SAA5C;AACA;AACA,qBAAO,IAAP;AACD,aAJD,MAIO;AACL;AACA;AACA,kBAAIA,cAAc,GAAd,IAAqBA,cAAc,IAAnC,IACD,CAAC3H,QAAQmE,GAAT,IAAgBwD,UAAUrG,MAAV,CAAiB,CAAjB,MAAwB,GAD3C,EACiD;AAC/C,qBAAKW,KAAL,CAAW,eAAX,EAA4BgF,IAA5B,EAAkCQ,EAAlC,EAAsC1H,OAAtC,EAA+C2H,EAA/C;AACA;AACD;;AAED;AACA,mBAAKzF,KAAL,CAAW,0CAAX;AACAwF;AACD;AACF;;AAED;AACA;AACA;AACA;AACA,cAAI3F,OAAJ,EAAa;AACX;AACA,iBAAKG,KAAL,CAAW,0BAAX,EAAuCgF,IAAvC,EAA6CQ,EAA7C,EAAiD1H,OAAjD,EAA0D2H,EAA1D;AACA,gBAAID,OAAOD,EAAX,EAAe,OAAO,IAAP;AAChB;AACD,iBAAO,KAAP;AACD;;AAED;AACA;AACA;AACA,YAAIL,GAAJ;AACA,YAAI,OAAOlH,CAAP,KAAa,QAAjB,EAA2B;AACzBkH,gBAAML,MAAM7G,CAAZ;AACA,eAAKgC,KAAL,CAAW,cAAX,EAA2BhC,CAA3B,EAA8B6G,CAA9B,EAAiCK,GAAjC;AACD,SAHD,MAGO;AACLA,gBAAML,EAAE3F,KAAF,CAAQlB,CAAR,CAAN;AACA,eAAKgC,KAAL,CAAW,eAAX,EAA4BhC,CAA5B,EAA+B6G,CAA/B,EAAkCK,GAAlC;AACD;;AAED,YAAI,CAACA,GAAL,EAAU,OAAO,KAAP;AACX;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAIG,OAAOE,EAAP,IAAaD,OAAO3C,EAAxB,EAA4B;AAC1B;AACA;AACA,eAAO,IAAP;AACD,OAJD,MAIO,IAAI0C,OAAOE,EAAX,EAAe;AACpB;AACA;AACA;AACA,eAAO1F,OAAP;AACD,OALM,MAKA,0BAA2B,IAAIyF,OAAO3C,EAAX,EAAe;AAC/C;AACA;AACA;AACA;AACA,iBAAQ0C,OAAOE,KAAK,CAAb,IAAoBP,KAAKK,EAAL,MAAa,EAAxC;AACD;;AAED;AACA;AACA,YAAM,IAAIM,KAAJ,CAAU,MAAV,CAAN;AACD,KAxJD;;AA0JA;AACA,aAASvB,YAAT,CAAuB7G,CAAvB,EAA0B;AACxB,aAAOA,EAAE8F,OAAF,CAAU,QAAV,EAAoB,IAApB,CAAP;AACD;;AAED,aAASqB,YAAT,CAAuBnH,CAAvB,EAA0B;AACxB,aAAOA,EAAE8F,OAAF,CAAU,0BAAV,EAAsC,MAAtC,CAAP;AACD","file":"minimatch.js","sourcesContent":["module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = (function () { try { return require('path') } catch (e) {}}()) || {\n  sep: '/'\n}\nminimatch.sep = path.sep\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  b = b || {}\n  var t = {}\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n  m.Minimatch.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options)).Minimatch\n  }\n\n  m.filter = function filter (pattern, options) {\n    return orig.filter(pattern, ext(def, options))\n  }\n\n  m.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options))\n  }\n\n  m.makeRe = function makeRe (pattern, options) {\n    return orig.makeRe(pattern, ext(def, options))\n  }\n\n  m.braceExpand = function braceExpand (pattern, options) {\n    return orig.braceExpand(pattern, ext(def, options))\n  }\n\n  m.match = function (list, pattern, options) {\n    return orig.match(list, pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (!options.allowWindowsEscape && path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n  this.partial = !!options.partial\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nvar MAX_PATTERN_LENGTH = 1024 * 64\nvar assertValidPattern = function (pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  assertValidPattern(pattern)\n\n  var options = this.options\n\n  // shortcuts\n  if (pattern === '**') {\n    if (!options.noglobstar)\n      return GLOBSTAR\n    else\n      pattern = '*'\n  }\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      /* istanbul ignore next */\n      case '/': {\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n      }\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        // split where the last [ was, make sure we don't have\n        // an invalid re. if so, re-walk the contents of the\n        // would-be class to re-translate any characters that\n        // were passed through as-is\n        // TODO: It would probably be faster to determine this\n        // without a try/catch and a new RegExp, but it's tricky\n        // to do safely.  For now, this is safe and works.\n        var cs = pattern.substring(classStart + 1, i)\n        try {\n          RegExp('[' + cs + ']')\n        } catch (er) {\n          // not a valid class!\n          var sp = this.parse(cs, SUBPARSE)\n          re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n          hasMagic = hasMagic || sp[1]\n          inClass = false\n          continue\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '[': case '.': case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) /* istanbul ignore next - should be impossible */ {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) /* istanbul ignore next - should be impossible */ {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = function match (f, partial) {\n  if (typeof partial === 'undefined') partial = this.partial\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    /* istanbul ignore if */\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      /* istanbul ignore if */\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      hit = f === p\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else /* istanbul ignore else */ if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    return (fi === fl - 1) && (file[fi] === '')\n  }\n\n  // should be unreachable.\n  /* istanbul ignore next */\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n"]}