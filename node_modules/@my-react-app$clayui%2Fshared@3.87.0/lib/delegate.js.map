{"version":3,"sources":["delegate.js"],"names":["Object","defineProperty","exports","value","default","delegate","isDisabled","node","disabled","closest","element","eventName","selector","callback","capture","eventHandler","event","defaultPrevented","target","delegateTarget","addEventListener","dispose","removeEventListener","_default"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,OAAR,GAAkB,KAAK,CAAvB;AACAF,YAAQG,QAAR,GAAmBA,QAAnB;;AAEA;;;;AAIA,aAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,aAAO,CAAC,EAAEA,KAAKC,QAAL,IAAiBD,KAAKE,OAAL,CAAa,YAAb,CAAnB,CAAR;AACD;;AAED,aAASJ,QAAT,CAAkBK,OAAlB,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,QAAhD,EAA0DC,OAA1D,EAAmE;AACjE,UAAIC,eAAe,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9C,YAAIC,mBAAmBD,MAAMC,gBAA7B;AAAA,YACIC,SAASF,MAAME,MADnB;;AAGA,YAAIA,MAAJ,EAAY;AACV,cAAID,oBAAoBN,cAAc,OAAd,IAAyBL,WAAWY,MAAX,CAAjD,EAAqE;AACnE;AACD;;AAED,cAAIC,iBAAiBD,OAAOT,OAAP,CAAeG,QAAf,CAArB;;AAEA,cAAIO,cAAJ,EAAoB;AAClBH,kBAAMG,cAAN,GAAuBA,cAAvB;AACAN,qBAASG,KAAT;AACD;AACF;AACF,OAhBD;;AAkBAN,cAAQU,gBAAR,CAAyBT,SAAzB,EAAoCI,YAApC,EAAkDD,OAAlD;AACA,aAAO;AACLO,iBAAS,SAASA,OAAT,GAAmB;AAC1BX,kBAAQY,mBAAR,CAA4BX,SAA5B,EAAuCI,YAAvC,EAAqDD,OAArD;AACD;AAHI,OAAP;AAKD;;AAED,QAAIS,WAAWlB,QAAf;AACAH,YAAQE,OAAR,GAAkBmB,QAAlB","file":"delegate.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.delegate = delegate;\n\n/**\n * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction isDisabled(node) {\n  return !!(node.disabled || node.closest('[disabled]'));\n}\n\nfunction delegate(element, eventName, selector, callback, capture) {\n  var eventHandler = function eventHandler(event) {\n    var defaultPrevented = event.defaultPrevented,\n        target = event.target;\n\n    if (target) {\n      if (defaultPrevented || eventName === 'click' && isDisabled(target)) {\n        return;\n      }\n\n      var delegateTarget = target.closest(selector);\n\n      if (delegateTarget) {\n        event.delegateTarget = delegateTarget;\n        callback(event);\n      }\n    }\n  };\n\n  element.addEventListener(eventName, eventHandler, capture);\n  return {\n    dispose: function dispose() {\n      element.removeEventListener(eventName, eventHandler, capture);\n    }\n  };\n}\n\nvar _default = delegate;\nexports.default = _default;"]}