{"version":3,"sources":["useHover.js"],"names":["Object","defineProperty","exports","value","useHover","_react","require","_ref","disabled","onHover","state","useRef","isEmulatedMouseEvents","isHovered","pointerType","undefined","target","current","useMemo","props","onStart","event","currentTarget","contains","type","onEnd","PointerEvent","onPointerEnter","onPointerLeave","onTouchStart","onMouseEnter","onMouseLeave"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,aAAO;AADoC,KAA7C;AAGAD,YAAQE,QAAR,GAAmBA,QAAnB;;AAEA,QAAIC,SAASC,QAAQ,oBAAR,CAAb;;AAEA;;;;AAIA;AACA;AACA,aAASF,QAAT,CAAkBG,IAAlB,EAAwB;AACtB,UAAIC,WAAWD,KAAKC,QAApB;AAAA,UACIC,UAAUF,KAAKE,OADnB;AAEA,UAAIC,QAAQ,CAAC,GAAGL,OAAOM,MAAX,EAAmB;AAC7BC,+BAAuB,KADM;AAE7BC,mBAAW,KAFkB;AAG7BC,qBAAaC,SAHgB;AAI7BC,gBAAQ;AAJqB,OAAnB,EAKTC,OALH;AAMA,aAAO,CAAC,GAAGZ,OAAOa,OAAX,EAAoB,YAAY;AACrC,YAAIC,QAAQ,EAAZ;;AAEA,YAAIC,UAAU,SAASA,OAAT,CAAiBC,KAAjB,EAAwBP,WAAxB,EAAqC;AACjD,cAAIN,YAAYM,gBAAgB,OAA5B,IAAuCJ,MAAMG,SAA7C,IAA0D,CAACQ,MAAMC,aAAN,CAAoBC,QAApB,CAA6BF,MAAML,MAAnC,CAA/D,EAA2G;AACzG;AACD;;AAEDN,gBAAMG,SAAN,GAAkB,IAAlB;AACA,cAAIG,SAASK,MAAMC,aAAnB;AACAZ,gBAAMM,MAAN,GAAeA,MAAf;AACAP,kBAAQ;AACNK,yBAAaA,WADP;AAENE,oBAAQA,MAFF;AAGNQ,kBAAM;AAHA,WAAR;AAKD,SAbD;;AAeA,YAAIC,QAAQ,SAASA,KAAT,CAAeX,WAAf,EAA4B;AACtCJ,gBAAMI,WAAN,GAAoBC,SAApB;AACAL,gBAAMM,MAAN,GAAe,IAAf;;AAEA,cAAIF,gBAAgB,OAAhB,IAA2B,CAACJ,MAAMG,SAAtC,EAAiD;AAC/C;AACD;;AAEDH,gBAAMG,SAAN,GAAkB,KAAlB;AACD,SATD;;AAWA,YAAI,OAAOa,YAAP,KAAwB,WAA5B,EAAyC;AACvCP,gBAAMQ,cAAN,GAAuB,UAAUN,KAAV,EAAiB;AACtCD,oBAAQC,KAAR,EAAeA,MAAMP,WAArB;AACD,WAFD;;AAIAK,gBAAMS,cAAN,GAAuB,UAAUP,KAAV,EAAiB;AACtC,gBAAI,CAACb,QAAD,IAAaa,MAAMC,aAAN,CAAoBC,QAApB,CAA6BF,MAAML,MAAnC,CAAjB,EAA6D;AAC3DS,oBAAMJ,MAAMP,WAAZ;AACD;AACF,WAJD;AAKD,SAVD,MAUO;AACLK,gBAAMU,YAAN,GAAqB,YAAY;AAC/BnB,kBAAME,qBAAN,GAA8B,IAA9B;AACD,WAFD;;AAIAO,gBAAMW,YAAN,GAAqB,UAAUT,KAAV,EAAiB;AACpC,gBAAI,CAACX,MAAME,qBAAX,EAAkC;AAChCQ,sBAAQC,KAAR,EAAe,OAAf;AACD;;AAEDX,kBAAME,qBAAN,GAA8B,KAA9B;AACD,WAND;;AAQAO,gBAAMY,YAAN,GAAqB,UAAUV,KAAV,EAAiB;AACpC,gBAAI,CAACb,QAAD,IAAaa,MAAMC,aAAN,CAAoBC,QAApB,CAA6BF,MAAML,MAAnC,CAAjB,EAA6D;AAC3DS,oBAAM,OAAN;AACD;AACF,WAJD;AAKD;;AAED,eAAON,KAAP;AACD,OA5DM,EA4DJ,CAACV,OAAD,CA5DI,CAAP;AA6DD","file":"useHover.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useHover = useHover;\n\nvar _react = require(\"react\");\n\n/**\n * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>\n * SPDX-License-Identifier: BSD-3-Clause\n */\n// Handles pointer hover interactions for an element.\n// Adapted from https://github.com/adobe/react-spectrum/blob/0182ad0748bcdddf7eb010540c453f9a35a7c753/packages/%40react-aria/interactions/src/useHover.ts\nfunction useHover(_ref) {\n  var disabled = _ref.disabled,\n      onHover = _ref.onHover;\n  var state = (0, _react.useRef)({\n    isEmulatedMouseEvents: false,\n    isHovered: false,\n    pointerType: undefined,\n    target: null\n  }).current;\n  return (0, _react.useMemo)(function () {\n    var props = {};\n\n    var onStart = function onStart(event, pointerType) {\n      if (disabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      var target = event.currentTarget;\n      state.target = target;\n      onHover({\n        pointerType: pointerType,\n        target: target,\n        type: 'hoverstart'\n      });\n    };\n\n    var onEnd = function onEnd(pointerType) {\n      state.pointerType = undefined;\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      props.onPointerEnter = function (event) {\n        onStart(event, event.pointerType);\n      };\n\n      props.onPointerLeave = function (event) {\n        if (!disabled && event.currentTarget.contains(event.target)) {\n          onEnd(event.pointerType);\n        }\n      };\n    } else {\n      props.onTouchStart = function () {\n        state.isEmulatedMouseEvents = true;\n      };\n\n      props.onMouseEnter = function (event) {\n        if (!state.isEmulatedMouseEvents) {\n          onStart(event, 'mouse');\n        }\n\n        state.isEmulatedMouseEvents = false;\n      };\n\n      props.onMouseLeave = function (event) {\n        if (!disabled && event.currentTarget.contains(event.target)) {\n          onEnd('mouse');\n        }\n      };\n    }\n\n    return props;\n  }, [onHover]);\n}"]}