"use strict";

Liferay.Loader.define("@my-react-app$clayui/shared@3.87.0/lib/useMousePosition", ['module', 'exports', 'require', 'my-react-app$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useMousePosition = void 0;

    var _react = require("my-react-app$react");

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function throttle(callback, limit) {
      var waiting = false;
      return function () {
        if (!waiting) {
          callback.apply(void 0, arguments);
          waiting = true;
          setTimeout(function () {
            waiting = false;
          }, limit);
        }
      };
    }
    /**
     * Hook to get the current mouse position
     */

    var useMousePosition = function useMousePosition() {
      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;

      var _useState = (0, _react.useState)([0, 0]),
          _useState2 = _slicedToArray(_useState, 2),
          mousePosition = _useState2[0],
          setMousePosition = _useState2[1];

      (0, _react.useEffect)(function () {
        var handleMousePosition = throttle(function (event) {
          return setMousePosition([event.clientX, event.clientY]);
        }, delay);
        window.addEventListener('mousemove', handleMousePosition);
        return function () {
          return window.removeEventListener('mousemove', handleMousePosition);
        };
      }, [delay]);
      return mousePosition;
    };

    exports.useMousePosition = useMousePosition;
  }
});
//# sourceMappingURL=useMousePosition.js.map