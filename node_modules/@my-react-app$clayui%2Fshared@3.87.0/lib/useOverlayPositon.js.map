{"version":3,"sources":["useOverlayPositon.js"],"names":["Object","defineProperty","exports","value","useOverlayPosition","_react","require","_doAlign","_observeRect","ALIGN_INVERSE","ALIGN_MAP","BottomCenter","BottomLeft","BottomRight","LeftBottom","LeftCenter","LeftTop","RightBottom","RightCenter","RightTop","TopCenter","TopLeft","TopRight","getAlignPoints","val","BOTTOM_OFFSET","LEFT_OFFSET","RIGHT_OFFSET","TOP_OFFSET","OFFSET_MAP","bctc","blbr","bltl","brbl","brtr","clcr","crcl","tcbc","tlbl","tltr","trbr","trtl","useIsomorphicLayoutEffect","window","useEffect","useLayoutEffect","defaultOffset","points","join","_ref","alignmentByViewport","_ref$alignmentPositio","alignmentPosition","_ref$autoBestAlign","autoBestAlign","_ref$getOffset","getOffset","isOpen","ref","triggerRef","deps","arguments","length","undefined","alignElement","current","_points","doAlign","offset","overflow","adjustX","adjustY","alwaysByViewport","sourceElement","targetElement","observeRect"],"mappings":"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","file":"useOverlayPositon.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOverlayPosition = useOverlayPosition;\n\nvar _react = require(\"react\");\n\nvar _doAlign = require(\"./doAlign\");\n\nvar _observeRect = require(\"./observeRect\");\n\n/**\n * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar ALIGN_INVERSE = {\n  0: 'TopCenter',\n  1: 'TopRight',\n  2: 'RightCenter',\n  3: 'BottomRight',\n  4: 'BottomCenter',\n  5: 'BottomLeft',\n  6: 'LeftCenter',\n  7: 'TopLeft',\n  8: 'RightTop',\n  9: 'RightBottom',\n  10: 'LeftTop',\n  11: 'LeftBottom'\n};\nvar ALIGN_MAP = {\n  BottomCenter: ['tc', 'bc'],\n  BottomLeft: ['tl', 'bl'],\n  BottomRight: ['tr', 'br'],\n  LeftBottom: ['br', 'bl'],\n  LeftCenter: ['cr', 'cl'],\n  LeftTop: ['tr', 'tl'],\n  RightBottom: ['bl', 'br'],\n  RightCenter: ['cl', 'cr'],\n  RightTop: ['tl', 'tr'],\n  TopCenter: ['bc', 'tc'],\n  TopLeft: ['bl', 'tl'],\n  TopRight: ['br', 'tr']\n};\n\n/**\n * For backwards compatability, we are creating a util here so that `metal-position`\n * number values are used in the same manner and result in the same alignment direction.\n */\nvar getAlignPoints = function getAlignPoints(val) {\n  return ALIGN_MAP[ALIGN_INVERSE[val]];\n};\n\nvar BOTTOM_OFFSET = [0, 4];\nvar LEFT_OFFSET = [-4, 0];\nvar RIGHT_OFFSET = [4, 0];\nvar TOP_OFFSET = [0, -4];\nvar OFFSET_MAP = {\n  bctc: TOP_OFFSET,\n  blbr: RIGHT_OFFSET,\n  bltl: TOP_OFFSET,\n  brbl: LEFT_OFFSET,\n  brtr: TOP_OFFSET,\n  clcr: RIGHT_OFFSET,\n  crcl: LEFT_OFFSET,\n  tcbc: BOTTOM_OFFSET,\n  tlbl: BOTTOM_OFFSET,\n  tltr: RIGHT_OFFSET,\n  trbr: BOTTOM_OFFSET,\n  trtl: LEFT_OFFSET\n};\nvar useIsomorphicLayoutEffect = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;\n\nvar defaultOffset = function defaultOffset(points) {\n  return OFFSET_MAP[points.join('')];\n};\n\nfunction useOverlayPosition(_ref) {\n  var alignmentByViewport = _ref.alignmentByViewport,\n      _ref$alignmentPositio = _ref.alignmentPosition,\n      alignmentPosition = _ref$alignmentPositio === void 0 ? 5 : _ref$alignmentPositio,\n      _ref$autoBestAlign = _ref.autoBestAlign,\n      autoBestAlign = _ref$autoBestAlign === void 0 ? true : _ref$autoBestAlign,\n      _ref$getOffset = _ref.getOffset,\n      getOffset = _ref$getOffset === void 0 ? defaultOffset : _ref$getOffset,\n      isOpen = _ref.isOpen,\n      ref = _ref.ref,\n      triggerRef = _ref.triggerRef;\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [isOpen];\n  useIsomorphicLayoutEffect(function () {\n    function alignElement() {\n      if (triggerRef.current) {\n        var _points = alignmentPosition;\n\n        if (typeof _points === 'number') {\n          _points = getAlignPoints(_points);\n        }\n\n        if (ref.current) {\n          (0, _doAlign.doAlign)({\n            offset: getOffset(_points),\n            overflow: {\n              adjustX: autoBestAlign,\n              adjustY: autoBestAlign,\n              alwaysByViewport: alignmentByViewport\n            },\n            points: _points,\n            sourceElement: ref.current,\n            targetElement: triggerRef.current\n          });\n        }\n      }\n    }\n\n    if (isOpen && ref.current) {\n      alignElement();\n      return (0, _observeRect.observeRect)(ref.current, alignElement);\n    }\n  }, deps);\n}"]}