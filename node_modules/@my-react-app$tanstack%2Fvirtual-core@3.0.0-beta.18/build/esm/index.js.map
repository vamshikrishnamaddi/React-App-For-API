{"version":3,"sources":["../../src/utils.ts","../../src/index.ts"],"names":["deps","opts","depTime","Date","newDeps","depsChanged","resultTime","result","fn","depEndTime","Math","resultEndTime","pad","str","String","console","defaultKeyExtractor","defaultRangeExtractor","start","range","end","arr","i","memoRectCallback","prev","height","width","instance","rect","cb","observeElementRect","observer","entries","observeWindowRect","memoizedCallback","onResize","innerHeight","capture","passive","scrollProps","element","window","createOffsetObserver","propX","propY","prevX","prevY","scroll","onScroll","target","e","scrollX","scrollY","observeElementOffset","observeWindowOffset","measureElement","windowScroll","behavior","canSmooth","undefined","elementScroll","unsubs","scrollElement","measurementsCache","itemMeasurementsCache","pendingMeasuredCacheIndexes","measureElementCache","startIndex","endIndex","constructor","Object","debug","initialOffset","overscan","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","horizontal","getItemKey","rangeExtractor","enableSmoothScroll","onChange","initialRect","memo","min","measurements","key","measuredSize","size","index","process","calculateRange","scrollOffset","count","makeMeasureElement","item","measuredItemSize","itemSize","virtualItems","currentMeasureElements","k","len","indexes","measurement","align","smoothScroll","offset","toOffset","rest","clearTimeout","check","lastOffset","scrollCheckFrame","setTimeout","findNearestBinarySearch","low","middle","currentValue","getCurrentValue","high"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,aAAA,IAAA,CAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAQU;AACf,UAAIA,OAAJ,EAAA;AACA,UAAA,MAAA;AAEA,aAAO,MAAM;AACX,YAAA,OAAA;AACA,YAAIC,KAAAA,GAAAA,IAAYA,KAAZA,KAAYA,IAAAA,IAAZA,IAAYA,KAAhB,KAAgBA,EAAhB,EAAgCC,UAAUC,KAAVD,GAAUC,EAAVD;AAEhC,cAAME,UAAN,SAAA;AAEA,cAAMC,cACJD,QAAAA,MAAAA,KAAmBJ,KAAnBI,MAAAA,IACAA,QAAAA,IAAAA,CAAa,CAAA,GAAA,EAAA,KAAA,KAA6BJ,KAAAA,KAAAA,MAF5C,GAEEI,CAFF;;AAIA,YAAI,CAAJ,WAAA,EAAkB;AAChB,iBAAA,MAAA;AACD;;AAEDJ,eAAAA,OAAAA;AAEA,YAAA,UAAA;AACA,YAAIC,KAAAA,GAAAA,IAAYA,KAAZA,KAAYA,IAAAA,IAAZA,IAAYA,KAAhB,KAAgBA,EAAhB,EAAgCK,aAAaH,KAAbG,GAAaH,EAAbG;AAEhCC,iBAASC,GAAG,GAAZD,OAASC,CAATD;AACAN,gBAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAAA,QAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAAA,QAAAA,CAAAA,MAAAA,CAAAA;;AAEA,YAAIA,KAAAA,GAAAA,IAAYA,KAAZA,KAAYA,IAAZA,IAAAA,IAAYA,KAAhB,KAAgBA,EAAhB,EAAgC;AAC9B,gBAAMQ,aAAaC,KAAAA,KAAAA,CAAW,CAACP,KAAAA,GAAAA,KAAD,OAAA,IAAXO,GAAAA,IAAnB,GAAA;AACA,gBAAMC,gBAAgBD,KAAAA,KAAAA,CAAW,CAACP,KAAAA,GAAAA,KAAD,UAAA,IAAXO,GAAAA,IAAtB,GAAA;;;AAGA,gBAAME,MAAM,CAAA,GAAA,EAAA,GAAA,KAAuC;AACjDC,kBAAMC,OAAND,GAAMC,CAAND;;AACA,mBAAOA,IAAAA,MAAAA,GAAP,GAAA,EAAyB;AACvBA,oBAAM,MAANA,GAAAA;AACD;;AACD,mBAAA,GAAA;AALF,WAAA;;AAQAE,kBAAAA,IAAAA,CAAAA,cACSH,IAAG,aAAHA,EADTG,CACSH,CADTG,GAAAA,IAAAA,GACmCH,IAAG,UAAHA,EADnCG,CACmCH,CADnCG,GAAAA,KAAAA,EAAAA,6FAKmBL,KAAAA,GAAAA,CAAAA,CAAAA,EAEXA,KAAAA,GAAAA,CAAS,MAATA,OAjBoBC,gBAA5B,EAiBQD,CAAAA,EAPRK,GAOQL,CAFWA,CALnBK,GAAAA,gBAAAA,EAAAA,QASEd,IATFc,GASEd,KAAAA,CATFc,GASEd,KATFc,GAAAA;AAWD;;AAED,eAAA,MAAA;AAhDF,OAAA;AAkDD;;ACvBD;AAEaC,UAAAA,sBAAsB,SAA5B,KAAMA;AAEAC,UAAAA,wBAAwB,SAAkB;AACrD,YAAMC,QAAQR,KAAAA,GAAAA,CAASS,MAAAA,UAAAA,GAAmBA,MAA5BT,QAAAA,EAAd,CAAcA,CAAd;AACA,YAAMU,MAAMV,KAAAA,GAAAA,CAASS,MAAAA,QAAAA,GAAiBA,MAA1BT,QAAAA,EAA0CS,MAAAA,KAAAA,GAAtD,CAAYT,CAAZ;AAEA,YAAMW,MAAN,EAAA;;AAEA,WAAK,IAAIC,IAAT,KAAA,EAAoBA,KAApB,GAAA,EAAA,GAAA,EAAmC;AACjCD,YAAAA,IAAAA,CAAAA,CAAAA;AACD;;AAED,aAAA,GAAA;AAVK,KAAMJ;;AAab,UAAMM,mBAAmB,CAAA,QAAA,EAAA,EAAA,KAGpB;AACH,UAAIC,OAAa;AAAEC,gBAAQ,CAAV,CAAA;AAAcC,eAAO,CAAC;AAAtB,OAAjB;AAEA,aAAO,QAAgB;AACrB,YACEC,SAAAA,OAAAA,CAAAA,UAAAA,GACIC,KAAAA,KAAAA,KAAeJ,KADnBG,KAAAA,GAEIC,KAAAA,MAAAA,KAAgBJ,KAHtB,MAAA,EAIE;AACAK,aAAAA,IAAAA;AACD;;AAEDL,eAAAA,IAAAA;AATF,OAAA;AANF,KAAA;;UAmBaM,qBAAqB,CAAA,QAAA,EAAA,EAAA,KAG7B;AACH,YAAMC,WAAW,IAAA,cAAA,CAAmB,WAAa;AAAA,YAAA,SAAA,EAAA,UAAA;;AAC/CF,WAAG;AACDH,iBAAK,CAAA,YAAEM,QAAF,CAAEA,CAAF,KAAEA,IAAF,GAAEA,KAAAA,CAAF,GAAEA,UAAAA,WAAAA,CADN,KAAA;AAEDP,kBAAM,CAAA,aAAEO,QAAF,CAAEA,CAAF,KAAEA,IAAF,GAAEA,KAAAA,CAAF,GAAEA,WAAAA,WAAAA,CAAwBP;AAF/B,SAAHI;AADF,OAAiB,CAAjB;;AAOA,UAAI,CAACF,SAAL,aAAA,EAA6B;AAC3B;AACD;;AAEDE,SAAGF,SAAAA,aAAAA,CAAHE,qBAAGF,EAAHE;AAEAE,eAAAA,OAAAA,CAAiBJ,SAAjBI,aAAAA;AAEA,aAAO,MAAM;AACXA,iBAAAA,SAAAA,CAAmBJ,SAAnBI,aAAAA;AADF,OAAA;AAnBK,K;UAwBME,oBAAoB,CAAA,QAAA,EAAA,EAAA,KAG5B;AACH,YAAMC,mBAAmBX,iBAAgB,QAAhBA,EAAzB,EAAyBA,CAAzB;;AACA,YAAMY,WAAW,MACfD,iBAAiB;AACfR,eAAOC,SAAAA,aAAAA,CADQ,UAAA;AAEfF,gBAAQE,SAAAA,aAAAA,CAAuBS;AAFhB,OAAjBF,CADF;;AAMA,UAAI,CAACP,SAAL,aAAA,EAA6B;AAC3B;AACD;;AAEDQ;AAEAR,eAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA,EAA4D;AAC1DU,iBAD0D,KAAA;AAE1DC,iBAAS;AAFiD,OAA5DX;AAKA,aAAO,MAAM;AACXA,iBAAAA,aAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AADF,OAAA;AAtBK,K;AA6BP,UAAMY,cAAc;AAClBC,eAAS,CAAA,YAAA,EADS,WACT,CADS;AAElBC,cAAQ,CAAA,SAAA,EAAA,SAAA;AAFU,KAApB;;AAKA,UAAMC,uBAAuB,QAAwB;AACnD,aAAO,CAAA,QAAA,EAAA,EAAA,KAAmE;AACxE,YAAI,CAACf,SAAL,aAAA,EAA6B;AAC3B;AACD;;AAED,cAAMgB,QAAQJ,YAAAA,IAAAA,EAAd,CAAcA,CAAd;AACA,cAAMK,QAAQL,YAAAA,IAAAA,EAAd,CAAcA,CAAd;AAEA,YAAIM,QAAgBlB,SAAAA,aAAAA,CAApB,KAAoBA,CAApB;AACA,YAAImB,QAAgBnB,SAAAA,aAAAA,CAApB,KAAoBA,CAApB;;AAEA,cAAMoB,SAAS,MAAM;AACnBlB,aAAGF,SAAAA,aAAAA,CAAuBA,SAAAA,OAAAA,CAAAA,UAAAA,GAAAA,KAAAA,GAA1BE,KAAGF,CAAHE;AADF,SAAA;;AAIAkB;;AAEA,cAAMC,WAAW,KAAc;AAC7B,gBAAMC,SAASC,EAAf,aAAA;AACA,gBAAMC,UAAUF,OAAhB,KAAgBA,CAAhB;AACA,gBAAMG,UAAUH,OAAhB,KAAgBA,CAAhB;;AAEA,cAAItB,SAAAA,OAAAA,CAAAA,UAAAA,GAA8BkB,QAA9BlB,OAAAA,GAAgDmB,QAApD,OAAA,EAAqE;AACnEC;AACD;;AAEDF,kBAAAA,OAAAA;AACAC,kBAAAA,OAAAA;AAVF,SAAA;;AAaAnB,iBAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA,EAA4D;AAC1DU,mBAD0D,KAAA;AAE1DC,mBAAS;AAFiD,SAA5DX;AAKA,eAAO,MAAM;AACXA,mBAAAA,aAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AADF,SAAA;AAnCF,OAAA;AADF,KAAA;;UA0Ca0B,uBAAuBX,qBAA7B,SAA6BA,C;UACvBY,sBAAsBZ,qBAA5B,QAA4BA,C;UAEtBa,iBAAiB,CAAA,OAAA,EAAA,QAAA,KAGzB;AACH,aAAO,QAAA,qBAAA,GACL5B,SAAAA,OAAAA,CAAAA,UAAAA,GAAAA,OAAAA,GADF,QAAO,CAAP;AAJK,K;AASA,UAAM6B,eAAe,CAAA,MAAA,EAAA,SAAA,EAAA,QAAA,KAIvB;AAAA,UAAA,qBAAA;AACF,OAAA,wBAAC7B,SAAD,aAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,QAAA,CAA+C;AAC9C,SAACA,SAAAA,OAAAA,CAAAA,UAAAA,GAAAA,MAAAA,GAAD,KAAA,GAD8C,MAAA;AAE9C8B,kBAAUC,YAAS,QAATA,GAAuBC;AAFa,OAA/C,CAAA;AALI,KAAA;AAWA,UAAMC,gBAAgB,CAAA,MAAA,EAAA,SAAA,EAAA,QAAA,KAIxB;AAAA,UAAA,sBAAA;AACF,OAAA,yBAACjC,SAAD,aAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,uBAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,uBAAA,QAAA,CAAgD;AAC/C,SAACA,SAAAA,OAAAA,CAAAA,UAAAA,GAAAA,MAAAA,GAAD,KAAA,GAD+C,MAAA;AAE/C8B,kBAAUC,YAAS,QAATA,GAAuBC;AAFc,OAAhD,CAAA;AALI,KAAA;AAuDA,UAAA,WAAA,CAAoE;AAoBzEU,kBAAW,KAAXA,EAAoE;AAAA,YAAA,QAAA,IAAA;;AAnB5DR,aAAAA,MAAAA,GAAkC,EAAlCA;AAERC,aAAAA,aAAAA,GAAuC,IAAvCA;AACQC,aAAAA,iBAAAA,GAA4B,EAA5BA;AACAC,aAAAA,qBAAAA,GAA6C,EAA7CA;AACAC,aAAAA,2BAAAA,GAAwC,EAAxCA;AAKAC,aAAAA,mBAAAA,GAGJ,EAHIA;AAS4D,aAL5D/C,KAK4D,GALV;AACxDgD,sBADwD,CAAA;AAExDC,oBAAU;AAF8C,SAKU;;AAAA,aAAA,UAAA,GAQvD,QAA4D;AACvEE,iBAAAA,OAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA6B,QAAkB;AAAA,gBAAjB,CAAA,GAAA,EAAA,KAAA,IAAiB,IAAA;AAC7C,gBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC,OAAO,KAAP,GAAO,CAAP;AADpCA,WAAAA;AAIA,eAAA,OAAA;AACEC,mBADa,KAAf;AAEEC,2BAFa,CAAf;AAGEC,sBAHa,CAAf;AAIEC,0BAJa,CAAf;AAKEC,wBALa,CAAf;AAMEC,gCANa,CAAf;AAOEC,8BAPa,CAAf;AAQEC,wBARa,KAAf;AASEC,wBATa,mBAAf;AAUEC,4BAVa,qBAAf;AAWEC,gCAXa,IAAf;AAYEC,sBAAU,MAAM,CAZH,CAAf;AAAe,0BAAf;AAcEC,yBAAa;AAAEzD,qBAAF,CAAA;AAAYD,sBAAQ;AAApB;AAdf,aAeKxB,IAfL;AAbkE,SAAA;;AAAA,aAAA,MAAA,GAgCnD,MAAM;AAAA,cAAA,qBAAA,EAAA,aAAA;;AACrB,WAAA,wBAAA,CAAA,gBAAA,KAAA,OAAA,EAAA,QAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA;AAjCkE,SAAA;;AAAA,aAAA,OAAA,GAoClD,MAAM;AACtB,eAAA,MAAA,CAAA,MAAA,CAAA,OAAA,EAAA,OAAA,CAAoC,KAApC,GAAA;AACA,eAAA,MAAA,GAAA,EAAA;AACA,eAAA,aAAA,GAAA,IAAA;AAvCkE,SAAA;;AAAA,aAAA,SAAA,GA0CxD,MAAM;AAChB,iBAAO,MAAM;AACX,iBAAA,OAAA;AADF,WAAA;AA3CkE,SAAA;;AAAA,aAAA,WAAA,GAgDtD,MAAM;AAClB,gBAAM6D,gBAAgB,KAAA,OAAA,CAAtB,gBAAsB,EAAtB;;AAEA,cAAI,KAAA,aAAA,KAAJ,aAAA,EAA0C;AACxC,iBAAA,OAAA;AAEA,iBAAA,aAAA,GAAA,aAAA;;AACA,iBAAA,eAAA,CAAqB,KAArB,YAAA,EAAA,KAAA;;AAEA,iBAAA,MAAA,CAAA,IAAA,CACE,KAAA,OAAA,CAAA,kBAAA,CAAA,IAAA,EAAsC,QAAU;AAC9C,mBAAA,UAAA,GAAA,IAAA;AACA,mBAAA,cAAA;AAHJ,aACE,CADF;AAOA,iBAAA,MAAA,CAAA,IAAA,CACE,KAAA,OAAA,CAAA,oBAAA,CAAA,IAAA,EAAwC,UAAY;AAClD,mBAAA,YAAA,GAAA,MAAA;AACA,mBAAA,cAAA;AAHJ,aACE,CADF;AAMD;AAtEiE,SAAA;;AAAA,aAAA,OAAA,GAyElD,MAAM;AACtB,iBAAO,KAAA,UAAA,CAAgB,KAAA,OAAA,CAAA,UAAA,GAAA,OAAA,GAAvB,QAAO,CAAP;AA1EkE,SAAA;;AAAA,aAAA,eAAA,GA6E1CsB,KACxB,MAAM,CACJ,KAAA,OAAA,CADI,KAAA,EAEJ,KAAA,OAAA,CAFI,YAAA,EAGJ,KAAA,OAAA,CAHI,UAAA,EAIJ,KAL0B,qBACtB,CADkBA,EAOxB,CAAA,KAAA,EAAA,YAAA,EAAA,UAAA,EAAA,iBAAA,KAAwD;AACtD,gBAAMC,MACJ,KAAA,2BAAA,CAAA,MAAA,GAAA,CAAA,GACI3E,KAAAA,GAAAA,CAAS,GAAG,KADhB,2BACIA,CADJ,GADF,CAAA;AAIA,eAAA,2BAAA,GAAA,EAAA;AAEA,gBAAM4E,eAAe,KAAA,iBAAA,CAAA,KAAA,CAAA,CAAA,EAArB,GAAqB,CAArB;;AAEA,eAAK,IAAIhE,IAAT,GAAA,EAAkBA,IAAlB,KAAA,EAAA,GAAA,EAAkC;AAChC,kBAAMiE,MAAMR,WAAZ,CAAYA,CAAZ;AACA,kBAAMS,eAAezB,kBAArB,GAAqBA,CAArB;AACA,kBAAM7C,QAAQoE,aAAahE,IAAbgE,CAAAA,IACVA,aAAahE,IAAbgE,CAAAA,EADUA,GAAAA,GAAd,YAAA;AAGA,kBAAMG,OACJ,OAAA,YAAA,KAAA,QAAA,GAAA,YAAA,GAEI,KAAA,OAAA,CAAA,YAAA,CAHN,CAGM,CAHN;;AAKAH,yBAAAA,CAAAA,IAAkB;AAAEI,qBAAF,CAAA;AAAA,mBAAA;AAAA,kBAAA;AAAA,mBADNxE,QAAZ,IACkB;AAA8BqE;AAA9B,aAAlBD;AACD;;AAED,eAAA,iBAAA,GAAA,YAAA;AACA,iBAAA,YAAA;AA/B0B,SAAJF,EAiCxB;AACEG,eAAKI,QADP,iBAAA;AAEEpB,iBAAO,MAAM,KAAA,OAAA,CAAaA;AAF5B,SAjCwBa,CA7E0C;AAAA,aAAA,cAAA,GAoH3CA,KACvB,MAAM,CAAC,KAAD,eAAC,EAAD,EAAyB,KAAzB,OAAyB,EAAzB,EAAyC,KADpB,YACrB,CADiBA,EAEvB,CAAA,YAAA,EAAA,SAAA,EAAA,YAAA,KAA2C;AACzC,gBAAMjE,QAAQyE,eAAe;AAAA,wBAAA;AAAA,qBAAA;AAG3BC;AAH2B,WAAfD,CAAd;;AAKA,cACEzE,MAAAA,UAAAA,KAAqB,KAAA,KAAA,CAArBA,UAAAA,IACAA,MAAAA,QAAAA,KAAmB,KAAA,KAAA,CAFrB,QAAA,EAGE;AACA,iBAAA,KAAA,GAAA,KAAA;AACA,iBAAA,MAAA;AACD;;AACD,iBAAO,KAAP,KAAA;AAfyB,SAAJiE,EAiBvB;AACEG,eAAKI,QADP,gBAAA;AAEEpB,iBAAO,MAAM,KAAA,OAAA,CAAaA;AAF5B,SAjBuBa,CApH2C;AAAA,aAAA,UAAA,GA2I/CA,KACnB,MAAM,CACJ,KAAA,OAAA,CADI,cAAA,EAEJ,KAFI,KAAA,EAGJ,KAAA,OAAA,CAHI,QAAA,EAIJ,KAAA,OAAA,CALqB,KACjB,CADaA,EAOnB,CAAA,cAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,KAA4C;AAC1C,iBAAOJ,4BAAe,KAAfA;AAAe,oBAAfA;AAGLc,mBAAOA;AAHFd,aAAP;AARqB,SAAJI,EAcnB;AACEG,eAAKI,QADP,YAAA;AAEEpB,iBAAO,MAAM,KAAA,OAAA,CAAaA;AAF5B,SAdmBa,CA3I+C;AAAA,aAAA,eAAA,GA+JlDA,KAChB,MAAM,CACJ,KADI,UACJ,EADI,EAEJ,KAFI,eAEJ,EAFI,EAGJ,KAAA,OAAA,CAJkB,cACd,CADUA,EAMhB,CAAA,OAAA,EAAA,YAAA,EAAA,cAAA,KAA2C;AACzC,gBAAMW,qBACJ,SAAmB,kBAAyC;AAAA,gBAAA,qBAAA;;AAC1D,kBAAMC,OAAO,KAAA,iBAAA,CAAb,KAAa,CAAb;;AAEA,gBAAI,CAAJ,cAAA,EAAqB;AACnB;AACD;;AAED,kBAAMC,mBAAmB1C,eAAc,cAAdA,EAAzB,IAAyBA,CAAzB;AACA,kBAAM2C,WAAQ,CAAA,wBAAG,KAAA,qBAAA,CAA2BF,KAA9B,GAAG,CAAH,KAAA,IAAA,GAAA,qBAAA,GAA2CA,KAAzD,IAAA;;AAEA,gBAAIC,qBAAJ,QAAA,EAAmC;AACjC,kBAAID,KAAAA,KAAAA,GAAa,KAAjB,YAAA,EAAoC;AAClC,oBAAIL,QAAyC,KAAA,OAAA,CAA7C,KAAA,EAAiE;AAC/D5E,0BAAAA,IAAAA,CAAAA,YAAAA,EAA2BkF,mBAA3BlF,QAAAA;AACD;;AAED,oBAAI,CAAC,KAAL,iBAAA,EAA6B;AAC3B,uBAAA,eAAA,CACE,KAAA,YAAA,IAAqBkF,mBADvB,QACE,CADF,EAAA,KAAA;AAID;AACF;;AAED,mBAAA,2BAAA,CAAA,IAAA,CAAA,KAAA;AACA,mBAAA,qBAAA,gBACK,KADwB,qBAA7B;AAEE,iBAACD,KAAD,GAAA,GAAYC;AAFd;AAIA,mBAAA,MAAA;AACD;AA/BL,WAAA;;AAkCA,gBAAME,eAAN,EAAA;AAEA,gBAAMC,yBAAN,EAAA;;AAEA,eAAK,IAAIC,IAAJ,CAAA,EAAWC,MAAMC,QAAtB,MAAA,EAAsCF,IAAtC,GAAA,EAAA,GAAA,EAAoD;AAAA,gBAAA,qBAAA;;AAClD,kBAAM/E,IAAIiF,QAAV,CAAUA,CAAV;AACA,kBAAMC,cAAclB,aAApB,CAAoBA,CAApB;AAEA,kBAAMU,oBAAO,WAAPA;AAEJzC,8BAAiB6C,uBAAAA,CAAAA,IACf,CAAA,wBAAA,KAAA,mBAAA,CADeA,CACf,CAAA,KAA+BL,IAA/B,GAA+BA,qBAA/B,GAA+BA,mBAAkB,CAAlBA;AAH7BC,cAAN;AAKAG,yBAAAA,IAAAA,CAAAA,IAAAA;AACD;;AAED,eAAA,mBAAA,GAAA,sBAAA;AAEA,iBAAA,YAAA;AA3DkB,SAAJf,EA6DhB;AACEG,eAAKI,QADP,YAAA;AAEEpB,iBAAO,MAAM,KAAA,OAAA,CAAaA;AAF5B,SA7DgBa,CA/JkD;;AAAA,aAAA,cAAA,GAkOnD,UAAA,QAAA,EAGZ,KAHY,EAGZ;AAAA,cADH;AAAEqB,oBAAF,OAAA;AAAmBC,2BAAe,MAAA,OAAA,CAAazB;AAA/C,cACG,UAAA,KAAA,CAAA,GAD0F,EAC1F,GAAA,KAAA;AACH,gBAAM0B,SAAS,MAAf,YAAA;;AACA,gBAAMlB,OAAO,MAAb,OAAa,EAAb;;AAEA,cAAIgB,UAAJ,MAAA,EAAsB;AACpB,gBAAIG,YAAJ,MAAA,EAAwB;AACtBH,sBAAAA,OAAAA;AADF,aAAA,MAEO,IAAIG,YAAYD,SAAhB,IAAA,EAA+B;AACpCF,sBAAAA,KAAAA;AADK,aAAA,MAEA;AACLA,sBAAAA,OAAAA;AACD;AACF;;AAED,cAAIA,UAAJ,OAAA,EAAuB;AACnB,kBAAA,eAAA,CAAA,QAAA,EAAA,YAAA;AADJ,WAAA,MAES,IAAIA,UAAJ,KAAA,EAAqB;AAC1B,kBAAA,eAAA,CAAqBG,WAArB,IAAA,EAAA,YAAA;AADK,WAAA,MAEA,IAAIH,UAAJ,QAAA,EAAwB;AAC7B,kBAAA,eAAA,CAAqBG,WAAWnB,OAAhC,CAAA,EAAA,YAAA;AACH;AAzPiE,SAAA;;AAAA,aAAA,aAAA,GA4PpD,UAAA,KAAA,EAGX,MAHW,EAGX;AAAA,sBAAA,WAAA,KAAA,CAAA,GADiG,EACjG,GAAA,MAAA;AAAA,cADH;AAAEgB,oBAAF,MAAA;AAAkBC,2BAAe,MAAA,OAAA,CAAjC;AAAA,WACG;AAAA,cADkEG,IAClE;;AACH,gBAAMvB,eAAe,MAArB,eAAqB,EAArB;;AACA,gBAAMqB,SAAS,MAAf,YAAA;;AACA,gBAAMlB,OAAO,MAAb,OAAa,EAAb;;AACA,gBAAM;AAAEK;AAAF,cAAY,MAAlB,OAAA;AAEA,gBAAMU,cAAclB,aAAa5E,KAAAA,GAAAA,CAAAA,CAAAA,EAAYA,KAAAA,GAAAA,CAAAA,KAAAA,EAAgBoF,QAA7D,CAA6CpF,CAAZA,CAAb4E,CAApB;;AAEA,cAAI,CAAJ,WAAA,EAAkB;AAChB;AACD;;AAED,cAAImB,UAAJ,MAAA,EAAsB;AACpB,gBAAID,YAAAA,GAAAA,IAAmBG,SAAAA,IAAAA,GAAgB,MAAA,OAAA,CAAvC,gBAAA,EAAsE;AACpEF,sBAAAA,KAAAA;AADF,aAAA,MAEO,IACLD,YAAAA,KAAAA,IACAG,SAAS,MAAA,OAAA,CAFJ,kBAAA,EAGL;AACAF,sBAAAA,OAAAA;AAJK,aAAA,MAKA;AACL;AACD;AACF;;AAED,gBAAMG,WACJH,UAAAA,KAAAA,GACID,YAAAA,GAAAA,GAAkB,MAAA,OAAA,CADtBC,gBAAAA,GAEID,YAAAA,KAAAA,GAAoB,MAAA,OAAA,CAH1B,kBAAA;;AAKA,gBAAA,cAAA,CAAA,QAAA;AAA8B,iBAA9B;AAA8B;AAA9B,aAAwDK,IAAxD;AA7RkE,SAAA;;AAAA,aAAA,YAAA,GAgSrD,MAAA;AAAA,cAAA,qBAAA;;AAAA,iBACb,CAAC,CAAA,CAAA,wBAAA,KAAA,eAAA,GAAuB,KAAA,OAAA,CAAA,KAAA,GAAvB,CAAA,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,GAAA,KACC,KAAA,OAAA,CADF,YAAA,IAC+B,KAAA,OAAA,CAFlB,UAAA;AAhSqD,SAAA;;AAAA,aAAA,eAAA,GAoS1C,CAAA,MAAA,EAAA,SAAA,KAAwC;AAChEC,uBAAa,KAAbA,gBAAAA;AAEA,eAAA,iBAAA,GAAA,MAAA;AACA,eAAA,OAAA,CAAA,UAAA,CAAA,MAAA,EAAA,SAAA,EAAA,IAAA;AAMA,cAAA,gBAAA;;AAEA,gBAAMC,QAAQ,MAAM;AAClB,gBAAIC,aAAa,KAAjB,YAAA;AACA,iBAAA,gBAAA,GAAwBC,mBAAmBC,WAAW,MAAM;AAC1D,kBAAI,KAAA,gBAAA,KAAJ,gBAAA,EAAgD;AAC9C;AACD;;AAED,kBAAI,KAAA,YAAA,KAAJ,UAAA,EAAsC;AACpC,qBAAA,iBAAA,GAAA,SAAA;AACA;AACD;;AACDF,2BAAa,KAAbA,YAAAA;AACAD;AAVmD,aAAVG,EAA3C,GAA2CA,CAA3C;AAFF,WAAA;;AAgBAH;AAhUkE,SAAA;;AAAA,aAAA,OAAA,GAmU1D,MAAM;AACd,eAAA,qBAAA,GAAA,EAAA;AACA,eAAA,MAAA;AArUkE,SAAA;;AAClE,aAAA,UAAA,CAAA,KAAA;AACA,aAAA,UAAA,GAAkB,KAAA,OAAA,CAAlB,WAAA;AACA,aAAA,YAAA,GAAoB,KAAA,OAAA,CAApB,aAAA;AAEA,aAAA,cAAA;AACD;;AA1BwE;;AA6V3E,UAAMI,0BAA0B,CAAA,GAAA,EAAA,IAAA,EAAA,eAAA,EAAA,KAAA,KAK3B;AACH,aAAOC,OAAP,IAAA,EAAoB;AAClB,cAAMC,SAAU,CAACD,MAAD,IAAA,IAAD,CAAC,GAAhB,CAAA;AACA,cAAME,eAAeC,gBAArB,MAAqBA,CAArB;;AAEA,YAAID,eAAJ,KAAA,EAA0B;AACxBF,gBAAMC,SAAND,CAAAA;AADF,SAAA,MAEO,IAAIE,eAAJ,KAAA,EAA0B;AAC/BE,iBAAOH,SAAPG,CAAAA;AADK,SAAA,MAEA;AACL,iBAAA,MAAA;AACD;AACF;;AAED,UAAIJ,MAAJ,CAAA,EAAa;AACX,eAAOA,MAAP,CAAA;AADF,OAAA,MAEO;AACL,eAAA,CAAA;AACD;AAvBH,KAAA;;AA0BA,aAAA,cAAA,CAQG,KARH,EAQG;AAAA,UARqB;AAAA,oBAAA;AAAA,iBAAA;AAGtBvB;AAHsB,UAQrB,KAAA;AACD,YAAMC,QAAQR,aAAAA,MAAAA,GAAd,CAAA;;AAGA,YAAMnB,aAAagD,wBAAuB,CAAvBA,EAAuB,KAAvBA,EAFD,SAAmB7B,aAAAA,KAAAA,EAArC,KAEmB6B,EAAnB,YAAmBA,CAAnB;AACA,UAAI/C,WAAJ,UAAA;;AAEA,aACEA,WAAAA,KAAAA,IACAkB,aAAAA,QAAAA,EAAAA,GAAAA,GAA8BO,eAFhC,SAAA,EAGE;AACAzB;AACD;;AAED,aAAO;AAAA,kBAAA;AAAcA;AAAd,OAAP;AACD","sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n","import { memo } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  smoothScroll?: boolean\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\ninterface Item {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\nexport interface VirtualItem<TItemElement> extends Item {\n  measureElement: (el: TItemElement | null) => void\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nconst memoRectCallback = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  let prev: Rect = { height: -1, width: -1 }\n\n  return (rect: Rect) => {\n    if (\n      instance.options.horizontal\n        ? rect.width !== prev.width\n        : rect.height !== prev.height\n    ) {\n      cb(rect)\n    }\n\n    prev = rect\n  }\n}\n\nexport const observeElementRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const observer = new ResizeObserver((entries) => {\n    cb({\n      width: entries[0]?.contentRect.width as number,\n      height: entries[0]?.contentRect.height as number\n    })\n  })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  cb(instance.scrollElement.getBoundingClientRect())\n\n  observer.observe(instance.scrollElement)\n\n  return () => {\n    observer.unobserve(instance.scrollElement)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const memoizedCallback = memoRectCallback(instance, cb)\n  const onResize = () =>\n    memoizedCallback({\n      width: instance.scrollElement.innerWidth,\n      height: instance.scrollElement.innerHeight,\n    })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize()\n\n  instance.scrollElement.addEventListener('resize', onResize, {\n    capture: false,\n    passive: true,\n  })\n\n  return () => {\n    instance.scrollElement.removeEventListener('resize', onResize)\n  }\n}\n\ntype ObserverMode = 'element' | 'window'\n\nconst scrollProps = {\n  element: ['scrollLeft', 'scrollTop'],\n  window: ['scrollX', 'scrollY'],\n} as const\n\nconst createOffsetObserver = (mode: ObserverMode) => {\n  return (instance: Virtualizer<any, any>, cb: (offset: number) => void) => {\n    if (!instance.scrollElement) {\n      return\n    }\n\n    const propX = scrollProps[mode][0]\n    const propY = scrollProps[mode][1]\n\n    let prevX: number = instance.scrollElement[propX]\n    let prevY: number = instance.scrollElement[propY]\n\n    const scroll = () => {\n      cb(instance.scrollElement[instance.options.horizontal ? propX : propY])\n    }\n\n    scroll()\n\n    const onScroll = (e: Event) => {\n      const target = e.currentTarget as HTMLElement & Window\n      const scrollX = target[propX]\n      const scrollY = target[propY]\n\n      if (instance.options.horizontal ? prevX - scrollX : prevY - scrollY) {\n        scroll()\n      }\n\n      prevX = scrollX\n      prevY = scrollY\n    }\n\n    instance.scrollElement.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      instance.scrollElement.removeEventListener('scroll', onScroll)\n    }\n  }\n}\n\nexport const observeElementOffset = createOffsetObserver('element')\nexport const observeWindowOffset = createOffsetObserver('window')\n\nexport const measureElement = (\n  element: unknown,\n  instance: Virtualizer<any, any>,\n) => {\n  return (element as Element).getBoundingClientRect()[\n    instance.options.horizontal ? 'width' : 'height'\n  ]\n}\n\nexport const windowScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Window)?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport const elementScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Element)?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement = unknown,\n  TItemElement = unknown,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    canSmooth: boolean,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    el: TItemElement,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  enableSmoothScroll?: boolean\n}\n\nexport class Virtualizer<TScrollElement = unknown, TItemElement = unknown> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  private measurementsCache: Item[] = []\n  private itemMeasurementsCache: Record<Key, number> = {}\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  private scrollOffset: number\n  private destinationOffset: undefined | number\n  private scrollCheckFrame!: ReturnType<typeof setTimeout>\n  private measureElementCache: Record<\n    number,\n    (measurableItem: TItemElement | null) => void\n  > = {}\n  private range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n\n    this.calculateRange()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      enableSmoothScroll: true,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n      this._scrollToOffset(this.scrollOffset, false)\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.calculateRange()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollOffset = offset\n          this.calculateRange()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurements = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.getItemKey,\n      this.itemMeasurementsCache,\n    ],\n    (count, paddingStart, getItemKey, measurementsCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n        const measuredSize = measurementsCache[key]\n        const start = measurements[i - 1]\n          ? measurements[i - 1]!.end\n          : paddingStart\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n        const end = start + size\n        measurements[i] = { index: i, start, size, end, key }\n      }\n\n      this.measurementsCache = measurements\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      const range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      })\n      if (\n        range.startIndex !== this.range.startIndex ||\n        range.endIndex !== this.range.endIndex\n      ) {\n        this.range = range\n        this.notify()\n      }\n      return this.range\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.range,\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count: count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItems = memo(\n    () => [\n      this.getIndexes(),\n      this.getMeasurements(),\n      this.options.measureElement,\n    ],\n    (indexes, measurements, measureElement) => {\n      const makeMeasureElement =\n        (index: number) => (measurableItem: TItemElement | null) => {\n          const item = this.measurementsCache[index]!\n\n          if (!measurableItem) {\n            return\n          }\n\n          const measuredItemSize = measureElement(measurableItem, this)\n          const itemSize = this.itemMeasurementsCache[item.key] ?? item.size\n\n          if (measuredItemSize !== itemSize) {\n            if (item.start < this.scrollOffset) {\n              if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n                console.info('correction', measuredItemSize - itemSize)\n              }\n\n              if (!this.destinationOffset) {\n                this._scrollToOffset(\n                  this.scrollOffset + (measuredItemSize - itemSize),\n                  false,\n                )\n              }\n            }\n\n            this.pendingMeasuredCacheIndexes.push(index)\n            this.itemMeasurementsCache = {\n              ...this.itemMeasurementsCache,\n              [item.key]: measuredItemSize,\n            }\n            this.notify()\n          }\n        }\n\n      const virtualItems: VirtualItem<TItemElement>[] = []\n\n      const currentMeasureElements: typeof this.measureElementCache = {}\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        const item = {\n          ...measurement,\n          measureElement: (currentMeasureElements[i] =\n            this.measureElementCache[i] ?? makeMeasureElement(i)),\n        }\n        virtualItems.push(item)\n      }\n\n      this.measureElementCache = currentMeasureElements\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', smoothScroll = this.options.enableSmoothScroll }: ScrollToOffsetOptions = {},\n  ) => {\n    const offset = this.scrollOffset\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= offset) {\n        align = 'start'\n      } else if (toOffset >= offset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n        this._scrollToOffset(toOffset, smoothScroll)\n      } else if (align === 'end') {\n        this._scrollToOffset(toOffset - size, smoothScroll)\n      } else if (align === 'center') {\n        this._scrollToOffset(toOffset - size / 2, smoothScroll)\n    }\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align = 'auto', smoothScroll = this.options.enableSmoothScroll, ...rest }: ScrollToIndexOptions = {},\n  ) => {\n    const measurements = this.getMeasurements()\n    const offset = this.scrollOffset\n    const size = this.getSize()\n    const { count } = this.options\n\n    const measurement = measurements[Math.max(0, Math.min(index, count - 1))]\n\n    if (!measurement) {\n      return\n    }\n\n    if (align === 'auto') {\n      if (measurement.end >= offset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        offset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    this.scrollToOffset(toOffset, { align, smoothScroll, ...rest })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) + this.options.paddingEnd\n\n  private _scrollToOffset = (offset: number, canSmooth: boolean) => {\n    clearTimeout(this.scrollCheckFrame)\n\n    this.destinationOffset = offset\n    this.options.scrollToFn(\n      offset,\n      canSmooth,\n      this,\n    )\n\n    let scrollCheckFrame: ReturnType<typeof setTimeout>\n\n    const check = () => {\n      let lastOffset = this.scrollOffset\n      this.scrollCheckFrame = scrollCheckFrame = setTimeout(() => {\n        if (this.scrollCheckFrame !== scrollCheckFrame) {\n          return\n        }\n\n        if (this.scrollOffset === lastOffset) {\n          this.destinationOffset = undefined\n          return\n        }\n        lastOffset = this.scrollOffset\n        check()\n      }, 100)\n    }\n\n    check()\n  }\n\n  measure = () => {\n    this.itemMeasurementsCache = {}\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Item[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"]}