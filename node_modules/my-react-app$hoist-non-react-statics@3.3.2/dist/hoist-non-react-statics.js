Liferay.Loader.define('my-react-app$hoist-non-react-statics@3.3.2/dist/hoist-non-react-statics', ['module', 'exports', 'require'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		(function (global, factory) {
			typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.hoistNonReactStatics = factory());
		})(this, function () {
			'use strict';

			function unwrapExports(x) {
				return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
			}

			function createCommonjsModule(fn, module) {
				return module = { exports: {} }, fn(module, module.exports), module.exports;
			}

			var reactIs_production_min = createCommonjsModule(function (module, exports) {
				Object.defineProperty(exports, "__esModule", { value: !0 });
				var b = "function" === typeof Symbol && Symbol.for,
				    c = b ? Symbol.for("react.element") : 60103,
				    d = b ? Symbol.for("react.portal") : 60106,
				    e = b ? Symbol.for("react.fragment") : 60107,
				    f = b ? Symbol.for("react.strict_mode") : 60108,
				    g = b ? Symbol.for("react.profiler") : 60114,
				    h = b ? Symbol.for("react.provider") : 60109,
				    k = b ? Symbol.for("react.context") : 60110,
				    l = b ? Symbol.for("react.async_mode") : 60111,
				    m = b ? Symbol.for("react.concurrent_mode") : 60111,
				    n = b ? Symbol.for("react.forward_ref") : 60112,
				    p = b ? Symbol.for("react.suspense") : 60113,
				    q = b ? Symbol.for("react.suspense_list") : 60120,
				    r = b ? Symbol.for("react.memo") : 60115,
				    t = b ? Symbol.for("react.lazy") : 60116,
				    v = b ? Symbol.for("react.fundamental") : 60117,
				    w = b ? Symbol.for("react.responder") : 60118,
				    x = b ? Symbol.for("react.scope") : 60119;function y(a) {
					if ("object" === typeof a && null !== a) {
						var u = a.$$typeof;switch (u) {case c:
								switch (a = a.type, a) {case l:case m:case e:case g:case f:case p:
										return a;default:
										switch (a = a && a.$$typeof, a) {case k:case n:case t:case r:case h:
												return a;default:
												return u;}}case d:
								return u;}
					}
				}function z(a) {
					return y(a) === m;
				}
				exports.typeOf = y;exports.AsyncMode = l;exports.ConcurrentMode = m;exports.ContextConsumer = k;exports.ContextProvider = h;exports.Element = c;exports.ForwardRef = n;exports.Fragment = e;exports.Lazy = t;exports.Memo = r;exports.Portal = d;exports.Profiler = g;exports.StrictMode = f;exports.Suspense = p;
				exports.isValidElementType = function (a) {
					return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === v || a.$$typeof === w || a.$$typeof === x);
				};exports.isAsyncMode = function (a) {
					return z(a) || y(a) === l;
				};exports.isConcurrentMode = z;exports.isContextConsumer = function (a) {
					return y(a) === k;
				};exports.isContextProvider = function (a) {
					return y(a) === h;
				};
				exports.isElement = function (a) {
					return "object" === typeof a && null !== a && a.$$typeof === c;
				};exports.isForwardRef = function (a) {
					return y(a) === n;
				};exports.isFragment = function (a) {
					return y(a) === e;
				};exports.isLazy = function (a) {
					return y(a) === t;
				};exports.isMemo = function (a) {
					return y(a) === r;
				};exports.isPortal = function (a) {
					return y(a) === d;
				};exports.isProfiler = function (a) {
					return y(a) === g;
				};exports.isStrictMode = function (a) {
					return y(a) === f;
				};exports.isSuspense = function (a) {
					return y(a) === p;
				};
			});

			unwrapExports(reactIs_production_min);
			reactIs_production_min.typeOf;
			reactIs_production_min.AsyncMode;
			reactIs_production_min.ConcurrentMode;
			reactIs_production_min.ContextConsumer;
			reactIs_production_min.ContextProvider;
			reactIs_production_min.Element;
			reactIs_production_min.ForwardRef;
			reactIs_production_min.Fragment;
			reactIs_production_min.Lazy;
			reactIs_production_min.Memo;
			reactIs_production_min.Portal;
			reactIs_production_min.Profiler;
			reactIs_production_min.StrictMode;
			reactIs_production_min.Suspense;
			reactIs_production_min.isValidElementType;
			reactIs_production_min.isAsyncMode;
			reactIs_production_min.isConcurrentMode;
			reactIs_production_min.isContextConsumer;
			reactIs_production_min.isContextProvider;
			reactIs_production_min.isElement;
			reactIs_production_min.isForwardRef;
			reactIs_production_min.isFragment;
			reactIs_production_min.isLazy;
			reactIs_production_min.isMemo;
			reactIs_production_min.isPortal;
			reactIs_production_min.isProfiler;
			reactIs_production_min.isStrictMode;
			reactIs_production_min.isSuspense;


			var reactIs_development = createCommonjsModule(function (module, exports) {
				(function () {

					Object.defineProperty(exports, '__esModule', { value: true });

					// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
					// nor polyfill, then a plain number is used for performance.
					var hasSymbol = typeof Symbol === 'function' && Symbol.for;
					var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
					var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
					var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
					var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
					var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
					var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
					var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
					// (unstable) APIs that have been removed. Can we remove the symbols?

					var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
					var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
					var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
					var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
					var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
					var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
					var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
					var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
					var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
					var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

					/**
      * Forked from fbjs/warning:
      * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
      *
      * Only change is we use console.warn instead of console.error,
      * and do nothing when 'console' is not supported.
      * This really simplifies the code.
      * ---
      * Similar to invariant but only logs a warning if the condition is not met.
      * This can be used to log issues in development environments in critical
      * paths. Removing the logging code for production environments will keep the
      * same logic and follow the same code paths.
      */
					var lowPriorityWarningWithoutStack = function () {};

					{
						var printWarning = function (format) {
							for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
								args[_key - 1] = arguments[_key];
							}

							var argIndex = 0;
							var message = 'Warning: ' + format.replace(/%s/g, function () {
								return args[argIndex++];
							});

							if (typeof console !== 'undefined') {
								console.warn(message);
							}

							try {
								// --- Welcome to debugging React ---
								// This error was thrown as a convenience so that you can use this stack
								// to find the callsite that caused this warning to fire.
								throw new Error(message);
							} catch (x) {}
						};

						lowPriorityWarningWithoutStack = function (condition, format) {
							if (format === undefined) {
								throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
							}

							if (!condition) {
								for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
									args[_key2 - 2] = arguments[_key2];
								}

								printWarning.apply(void 0, [format].concat(args));
							}
						};
					}

					var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

					function typeOf(object) {
						if (typeof object === 'object' && object !== null) {
							var $$typeof = object.$$typeof;

							switch ($$typeof) {
								case REACT_ELEMENT_TYPE:
									var type = object.type;

									switch (type) {
										case REACT_ASYNC_MODE_TYPE:
										case REACT_CONCURRENT_MODE_TYPE:
										case REACT_FRAGMENT_TYPE:
										case REACT_PROFILER_TYPE:
										case REACT_STRICT_MODE_TYPE:
										case REACT_SUSPENSE_TYPE:
											return type;

										default:
											var $$typeofType = type && type.$$typeof;

											switch ($$typeofType) {
												case REACT_CONTEXT_TYPE:
												case REACT_FORWARD_REF_TYPE:
												case REACT_LAZY_TYPE:
												case REACT_MEMO_TYPE:
												case REACT_PROVIDER_TYPE:
													return $$typeofType;

												default:
													return $$typeof;
											}

									}

								case REACT_PORTAL_TYPE:
									return $$typeof;
							}
						}

						return undefined;
					} // AsyncMode is deprecated along with isAsyncMode

					var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

					function isAsyncMode(object) {
						{
							if (!hasWarnedAboutDeprecatedIsAsyncMode) {
								hasWarnedAboutDeprecatedIsAsyncMode = true;
								lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
							}
						}

						return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
					}
					function isConcurrentMode(object) {
						return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
					}


					exports.typeOf = typeOf;
					exports.AsyncMode = REACT_ASYNC_MODE_TYPE;
					exports.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
					exports.ContextConsumer = REACT_CONTEXT_TYPE;
					exports.ContextProvider = REACT_PROVIDER_TYPE;
					exports.Element = REACT_ELEMENT_TYPE;
					exports.ForwardRef = REACT_FORWARD_REF_TYPE;
					exports.Fragment = REACT_FRAGMENT_TYPE;
					exports.Lazy = REACT_LAZY_TYPE;
					exports.Memo = REACT_MEMO_TYPE;
					exports.Portal = REACT_PORTAL_TYPE;
					exports.Profiler = REACT_PROFILER_TYPE;
					exports.StrictMode = REACT_STRICT_MODE_TYPE;
					exports.Suspense = REACT_SUSPENSE_TYPE;
					exports.isValidElementType = function isValidElementType(type) {
						return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
						type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
					};
					exports.isAsyncMode = isAsyncMode;
					exports.isConcurrentMode = isConcurrentMode;
					exports.isContextConsumer = function isContextConsumer(object) {
						return typeOf(object) === REACT_CONTEXT_TYPE;
					};
					exports.isContextProvider = function isContextProvider(object) {
						return typeOf(object) === REACT_PROVIDER_TYPE;
					};
					exports.isElement = function isElement(object) {
						return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
					};
					exports.isForwardRef = function isForwardRef(object) {
						return typeOf(object) === REACT_FORWARD_REF_TYPE;
					};
					exports.isFragment = function isFragment(object) {
						return typeOf(object) === REACT_FRAGMENT_TYPE;
					};
					exports.isLazy = function isLazy(object) {
						return typeOf(object) === REACT_LAZY_TYPE;
					};
					exports.isMemo = function isMemo(object) {
						return typeOf(object) === REACT_MEMO_TYPE;
					};
					exports.isPortal = function isPortal(object) {
						return typeOf(object) === REACT_PORTAL_TYPE;
					};
					exports.isProfiler = function isProfiler(object) {
						return typeOf(object) === REACT_PROFILER_TYPE;
					};
					exports.isStrictMode = function isStrictMode(object) {
						return typeOf(object) === REACT_STRICT_MODE_TYPE;
					};
					exports.isSuspense = function isSuspense(object) {
						return typeOf(object) === REACT_SUSPENSE_TYPE;
					};
				})();
			});

			unwrapExports(reactIs_development);
			reactIs_development.typeOf;
			reactIs_development.AsyncMode;
			reactIs_development.ConcurrentMode;
			reactIs_development.ContextConsumer;
			reactIs_development.ContextProvider;
			reactIs_development.Element;
			reactIs_development.ForwardRef;
			reactIs_development.Fragment;
			reactIs_development.Lazy;
			reactIs_development.Memo;
			reactIs_development.Portal;
			reactIs_development.Profiler;
			reactIs_development.StrictMode;
			reactIs_development.Suspense;
			reactIs_development.isValidElementType;
			reactIs_development.isAsyncMode;
			reactIs_development.isConcurrentMode;
			reactIs_development.isContextConsumer;
			reactIs_development.isContextProvider;
			reactIs_development.isElement;
			reactIs_development.isForwardRef;
			reactIs_development.isFragment;
			reactIs_development.isLazy;
			reactIs_development.isMemo;
			reactIs_development.isPortal;
			reactIs_development.isProfiler;
			reactIs_development.isStrictMode;
			reactIs_development.isSuspense;


			var reactIs = createCommonjsModule(function (module) {
				module.exports = reactIs_development;
			});
			reactIs.typeOf;
			reactIs.AsyncMode;
			reactIs.ConcurrentMode;
			reactIs.ContextConsumer;
			reactIs.ContextProvider;
			reactIs.Element;

			var reactIs_7 = reactIs.ForwardRef;
			reactIs.Fragment;
			reactIs.Lazy;

			var reactIs_10 = reactIs.Memo;
			reactIs.Portal;
			reactIs.Profiler;
			reactIs.StrictMode;
			reactIs.Suspense;
			reactIs.isValidElementType;
			reactIs.isAsyncMode;
			reactIs.isConcurrentMode;
			reactIs.isContextConsumer;
			reactIs.isContextProvider;
			reactIs.isElement;
			reactIs.isForwardRef;
			reactIs.isFragment;
			reactIs.isLazy;

			var reactIs_24 = reactIs.isMemo;
			reactIs.isPortal;
			reactIs.isProfiler;
			reactIs.isStrictMode;
			reactIs.isSuspense;


			/**
    * Copyright 2015, Yahoo! Inc.
    * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
    */
			var REACT_STATICS = {
				childContextTypes: true,
				contextType: true,
				contextTypes: true,
				defaultProps: true,
				displayName: true,
				getDefaultProps: true,
				getDerivedStateFromError: true,
				getDerivedStateFromProps: true,
				mixins: true,
				propTypes: true,
				type: true
			};
			var KNOWN_STATICS = {
				name: true,
				length: true,
				prototype: true,
				caller: true,
				callee: true,
				arguments: true,
				arity: true
			};

			var MEMO_STATICS = {
				'$$typeof': true,
				compare: true,
				defaultProps: true,
				displayName: true,
				propTypes: true,
				type: true
			};
			var TYPE_STATICS = {};
			TYPE_STATICS[reactIs_7] = {
				'$$typeof': true,
				render: true,
				defaultProps: true,
				displayName: true,
				propTypes: true
			};
			TYPE_STATICS[reactIs_10] = MEMO_STATICS;

			function getStatics(component) {
				// React v16.11 and below
				if (reactIs_24(component)) {
					return MEMO_STATICS;
				} // React v16.12 and above


				return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
			}

			var defineProperty = Object.defineProperty;
			var getOwnPropertyNames = Object.getOwnPropertyNames;
			var getOwnPropertySymbols = Object.getOwnPropertySymbols;
			var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
			var getPrototypeOf = Object.getPrototypeOf;
			var objectPrototype = Object.prototype;
			function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
				if (typeof sourceComponent !== 'string') {
					// don't hoist over string (html) components
					if (objectPrototype) {
						var inheritedComponent = getPrototypeOf(sourceComponent);

						if (inheritedComponent && inheritedComponent !== objectPrototype) {
							hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
						}
					}

					var keys = getOwnPropertyNames(sourceComponent);

					if (getOwnPropertySymbols) {
						keys = keys.concat(getOwnPropertySymbols(sourceComponent));
					}

					var targetStatics = getStatics(targetComponent);
					var sourceStatics = getStatics(sourceComponent);

					for (var i = 0; i < keys.length; ++i) {
						var key = keys[i];

						if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
							var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

							try {
								// Avoid failures from read-only properties
								defineProperty(targetComponent, key, descriptor);
							} catch (e) {}
						}
					}
				}

				return targetComponent;
			}

			return hoistNonReactStatics;
		});
	}
});
//# sourceMappingURL=hoist-non-react-statics.js.map