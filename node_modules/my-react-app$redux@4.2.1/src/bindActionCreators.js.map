{"version":3,"sources":["bindActionCreators.js"],"names":["kindOf","bindActionCreator","actionCreator","dispatch","apply","arguments","bindActionCreators","actionCreators","Error","boundActionCreators","key"],"mappings":";;;;AAAA,aAASA,MAAT,QAAuB,gBAAvB;;AAEA,aAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,QAA1C,EAAoD;AAClD,aAAO,YAAY;AACjB,eAAOA,SAASD,cAAcE,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAT,CAAP;AACD,OAFD;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAe,SAASC,kBAAT,CAA4BC,cAA5B,EAA4CJ,QAA5C,EAAsD;AACnE,UAAI,OAAOI,cAAP,KAA0B,UAA9B,EAA0C;AACxC,eAAON,kBAAkBM,cAAlB,EAAkCJ,QAAlC,CAAP;AACD;;AAED,UAAI,OAAOI,cAAP,KAA0B,QAA1B,IAAsCA,mBAAmB,IAA7D,EAAmE;AACjE,cAAM,IAAIC,KAAJ,CACH,+EAA8ER,OAC7EO,cAD6E,CAE7E,KAFF,GAGG,0FAJC,CAAN;AAMD;;AAED,YAAME,sBAAsB,EAA5B;AACA,WAAK,MAAMC,GAAX,IAAkBH,cAAlB,EAAkC;AAChC,cAAML,gBAAgBK,eAAeG,GAAf,CAAtB;AACA,YAAI,OAAOR,aAAP,KAAyB,UAA7B,EAAyC;AACvCO,8BAAoBC,GAApB,IAA2BT,kBAAkBC,aAAlB,EAAiCC,QAAjC,CAA3B;AACD;AACF;AACD,aAAOM,mBAAP;AACD","file":"bindActionCreators.js","sourcesContent":["import { kindOf } from './utils/kindOf'\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments))\n  }\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, but instead received: '${kindOf(\n        actionCreators\n      )}'. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  const boundActionCreators = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n"]}