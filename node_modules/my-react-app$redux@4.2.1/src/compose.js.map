{"version":3,"sources":["compose.js"],"names":["compose","funcs","length","arg","reduce","a","b","args"],"mappings":";;;;AAAA;;;;;;;;;;;AAWA,mBAAe,SAASA,OAAT,CAAiB,GAAGC,KAApB,EAA2B;AACxC,UAAIA,MAAMC,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAQC,GAAD,IAASA,GAAhB;AACD;;AAED,UAAIF,MAAMC,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAOD,MAAM,CAAN,CAAP;AACD;;AAED,aAAOA,MAAMG,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAAC,GAAGC,IAAJ,KAAaF,EAAEC,EAAE,GAAGC,IAAL,CAAF,CAApC,CAAP;AACD","file":"compose.js","sourcesContent":["/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return (arg) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n"]}