{"version":3,"sources":["applyMiddleware.js"],"names":["compose","applyMiddleware","middlewares","createStore","args","store","dispatch","Error","middlewareAPI","getState","chain","map","middleware"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,WAAOA,OAAP,MAAoB,WAApB;;AAEA;;;;;;;;;;;;;;;;AAgBA,mBAAe,SAASC,eAAT,CAAyB,GAAGC,WAA5B,EAAyC;AACtD,aAAQC,WAAD,IAAiB,CAAC,GAAGC,IAAJ,KAAa;AACnC,cAAMC,QAAQF,YAAY,GAAGC,IAAf,CAAd;AACA,YAAIE,WAAW,MAAM;AACnB,gBAAM,IAAIC,KAAJ,CACJ,oEACE,yDAFE,CAAN;AAID,SALD;;AAOA,cAAMC,gBAAgB;AACpBC,oBAAUJ,MAAMI,QADI;AAEpBH,oBAAU,CAAC,GAAGF,IAAJ,KAAaE,SAAS,GAAGF,IAAZ;AAFH,SAAtB;AAIA,cAAMM,QAAQR,YAAYS,GAAZ,CAAiBC,UAAD,IAAgBA,WAAWJ,aAAX,CAAhC,CAAd;AACAF,mBAAWN,QAAQ,GAAGU,KAAX,EAAkBL,MAAMC,QAAxB,CAAX;;AAEA,4BACKD,KADL;AAEEC;AAFF;AAID,OApBD;AAqBD","file":"applyMiddleware.js","sourcesContent":["import compose from './compose'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args),\n    }\n    const chain = middlewares.map((middleware) => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch,\n    }\n  }\n}\n"]}