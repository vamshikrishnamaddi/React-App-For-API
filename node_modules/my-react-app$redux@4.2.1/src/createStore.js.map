{"version":3,"sources":["createStore.js"],"names":["$$observable","ActionTypes","isPlainObject","kindOf","createStore","reducer","preloadedState","enhancer","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","type","listeners","i","length","INIT","replaceReducer","nextReducer","REPLACE","observable","observer","TypeError","observeState","next","legacy_createStore"],"mappings":"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","file":"createStore.js","sourcesContent":["import $$observable from './utils/symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport { kindOf } from './utils/kindOf'\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore(reducer, preloadedState, enhancer) {\n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'\n    )\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(\n        `Expected the enhancer to be a function. Instead, received: '${kindOf(\n          enhancer\n        )}'`\n      )\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error(\n      `Expected the root reducer to be a function. Instead, received: '${kindOf(\n        reducer\n      )}'`\n    )\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error(\n        `Expected the listener to be a function. Instead, received: '${kindOf(\n          listener\n        )}'`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api/store#subscribelistener for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api/store#subscribelistener for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n      currentListeners = null\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        `Actions must be plain objects. Instead, the actual type was: '${kindOf(\n          action\n        )}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.'\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(\n        `Expected the nextReducer to be a function. Instead, received: '${kindOf(\n          nextReducer\n        )}`\n      )\n    }\n\n    currentReducer = nextReducer\n\n    // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError(\n            `Expected the observer to be an object. Instead, received: '${kindOf(\n              observer\n            )}'`\n          )\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      },\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT })\n\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable,\n  }\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport const legacy_createStore = createStore\n"]}