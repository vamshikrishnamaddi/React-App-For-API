{"version":3,"sources":["asyncGeneratorDelegate.js"],"names":["OverloadYield","_asyncGeneratorDelegate","inner","iter","waiting","pump","key","value","Promise","resolve","done","Symbol","iterator","next"],"mappings":";;;;AAAA,WAAOA,aAAP,MAA0B,oBAA1B;AACA,mBAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACrD,UAAIC,OAAO,EAAX;AAAA,UACEC,UAAU,CAAC,CADb;AAEA,eAASC,IAAT,CAAcC,GAAd,EAAmBC,KAAnB,EAA0B;AACxB,eAAOH,UAAU,CAAC,CAAX,EAAcG,QAAQ,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAC1DA,kBAAQP,MAAMI,GAAN,EAAWC,KAAX,CAAR;AACD,SAF4B,CAAtB,EAEH;AACFG,gBAAM,CAAC,CADL;AAEFH,iBAAO,IAAIP,aAAJ,CAAkBO,KAAlB,EAAyB,CAAzB;AAFL,SAFJ;AAMD;AACD,aAAOJ,KAAK,eAAe,OAAOQ,MAAtB,IAAgCA,OAAOC,QAAvC,IAAmD,YAAxD,IAAwE,YAAY;AACzF,eAAO,IAAP;AACD,OAFM,EAEJT,KAAKU,IAAL,GAAY,UAAUN,KAAV,EAAiB;AAC9B,eAAOH,WAAWA,UAAU,CAAC,CAAX,EAAcG,KAAzB,IAAkCF,KAAK,MAAL,EAAaE,KAAb,CAAzC;AACD,OAJM,EAIJ,cAAc,OAAOL,MAAM,OAAN,CAArB,KAAwCC,KAAK,OAAL,IAAgB,UAAUI,KAAV,EAAiB;AAC1E,YAAIH,OAAJ,EAAa,MAAMA,UAAU,CAAC,CAAX,EAAcG,KAApB;AACb,eAAOF,KAAK,OAAL,EAAcE,KAAd,CAAP;AACD,OAHE,CAJI,EAOH,cAAc,OAAOL,MAAM,QAAN,CAArB,KAAyCC,KAAK,QAAL,IAAiB,UAAUI,KAAV,EAAiB;AAC7E,eAAOH,WAAWA,UAAU,CAAC,CAAX,EAAcG,KAAzB,IAAkCF,KAAK,QAAL,EAAeE,KAAf,CAAzC;AACD,OAFG,CAPG,EASHJ,IATJ;AAUD","file":"asyncGeneratorDelegate.js","sourcesContent":["import OverloadYield from \"./OverloadYield.js\";\nexport default function _asyncGeneratorDelegate(inner) {\n  var iter = {},\n    waiting = !1;\n  function pump(key, value) {\n    return waiting = !0, value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    }), {\n      done: !1,\n      value: new OverloadYield(value, 1)\n    };\n  }\n  return iter[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function () {\n    return this;\n  }, iter.next = function (value) {\n    return waiting ? (waiting = !1, value) : pump(\"next\", value);\n  }, \"function\" == typeof inner[\"throw\"] && (iter[\"throw\"] = function (value) {\n    if (waiting) throw waiting = !1, value;\n    return pump(\"throw\", value);\n  }), \"function\" == typeof inner[\"return\"] && (iter[\"return\"] = function (value) {\n    return waiting ? (waiting = !1, value) : pump(\"return\", value);\n  }), iter;\n}"]}