{"version":3,"sources":["../../../../src/index.tsx"],"names":["useIsomorphicLayoutEffect","React","rerender","resolvedOptions","onChange","options","Virtualizer","instance","useVirtualizerBase","observeElementRect","observeElementOffset","scrollToFn","elementScroll","getScrollElement","observeWindowRect","observeWindowOffset","windowScroll"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,UAAMA,4BACJ,OAAA,MAAA,KAAA,WAAA,GAAgCC,iBAAhC,eAAA,GAAwDA,iBAD1D,SAAA;;AAGA,aAAA,kBAAA,CAAA,OAAA,EAE6C;AAC3C,YAAMC,WAAWD,iBAAAA,UAAAA,CAAiB,OAAjBA,EAAiB,CAAjBA,EAAAA,EAAAA,EAAjB,CAAiBA,CAAjB;AAEA,YAAME,+BAAoE,OAApEA;AAEJC,kBAAU,YAAc;AACtBF;AACAG,kBAAAA,QAAAA,IAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAAA,QAAAA,CAAAA,QAAAA,CAAAA;AACD;AALGF,QAAN;AAQA,YAAM,CAAA,QAAA,IAAaF,iBAAAA,QAAAA,CACjB,MAAM,IAAIK,MAAJ,WAAA,CADR,eACQ,CADWL,CAAnB;AAIAM,eAAAA,UAAAA,CAAAA,eAAAA;AAEAN,uBAAAA,SAAAA,CAAgB,MAAM;AACpB,eAAOM,SAAP,SAAOA,EAAP;AADFN,OAAAA,EAAAA,EAAAA;AAIAD,gCAA0B,MAAM;AAC9B,eAAOO,SAAP,WAAOA,EAAP;AADFP,OAAAA;AAIA,aAAA,QAAA;AACD;;AAEM,aAAA,cAAA,CAAA,OAAA,EAKsC;AAC3C,aAAOQ;AACLC,4BAAoBA,MADkC,kBAAjDD;AAELE,8BAAsBA,MAFgC,oBAAjDF;AAGLG,oBAAYC,MAH0C;AAAjDJ,SAIFH,OAJEG,EAAP;AAMD;AAEM,aAAA,oBAAA,CAAA,OAAA,EAQ8B;AACnC,aAAOA;AACLK,0BAAkB,MAAO,OAAA,MAAA,KAAA,WAAA,GAAA,MAAA,GADqB,IAAzCL;AAELC,4BAAoBK,MAF0B,iBAAzCN;AAGLE,8BAAsBK,MAHwB,mBAAzCP;AAILG,oBAAYK,MAJkC;AAAzCR,SAKFH,OALEG,EAAP;AAOD","sourcesContent":["import * as React from 'react'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<TScrollElement, TItemElement = unknown>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance) => {\n      rerender()\n      options.onChange?.(instance)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<TScrollElement, TItemElement = unknown>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement = unknown>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof window !== 'undefined' ? window : null!),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    ...options,\n  })\n}\n"]}